[{"C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\index.js":"1","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\logIn\\LogIn.js":"2","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\signUp\\SignUp.js":"3","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\ChatScreen.js":"4","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\Utils.js":"5","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\rightScreen\\RightScreen.js":"6","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\leftScreen\\LeftScreen.js":"7","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\rightScreen\\ChatTextBox.js":"8","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\rightScreen\\ChatHeader.js":"9","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\rightScreen\\Message.js":"10","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\leftScreen\\ChooseNewChat.js":"11","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\leftScreen\\leftChatItem\\LeftChatItem.js":"12","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\leftScreen\\AddNewChat.js":"13"},{"size":607,"mtime":1653752613710,"results":"14","hashOfConfig":"15"},{"size":1858,"mtime":1658343346346,"results":"16","hashOfConfig":"15"},{"size":7752,"mtime":1653752613712,"results":"17","hashOfConfig":"15"},{"size":7208,"mtime":1653752613699,"results":"18","hashOfConfig":"15"},{"size":1868,"mtime":1653752613699,"results":"19","hashOfConfig":"15"},{"size":1728,"mtime":1653752613709,"results":"20","hashOfConfig":"15"},{"size":3648,"mtime":1653752613703,"results":"21","hashOfConfig":"15"},{"size":4238,"mtime":1653764490987,"results":"22","hashOfConfig":"15"},{"size":691,"mtime":1653752613706,"results":"23","hashOfConfig":"15"},{"size":671,"mtime":1653752613708,"results":"24","hashOfConfig":"15"},{"size":6718,"mtime":1653765762795,"results":"25","hashOfConfig":"15"},{"size":1772,"mtime":1653752613706,"results":"26","hashOfConfig":"15"},{"size":1428,"mtime":1653763214060,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},"re9p6y",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":1,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"32"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"32"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"32"},"C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\index.js",["78","79"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport LogIn from './logIn/LogIn';\r\nimport SignUp from \"./signUp/SignUp\";\r\nimport ChatScreen from './chatScreen/ChatScreen';\r\nimport {BrowserRouter, Routes, Route, Link, useNavigate} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Routes>\r\n            <Route path=\"/\" element={<LogIn/>}/>\r\n            <Route path=\"signUp\" element={<SignUp/>}/>\r\n            <Route path=\"chatScreen\" element={<ChatScreen/>}/>\r\n        </Routes>\r\n    </BrowserRouter>,\r\n\r\n    document.getElementById('root')\r\n);",["80","81"],"C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\logIn\\LogIn.js",["82","83","84","85","86","87","88","89","90","91"],[],"C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\signUp\\SignUp.js",["92","93"],[],"import '../logIn/LogIn.css';\r\nimport './SignUp.css'\r\nimport {convertToBase64, getUser} from \"../chatScreen/Utils\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {user, setUser} from '../logIn/LogIn';\r\n// Keeps the current user which will be logged-in to the website.\r\n\r\nvar profileImage = \"/images/userImages/defaultImage.png\";\r\nexport {profileImage};\r\n\r\n\r\n\r\n/**\r\n * A sign-up form for the chat app.\r\n */\r\nfunction SignUp() {\r\n    const navigate = useNavigate();\r\n\r\n    /**\r\n     * Setting an invalid class and invalid feedback for element.\r\n     * @param element the element that will have an invalid feedback.\r\n     * @param message the message of the feedback.\r\n     */\r\n    const setValid = (element, message) => {\r\n        const inputParent = element.parentElement;\r\n        element.classList.add('is-valid');\r\n        element.classList.remove('is-invalid')\r\n        const validationMessage = inputParent.getElementsByClassName(\"validation-helper\")[0];\r\n        validationMessage.classList.add('valid-feedback');\r\n        validationMessage.classList.remove('invalid-feedback')\r\n        validationMessage.innerText = message;\r\n    };\r\n\r\n    /**\r\n     * Setting a valid class and valid feedback for element.\r\n     * @param element the element that will have a valid feedback.\r\n     * @param message the message of the feedback.\r\n     */\r\n    const setInvalid = (element, message) => {\r\n        const inputParent = element.parentElement;\r\n        element.classList.add('is-invalid');\r\n        element.classList.remove('is-valid')\r\n        const validationMessage = inputParent.getElementsByClassName(\"validation-helper\")[0];\r\n        validationMessage.classList.add('invalid-feedback');\r\n        validationMessage.classList.remove('valid-feedback')\r\n        validationMessage.innerText = message;\r\n\r\n    }\r\n\r\n    /**\r\n     * Checking if the data filled by the user in a form is valid.\r\n     * @returns true if all the data is valid. Else, false is returned.\r\n     */\r\n    const checkValid = (validationData) => {\r\n        //getting the user input elements.\r\n        const userName = document.getElementById('username');\r\n        const nickName = document.getElementById('nickname');\r\n        const password = document.getElementById('Password');\r\n        const passwordRepeat = document.getElementById('validatePassword');\r\n        const valid = \"valid\"\r\n        let isValid = true;\r\n        //Checking the username. We want it to be unique and not an empty string.\r\n        if (validationData.usernameV === valid)\r\n            setValid(userName, \"This username is available\");\r\n        else {\r\n            setInvalid(userName, validationData.usernameV);\r\n            isValid = false;\r\n        }\r\n\r\n        //Checking the nickname. We don't allow empty string as nickname.\r\n        if (validationData.nicknameV === valid)\r\n            setValid(nickName, \"Nice Nickname!\");\r\n        else {\r\n            setInvalid(nickName, validationData.nicknameV);\r\n            isValid = false;\r\n        }\r\n\r\n        /*\r\n         * Checking the password chosen by the user. It must be longer than 6 character and contain al least one letter\r\n         * and one number.\r\n         */\r\n        if (validationData.passwordV === valid)\r\n            setValid(password, \"Good password\");\r\n        else {\r\n            setInvalid(password, validationData.passwordV);\r\n            isValid = false;\r\n        }\r\n\r\n        if (validationData.repeatPasswordV === valid)\r\n            setValid(passwordRepeat, \"\");\r\n        else {\r\n            setInvalid(passwordRepeat, validationData.repeatPasswordV);\r\n            isValid = false;\r\n        }\r\n        return isValid\r\n    }\r\n\r\n    /**\r\n     * Handling the submission of the registration form.\r\n     * @param event the submit event.\r\n     */\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation()\r\n        const newUserName = document.getElementById(\"username\").value.trim();\r\n        const newNickName = document.getElementById('nickname').value.trim();\r\n        const newPassword = document.getElementById('Password').value;\r\n        const repeatPassword = document.getElementById('validatePassword').value;\r\n        fetch(\"http://localhost:5170/api/SignUp\",\r\n            {\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                headers: {'Content-type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: newUserName.toString(),\r\n                    nickname: newNickName.toString(),\r\n                    password: newPassword.toString(),\r\n                    repeatPassword: repeatPassword.toString()\r\n                })\r\n            }).then((response) => {\r\n            response.json().then(async (validationData) => {\r\n                // Setting the current user and redirecting the user to the chat if the sign-up was successful.\r\n                if (checkValid(validationData)) {\r\n                    var newUser = await getUser(newUserName.toString());\r\n                    setUser(newUser);\r\n                    navigate(\"../chatScreen\");\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    return (\r\n        //The sign-up form.\r\n        <div className=\"container\" id=\"signContainer\">\r\n            <form className=\"text-center sign-up-form needs-validation\" noValidate id=\"signUpForm\"\r\n                  onSubmit={handleSubmit}>\r\n                <h3 className=\"log-in-header\">We need more friends, please join us ...</h3>\r\n\r\n                <div className=\"form-floating mb-3 input-style \">\r\n                    <input type=\"text\" name='userName' className=\"form-control input-box-size\" id=\"username\"\r\n                           placeholder=\"Username\"></input>\r\n                    <label className=\"form-label\" htmlFor=\"username\">Username</label>\r\n                    <span className=\"validation-helper\"></span>\r\n                </div>\r\n\r\n                <div className=\"form-floating mb-3 input-style \">\r\n                    <input type=\"text\" name='userName' className=\"form-control \" id=\"nickname\"\r\n                           placeholder=\"nickname\"></input>\r\n                    <label className=\"form-label\" htmlFor=\"nickname\">nickname</label>\r\n                    <span className=\"validation-helper\"></span>\r\n                </div>\r\n\r\n                <div className=\"form-floating mb-3 input-style \">\r\n                    <input type=\"password\" name='Password' className=\"form-control \" id=\"Password\"\r\n                           placeholder=\"Password\"></input>\r\n                    <label className=\"form-label\" htmlFor=\"Password\">Password</label>\r\n                    <span className=\"validation-helper\"></span>\r\n                </div>\r\n\r\n                <div className=\"form-floating mb-3 input-style \">\r\n                    <input type=\"password\" name='validatePassword' className=\"form-control \" id=\"validatePassword\"\r\n                           placeholder=\"Repeat password\"></input>\r\n                    <label className=\"form-label\" htmlFor=\"validatePassword\">Repeat password</label>\r\n                    <span className=\"validation-helper\"></span>\r\n                </div>\r\n\r\n                <div className=\"mb-3\">\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-lg\">Sign-in</button>\r\n                </div>\r\n\r\n                <div className=\"text\">\r\n                    already registered? log in <Link to='/' className=\"text\">here</Link>\r\n                </div>\r\n                <div className=\"text\">\r\n                  You are welcome to <a href='http://localhost:5189/Ranks'>Rate us</a>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n        ;\r\n}\r\n\r\nexport default SignUp;\r\n","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\ChatScreen.js",["94","95","96"],[],"import React, {useEffect} from 'react';\r\nimport './ChatScreen.css';\r\nimport {useState, useRef} from \"react\";\r\nimport LeftScreen from './leftScreen/LeftScreen';\r\nimport RightScreen from \"./rightScreen/RightScreen\";\r\nimport {Link, useLocation} from \"react-router-dom\";\r\nimport {user} from '../logIn/LogIn';\r\nimport {HubConnectionBuilder} from '@microsoft/signalr';\r\n\r\n\r\nfunction ChatScreen() {\r\n    var [currentConversation, setCurrentConversation] = useState(\"\");\r\n    var conversationDBRef = useRef(\"\"); //Reference to the current conversation\r\n    var [currentListOfChats, setCurrentListOfChats] = useState(user.conversations);\r\n    var listOfChatsRef = useRef(user.conversations) //Reference to the current lost of chats\r\n    var [connection, setConnection] = useState(null);\r\n\r\n    useEffect(() => {\r\n        //Creating a signaIR connection\r\n        const newConnection = new HubConnectionBuilder().withUrl('http://localhost:5170/hubs/chatHub').withAutomaticReconnect().build();\r\n        setConnection(newConnection)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (listOfChatsRef.current !== [] && currentConversation !== \"\") {\r\n\r\n            /*\r\n             * If a new message was sent to the current user in the chat he is currently watching we will update the\r\n             * current conversation.\r\n             */\r\n            if (currentConversation.contact.username === listOfChatsRef.current[0].contact.username) {\r\n                var copyLastConversation = JSON.parse(JSON.stringify(listOfChatsRef.current[0]))\r\n                conversationDBRef.current = copyLastConversation\r\n                setCurrentConversation(copyLastConversation)\r\n            }\r\n        }\r\n    }, [currentListOfChats])\r\n\r\n    useEffect(() => {\r\n        if (connection) {\r\n            //Defining methods that will be used when a signaIR signal is sent\r\n            connection.start().then((result) => {\r\n                //Adding new contact when someone else adds the current user as contact\r\n                connection.on('NewContactAdded', (params) => {\r\n                    if (user.id === params.to) {\r\n                        listOfChatsRef.current = params.conversations.value\r\n                        setCurrentListOfChats(params.conversations.value)\r\n                    }\r\n                })\r\n\r\n                //Adding new message when a contact sent a new message to the current user\r\n                connection.on('ReceiveMessage', (params) => {\r\n                    if (user.id === params.to) {\r\n                        //Finding the chat that the message should be added to\r\n                        for (var i = 0; i < listOfChatsRef.current.length; i++) {\r\n                            var chat = listOfChatsRef.current[i];\r\n                            if (chat.contact.username === params.from) {\r\n                                chat.messages.push({\r\n                                    id: params.id,\r\n                                    content: params.content,\r\n                                    created: params.created,\r\n                                    sent: params.sent\r\n                                })\r\n                                //Putting the conversations at the top of the conversations list\r\n                                listOfChatsRef.current.splice(i, 1);\r\n                                listOfChatsRef.current.unshift(chat);\r\n                            }\r\n                        }\r\n                        //Updating the chats list\r\n                        let chatsArr = JSON.parse(JSON.stringify(listOfChatsRef.current));\r\n                        setCurrentListOfChats(chatsArr)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }, [connection])\r\n\r\n    useEffect(() => {\r\n        //Applying the function only if a chat was chosen by the user.\r\n        if (currentConversation !== \"\") {\r\n            let bottom = document.getElementById(\"lastMessage\");\r\n            //If a new message was sent in the current chat we add this message to the corresponding array in our DB.\r\n            if (currentConversation.messages.length !== conversationDBRef.current.messages.length) {\r\n                conversationDBRef.current.messages.push(currentConversation.messages[currentConversation.messages.length - 1])\r\n                //Scrolling down to the last message if the user sent a new message.\r\n                if (currentConversation.messages[currentConversation.messages.length - 1].sent === true) {\r\n                    bottom.scrollIntoView({block: \"end\"});\r\n                }\r\n                // If the current conversation is in the array, add it to the front of the array.\r\n                var conversations = \"\";\r\n\r\n                async function fetchData() {\r\n                    var response = await fetch('http://localhost:5170/api/Users/MoveConversationToTopList',\r\n                        {\r\n                            method: \"POST\",\r\n                            credentials: 'include',\r\n                            headers: {'Content-Type': 'application/json'},\r\n                            body: JSON.stringify({\r\n                                username: user.id,\r\n                                id: currentConversation.contact.username\r\n                            })\r\n                        })\r\n                    // If the current conversation pushed to the top of the user's list of conversations, get the list.\r\n                    if (response.ok)\r\n                        var conversations = await response.json();\r\n                    if (conversations !== \"\") {\r\n                        setCurrentListOfChats(conversations);\r\n                        listOfChatsRef.current = conversations\r\n\r\n                    }\r\n                }\r\n                fetchData();\r\n            }\r\n            //If we changed the chat conversation we scroll down to the last message.\r\n            else {\r\n                bottom.scrollIntoView({block: \"end\"});\r\n            }\r\n        }\r\n    }, [currentConversation])\r\n\r\n\r\n    //If there is no user connected the chat screen won't be displayed.\r\n    if (user === \"\") {\r\n        return (\r\n            <div className=\"sign-up-form\">\r\n                <h4 className=\"text-center\" role=\"alert\">You have to log-in in order to see the chat\r\n                    screen.<br/><br/>\r\n                    You can click <Link to='/' className=\"text\">here</Link> to log-in.<br/>\r\n                </h4>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"container-chat-screen justify-content-center\">\r\n                <div className=\"inner-chat-cube\">\r\n                    <LeftScreen currentConversation={currentConversation} user={user} setChat={setCurrentConversation}\r\n                                listRef={listOfChatsRef} connection={connection} refer={conversationDBRef}\r\n                                currentListOfChats={currentListOfChats} setCurrentListOfChats={setCurrentListOfChats}/>\r\n                    <RightScreen chat={currentConversation} setChat={setCurrentConversation} user={user}\r\n                                 connection={connection}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatScreen;","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\Utils.js",["97","98","99"],[],"import { user } from \"../logIn/LogIn\";\r\n\r\n/**\r\n * Converts an image input of a user to a base64 string which represents the image.\r\n * @param file the file that was given as input by the user.\r\n * @return a promise to convert the image.\r\n */\r\nexport function convertToBase64(file, onLoadCallback) {\r\n    return new Promise(function (resolve, reject) {\r\n        let reader = new FileReader();\r\n        reader.onload = function () {\r\n            resolve(reader.result);\r\n        };\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(file);\r\n    });\r\n}\r\n\r\n/**\r\n * @return a formatted \"day.month.year, hour:minutes\" date string.\r\n */\r\nexport function getFormattedDateString(message) {\r\n    if (message != \"\") {\r\n        let messageDate = new Date(message.created);\r\n        let day = messageDate.getDate();\r\n        let month = messageDate.getMonth() + 1;\r\n        let year = messageDate.getFullYear();\r\n        let hour = messageDate.getHours();\r\n        if (hour < 10)\r\n            hour = \"0\" + hour;\r\n        let minutes = messageDate.getMinutes();\r\n        if (minutes < 10)\r\n            minutes = \"0\" + minutes;\r\n        return day + '.' + month + '.' + year + \", \" + hour + ':' + minutes;\r\n    }\r\n}\r\n\r\n/**\r\n * The function returns the conversations of the current log-in user, according\r\n * to the username (his id).\r\n * @param logInUsername is the username of the logged-in user.\r\n */\r\nexport async function getUser(logInUsername) {\r\n    var userData;\r\n    const response = await fetch('http://localhost:5170/api/Users?username=' + logInUsername,\r\n        {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                username: logInUsername\r\n            })\r\n        })\r\n    const user = await response.json();\r\n    return user;\r\n}\r\n","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\rightScreen\\RightScreen.js",[],[],"C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\leftScreen\\LeftScreen.js",["100","101","102"],[],"import React, {useEffect} from 'react';\r\nimport '../ChatScreen.css';\r\nimport './LeftScreen.css';\r\nimport './leftChatItem/LeftChatItem.css';\r\nimport LeftChatItem from './leftChatItem/LeftChatItem';\r\nimport ChooseNewChat from './ChooseNewChat';\r\nimport {getFormattedDateString} from \"../Utils\";\r\nimport { profileImage } from '../../signUp/SignUp';\r\n\r\n/**\r\n * The left side of the chat which holds the list of chats the user is having.\r\n * @param props include the information of the user currently logged-in, the current chosen\r\n * conversation, the list of conversations the user is having and a setter to this list.\r\n */\r\nfunction LeftScreen(props) {\r\n    // Chats holds all the conversations of the current log-in user.\r\n    var chats = props.currentListOfChats;\r\n    // Keeping the current log-in user's profile image.\r\n    var logInUserImage = profileImage;\r\n    var relevantInfo = [];\r\n\r\n    /*\r\n     * For each conversation the current log-in user is having, we create the information\r\n     * needed to be presented on the left side bar, including the contact's name, his profile picture,\r\n     * the last message has been sent in the conversation and the time it was delivered.\r\n    */\r\n    for (var i = 0; i < Object.keys(chats).length; i++) {\r\n        var usernameInChat = \"\";\r\n        var nicknameInChat = \"\"\r\n        var lastMessage = \"\";\r\n        var message = \"\";\r\n        var image;\r\n        var type = \"\";\r\n\r\n        usernameInChat = chats[i].contact.username;\r\n        nicknameInChat = chats[i].contact.name;\r\n        image = profileImage;\r\n\r\n        // If there are chats to persent, update their information.\r\n        if ((chats[i].messages.length)!=0) {\r\n            if (chats[i].messages[chats[i].messages.length - 1].content != null) {\r\n                lastMessage = chats[i].messages[chats[i].messages.length - 1].content;\r\n            }\r\n            type = \"text\";\r\n            message = chats[i].messages[chats[i].messages.length - 1];\r\n        }\r\n        relevantInfo.push({ nicknameInChat: nicknameInChat, usernameInChat: usernameInChat, type: type, lastMessage: lastMessage, time: getFormattedDateString(message), image: image });\r\n    }\r\n\r\n    // Keeps the list of conversations that the logged-in user is having.\r\n    var conversationsList;        \r\n    // Mapping components of LeftChatItem with the relevant information they are needed.\r\n    conversationsList = props.currentListOfChats.map((conversation, index) => {\r\n        return <LeftChatItem conversation={relevantInfo[index]} key={index} chat={chats[index]} currentConversation={props.currentConversation} refer={props.refer} setChat={props.setChat} />\r\n    });\r\n    return (\r\n        <div className=\"col-4 leftScreen\">\r\n            <div className=\"topLine\">\r\n                <img src={logInUserImage} className=\"float-start top-left-profile-image\"></img>\r\n                <h5 className='top-left-username'>{props.user.name}</h5>\r\n                <button className=\"bi bi-person-plus-fill add-conversation ms-3\" data-bs-toggle=\"modal\" data-bs-target=\"#add-new-contact\"></button>\r\n            </div>\r\n            <div className=\"container\" id=\"left-chats-container\">\r\n                <div className=\"center-col\" id=\"present-left-chat-items\">\r\n                    {conversationsList}\r\n                </div>\r\n            </div>\r\n            <ChooseNewChat user={props.user} logInUsername={props.user.id} conversationsList={conversationsList} listRef={props.listRef}\r\n            currentListOfChats={props.currentListOfChats} setCurrentListOfChats={props.setCurrentListOfChats} connection={props.connection}/>\r\n        </div>\r\n    );\r\n}\r\nexport default LeftScreen;","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\rightScreen\\ChatTextBox.js",["103","104","105","106","107","108","109"],[],"import '../ChatScreen.css';\r\nimport \"./RightScreen.css\"\r\nimport {convertToBase64} from \"../Utils\";\r\nimport {currentChatGlobal, setCurrentChatGlobal, user} from \"../../logIn/LogIn\";\r\nimport message from \"./Message\";\r\n\r\n/**\r\n * The bottom part of the right part of chat screen from which the user can send messages.\r\n */\r\nfunction ChatTextBox(props) {\r\n    async function handleSendTextClick() {\r\n        //Getting the message typed by the user\r\n        let messageContent = document.getElementById(\"textBox\").value;\r\n        //If the user didn't type a message we won't send an empty string, Else we add the message to the chat.\r\n        if (messageContent.trim() !== \"\") {\r\n\r\n            try{\r\n\r\n            // Asking from the contact to add the message to his conversation chat.\r\n            var response = await fetch('http://' + props.chat.contact.server + '/api/transfer',\r\n                {\r\n                    method: \"POST\",\r\n                    credentials: 'include',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        from: props.user.id,\r\n                        to: props.chat.contact.username,\r\n                        content: messageContent\r\n                    })\r\n                })\r\n            if (!(response.status === 201)) {\r\n                return;\r\n            }\r\n        }\r\n            catch(err) {\r\n                var invalidUser = \"invalid user!\"\r\n                document.getElementById(\"validation\").innerHTML = invalidUser;\r\n                return;\r\n            }\r\n\r\n            // Adding a new message to the conversation in the db.\r\n            var response = await fetch('http://localhost:5170/api/contacts/' + props.chat.contact.username\r\n                + '/messages',\r\n                {\r\n                    method: \"POST\",\r\n                    credentials: 'include',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        content: messageContent\r\n                    })\r\n                })\r\n            if (!(response.status === 201)) {\r\n                return;\r\n            }\r\n            var conversation = \"\"\r\n\r\n            // Getting the current update conversation of the logged-in user with the contact.\r\n            var response = await fetch('http://localhost:5170/api/Users/GetConversation',\r\n                {\r\n                    method: \"POST\",\r\n                    credentials: 'include',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        id: props.chat.contact.username\r\n                    })\r\n                })\r\n            if (response.ok) {\r\n                conversation = await response.json();\r\n            }\r\n            if (conversation != \"\") {\r\n                //Appending the message to the end of the messages array.\r\n                props.setChat(conversation)\r\n            }\r\n            var lastMessage = conversation.messages[conversation.messages.length - 1]\r\n            //Clearing the chat message box.\r\n            document.getElementById(\"textBox\").value = \"\";\r\n            //Signaling to the contact that he has a new message.\r\n            if (props.connection.connectionStarted) {\r\n                try {\r\n                    await props.connection.invoke('HubNewMessage', user.id, props.chat.contact.username, lastMessage.id,\r\n                        lastMessage.content, lastMessage.created, lastMessage.sent);\r\n                } catch (e) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"bottom-input-line\">\r\n            {/*text box for writing messages*/}\r\n            <textarea id=\"textBox\" className=\"form-control-lg message-box\" rows=\"1\"\r\n                      placeholder=\"Type a message\"></textarea>\r\n\r\n            {/*send text button*/}\r\n            <button type=\"button\" className=\"btn-lg btn-outline-secondary float-end bottom-btn\"\r\n                    onClick={handleSendTextClick}>\r\n                <i className=\"bi bi-send\"></i>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatTextBox;","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\rightScreen\\ChatHeader.js",["110"],[],"import '../ChatScreen.css';\r\nimport \"./RightScreen.css\"\r\nimport { profileImage } from '../../signUp/SignUp';\r\n\r\n/**\r\n * The header of the chat. It includes an image and the nickname of the user we currently chat with.\r\n * @param props includes the user we currently chat with.\r\n */\r\nfunction ChatHeader(props) {\r\n    if (props.chatWith === \"\") {\r\n        return (<div className=\"topLine\"></div>)\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"topLine\">\r\n                <img src={profileImage}\r\n                     className=\" top-profile-image\"></img>\r\n                <h5>{props.chatWith.name}</h5>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatHeader;","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\rightScreen\\Message.js",[],[],"C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\leftScreen\\ChooseNewChat.js",["111","112","113","114","115","116","117"],[],"\r\nimport AddNewChat from './AddNewChat';\r\nimport { useState } from \"react\";\r\nimport {user} from \"../../logIn/LogIn\";\r\n\r\n/**\r\n * The function gives the option to add a new chat to the user's chats array.\r\n * @param props include the username of the user currently logged-in,\r\n * the array of conversations the user is having and a setter to this array.\r\n */\r\nfunction ChooseNewChat(props) {\r\n    \r\n    /**\r\n     * The function addNewContact creates a new conversation that the logged-in\r\n     * user wants to have and sets the array of conversations adding this new conversation.\r\n    */\r\n    async function addNewContact() {\r\n        // Keeps the new contact's username that the user has typed.\r\n        var newContactUsername = document.getElementById(\"contactName\").value;\r\n        var newContactNickname = document.getElementById(\"contactNickname\").value;\r\n        var newContactServer = document.getElementById(\"contactServer\").value;\r\n\r\n        // Keeps new conversation between the log-in user to the contact the user has chose,\r\n        // or null if there is no such user.\r\n        var responsee = await AddNewChat({\r\n            logInUsername: props.logInUsername,\r\n            conversationsList: props.conversationsList,\r\n            newContact: newContactUsername, relevantInfo: props.relevantInfo, currentListOfChats: props.currentListOfChats,\r\n            user: props.user, newContactNickname: newContactNickname, newContactServer: newContactServer\r\n        });\r\n        // If there is no such user, return and don't create anything.\r\n        if (responsee === \"false\") {\r\n            return;\r\n        }\r\n        let chatsArr = [...props.currentListOfChats];\r\n\r\n        // Asking for the contact to add us as a contact.\r\n        try{\r\n        var response = await fetch('http://'+newContactServer+'/api/Invitations',\r\n        {\r\n          method: \"POST\",\r\n          credentials: 'include',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({\r\n            from: props.logInUsername,\r\n            to: newContactUsername,\r\n            fromServer: \"localhost:5170\"\r\n          })  \r\n        })\r\n    }\r\n    catch(err) {\r\n        var invalidUser = \"invalid user!\"\r\n        document.getElementById(\"validation\").innerHTML = invalidUser;\r\n        return;\r\n    }\r\n        // If the user is not registered, announce it is invalid username.\r\n        if(!response || !(response.status === 201)) {\r\n            var invalidUser = \"invalid user!\"\r\n            document.getElementById(\"validation\").innerHTML = invalidUser;\r\n            return;\r\n        }\r\n\r\n        // Adding the new contact as our contact in the db.\r\n        var response = await fetch('http://localhost:5170/api/contacts',\r\n        {\r\n          method: \"POST\",\r\n          credentials: 'include',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({\r\n            id: newContactUsername,\r\n            name: newContactNickname,\r\n            server: newContactServer\r\n          })\r\n        })\r\n        if(response.status !== 201) {\r\n            return;\r\n        } \r\n        var invalidUser = \"user added successfully!\"\r\n        document.getElementById(\"validation\").innerHTML = invalidUser;\r\n\r\n        // getting the list of conversations of the current user.\r\n        var response = await fetch('http://localhost:5170/api/Users/GetAllConversationsOfUser',\r\n        {\r\n          method: \"POST\",\r\n          credentials: 'include',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({\r\n            id: props.logInUsername,\r\n          })\r\n        })\r\n        if(!response.ok) {\r\n            return;\r\n        }\r\n        var conversations = await response.json();\r\n        props.listRef.current=conversations\r\n        // Setting the array of conversations to present the new chat on the scree.\r\n        props.setCurrentListOfChats(conversations);\r\n    }\r\n\r\n    /**\r\n    * The function deletes the input text that the user has written and the messsage\r\n    * he has received.\r\n    */\r\n    function deleteInput() {\r\n        document.getElementById(\"contactName\").value = \"\";\r\n        document.getElementById(\"contactNickname\").value = \"\";\r\n        document.getElementById(\"contactServer\").value = \"\";\r\n        document.getElementById(\"validation\").innerHTML = \"\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-4 leftScreen\">\r\n            <div className=\"modal fade\" id=\"add-new-contact\" tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">Add new contact</h5>\r\n\r\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={deleteInput}></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <div className=\"form-floating\">\r\n                                <input type=\"text\" className=\"form-control newContact\" placeholder=\"Leave a comment here\" id=\"contactName\" required></input>\r\n                                <label htmlFor=\"contactName\">Contact's username</label>\r\n                            </div>\r\n                            <br></br>\r\n                            <div className=\"form-floating\">\r\n                                <input type=\"text\" className=\"form-control newContact\" placeholder=\"Leave a comment here\" id=\"contactNickname\" required></input>\r\n                                <label htmlFor=\"contactNickname\">Contact's nickname</label>\r\n                            </div>\r\n                            <br></br>\r\n                            <div className=\"form-floating\">\r\n                                <input type=\"text\" className=\"form-control newContact\" placeholder=\"Leave a comment here\" id=\"contactServer\" required></input>\r\n                                <label htmlFor=\"contactServer\">Contact's server</label>\r\n                            </div>\r\n                            <div id=\"validation\"></div>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\" onClick={deleteInput}>Close</button>\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={addNewContact}>Add</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ChooseNewChat;","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\leftScreen\\leftChatItem\\LeftChatItem.js",["118"],[],"import './LeftChatItem.css';\r\nimport React from 'react';\r\n\r\n\r\n/**\r\n * The function represent a left chat item including the relevant information\r\n * needs to be presented in the item, such as the last message in the conversation,\r\n * the time it was sent, the nickname of the user in chat and his profile image.\r\n * @param props include the username of the user currently logged-in,\r\n * the array of conversations the user is having and a setter to this array.\r\n */\r\nfunction LeftChatItem(props) {\r\n    var lastMessagePresented = \"\";\r\n    var iconClassName = \"\";\r\n\r\n    lastMessagePresented = props.conversation.lastMessage;\r\n\r\n    /**\r\n    * The function sets the current conversation as lons as it is a different\r\n    * conversation than the current chat the user is at.\r\n    * @param chat represent the chat the user is on right now.\r\n    */\r\n    function showChat(chat) {\r\n        if (chat !== props.refer.current) {\r\n            props.refer.current = chat;\r\n            props.setChat(chat);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='left-chat-item' onClick={() => showChat(props.chat)}>\r\n            <div className='left-image'>\r\n                <img src={props.conversation.image} className=\"chat-profile-image\"></img>\r\n            </div>\r\n            <div className='mid-item'>\r\n                <div>\r\n                    <span className=\"chat-member-name\">{props.conversation.nicknameInChat}</span>\r\n                    <div className='last-message-time'>{props.conversation.time}</div>\r\n                </div>\r\n                <div className=\"chat-last-message\">{lastMessagePresented}&nbsp;\r\n                    <i className={iconClassName}></i>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default LeftChatItem;","C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\src\\chatScreen\\leftScreen\\AddNewChat.js",["119","120","121","122","123","124","125"],[],"import React from 'react';\r\nimport LeftScreen from './LeftScreen';\r\nimport LeftChatItem from './leftChatItem/LeftChatItem';\r\nimport ChooseNewChat from './ChooseNewChat';\r\nimport { profileImage } from '../../signUp/SignUp';\r\n\r\n/**\r\n * The function recieves new contact's username, and checks if it is a valid\r\n * username in the DB.\r\n * @param props include the username of the user currently logged-in, the username\r\n * that the user is wishing to talk to, the array of conversations the log-in user\r\n * is having and a setter to this array.\r\n */\r\nasync function AddNewChat(props) {\r\n    var isRegisteredUser = false;\r\n    // If the user entered his own contact's identifier username, do nothing. \r\n    if (props.logInUsername === props.newContact) {\r\n        var invalidUser = \"you can't talk with yourself here :(\"\r\n        document.getElementById(\"validation\").innerHTML = invalidUser;\r\n        return \"false\";\r\n    }\r\n\r\n    for (var i = 0; i < Object.keys(props.conversationsList).length; i++) {\r\n        // If the user already have a conversation with this contact, do nothing.\r\n        if (props.conversationsList[i].props.conversation.usernameInChat === props.newContact) {\r\n            var invalidUser = \"this user is already talking with you!\"\r\n            document.getElementById(\"validation\").innerHTML = invalidUser;\r\n            return \"false\";\r\n        }\r\n    }\r\n    return \"true\";\r\n}\r\n\r\nexport default AddNewChat;",{"ruleId":"126","severity":1,"message":"127","line":7,"column":39,"nodeType":"128","messageId":"129","endLine":7,"endColumn":43},{"ruleId":"126","severity":1,"message":"130","line":7,"column":45,"nodeType":"128","messageId":"129","endLine":7,"endColumn":56},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"126","severity":1,"message":"135","line":2,"column":8,"nodeType":"128","messageId":"129","endLine":2,"endColumn":18},{"ruleId":"126","severity":1,"message":"136","line":5,"column":8,"nodeType":"128","messageId":"129","endLine":5,"endColumn":16},{"ruleId":"126","severity":1,"message":"127","line":6,"column":9,"nodeType":"128","messageId":"129","endLine":6,"endColumn":13},{"ruleId":"126","severity":1,"message":"130","line":6,"column":15,"nodeType":"128","messageId":"129","endLine":6,"endColumn":26},{"ruleId":"126","severity":1,"message":"137","line":6,"column":28,"nodeType":"128","messageId":"129","endLine":6,"endColumn":37},{"ruleId":"126","severity":1,"message":"138","line":7,"column":10,"nodeType":"128","messageId":"129","endLine":7,"endColumn":17},{"ruleId":"126","severity":1,"message":"139","line":12,"column":5,"nodeType":"128","messageId":"129","endLine":12,"endColumn":22},{"ruleId":"126","severity":1,"message":"140","line":32,"column":9,"nodeType":"128","messageId":"129","endLine":32,"endColumn":13},{"ruleId":"126","severity":1,"message":"141","line":37,"column":7,"nodeType":"128","messageId":"129","endLine":37,"endColumn":10},{"ruleId":"142","severity":2,"message":"143","line":37,"column":13,"nodeType":"128","messageId":"144","endLine":37,"endColumn":14},{"ruleId":"126","severity":1,"message":"145","line":3,"column":9,"nodeType":"128","messageId":"129","endLine":3,"endColumn":24},{"ruleId":"126","severity":1,"message":"146","line":6,"column":9,"nodeType":"128","messageId":"129","endLine":6,"endColumn":13},{"ruleId":"126","severity":1,"message":"147","line":6,"column":15,"nodeType":"128","messageId":"129","endLine":6,"endColumn":26},{"ruleId":"148","severity":1,"message":"149","line":37,"column":8,"nodeType":"150","endLine":37,"endColumn":28,"suggestions":"151"},{"ruleId":"126","severity":1,"message":"152","line":90,"column":21,"nodeType":"128","messageId":"129","endLine":90,"endColumn":34},{"ruleId":"126","severity":1,"message":"146","line":1,"column":10,"nodeType":"128","messageId":"129","endLine":1,"endColumn":14},{"ruleId":"153","severity":1,"message":"154","line":23,"column":17,"nodeType":"155","messageId":"156","endLine":23,"endColumn":19},{"ruleId":"126","severity":1,"message":"157","line":44,"column":9,"nodeType":"128","messageId":"129","endLine":44,"endColumn":17},{"ruleId":"126","severity":1,"message":"158","line":1,"column":16,"nodeType":"128","messageId":"129","endLine":1,"endColumn":25},{"ruleId":"153","severity":1,"message":"154","line":40,"column":39,"nodeType":"155","messageId":"156","endLine":40,"endColumn":41},{"ruleId":"159","severity":1,"message":"160","line":59,"column":17,"nodeType":"161","endLine":59,"endColumn":90},{"ruleId":"126","severity":1,"message":"145","line":3,"column":9,"nodeType":"128","messageId":"129","endLine":3,"endColumn":24},{"ruleId":"126","severity":1,"message":"162","line":4,"column":9,"nodeType":"128","messageId":"129","endLine":4,"endColumn":26},{"ruleId":"126","severity":1,"message":"163","line":4,"column":28,"nodeType":"128","messageId":"129","endLine":4,"endColumn":48},{"ruleId":"126","severity":1,"message":"164","line":5,"column":8,"nodeType":"128","messageId":"129","endLine":5,"endColumn":15},{"ruleId":"165","severity":1,"message":"166","line":42,"column":17,"nodeType":"128","messageId":"167","endLine":42,"endColumn":25},{"ruleId":"165","severity":1,"message":"166","line":58,"column":17,"nodeType":"128","messageId":"167","endLine":58,"endColumn":25},{"ruleId":"153","severity":1,"message":"154","line":70,"column":30,"nodeType":"155","messageId":"156","endLine":70,"endColumn":32},{"ruleId":"159","severity":1,"message":"160","line":16,"column":17,"nodeType":"161","endLine":17,"endColumn":53},{"ruleId":"126","severity":1,"message":"168","line":3,"column":10,"nodeType":"128","messageId":"129","endLine":3,"endColumn":18},{"ruleId":"126","severity":1,"message":"146","line":4,"column":9,"nodeType":"128","messageId":"129","endLine":4,"endColumn":13},{"ruleId":"126","severity":1,"message":"169","line":35,"column":13,"nodeType":"128","messageId":"129","endLine":35,"endColumn":21},{"ruleId":"165","severity":1,"message":"170","line":58,"column":17,"nodeType":"128","messageId":"167","endLine":58,"endColumn":28},{"ruleId":"165","severity":1,"message":"166","line":64,"column":13,"nodeType":"128","messageId":"167","endLine":64,"endColumn":21},{"ruleId":"165","severity":1,"message":"170","line":78,"column":13,"nodeType":"128","messageId":"167","endLine":78,"endColumn":24},{"ruleId":"165","severity":1,"message":"166","line":82,"column":13,"nodeType":"128","messageId":"167","endLine":82,"endColumn":21},{"ruleId":"159","severity":1,"message":"160","line":33,"column":17,"nodeType":"161","endLine":33,"endColumn":84},{"ruleId":"126","severity":1,"message":"171","line":1,"column":8,"nodeType":"128","messageId":"129","endLine":1,"endColumn":13},{"ruleId":"126","severity":1,"message":"172","line":2,"column":8,"nodeType":"128","messageId":"129","endLine":2,"endColumn":18},{"ruleId":"126","severity":1,"message":"173","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":20},{"ruleId":"126","severity":1,"message":"174","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":21},{"ruleId":"126","severity":1,"message":"175","line":5,"column":10,"nodeType":"128","messageId":"129","endLine":5,"endColumn":22},{"ruleId":"126","severity":1,"message":"176","line":15,"column":9,"nodeType":"128","messageId":"129","endLine":15,"endColumn":25},{"ruleId":"165","severity":1,"message":"170","line":26,"column":17,"nodeType":"128","messageId":"167","endLine":26,"endColumn":28},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useNavigate' is defined but never used.","no-native-reassign",["177"],"no-negated-in-lhs",["178"],"'ChatScreen' is defined but never used.","'ReactDOM' is defined but never used.","'useParams' is defined but never used.","'getUser' is defined but never used.","'currentChatGlobal' is assigned a value but never used.","'text' is assigned a value but never used.","'tag' is assigned a value but never used.","no-undef","'$' is not defined.","undef","'convertToBase64' is defined but never used.","'user' is defined but never used.","'useLocation' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentConversation'. Either include it or remove the dependency array.","ArrayExpression",["179"],"'conversations' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'userData' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'currentChatGlobal' is defined but never used.","'setCurrentChatGlobal' is defined but never used.","'message' is defined but never used.","no-redeclare","'response' is already defined.","redeclared","'useState' is defined but never used.","'chatsArr' is assigned a value but never used.","'invalidUser' is already defined.","'React' is defined but never used.","'LeftScreen' is defined but never used.","'LeftChatItem' is defined but never used.","'ChooseNewChat' is defined but never used.","'profileImage' is defined but never used.","'isRegisteredUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},"Update the dependencies array to be: [currentConversation, currentListOfChats]",{"range":"182","text":"183"},[1688,1708],"[currentConversation, currentListOfChats]"]