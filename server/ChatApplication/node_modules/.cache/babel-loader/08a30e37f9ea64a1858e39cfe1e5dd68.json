{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { SubjectSubscription } from \"./Utils\";\n/** Stream implementation to stream items to the server. */\n\nexport class Subject {\n  constructor() {\n    this.observers = [];\n  }\n\n  next(item) {\n    for (const observer of this.observers) {\n      observer.next(item);\n    }\n  }\n\n  error(err) {\n    for (const observer of this.observers) {\n      if (observer.error) {\n        observer.error(err);\n      }\n    }\n  }\n\n  complete() {\n    for (const observer of this.observers) {\n      if (observer.complete) {\n        observer.complete();\n      }\n    }\n  }\n\n  subscribe(observer) {\n    this.observers.push(observer);\n    return new SubjectSubscription(this, observer);\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAGA,SAASA,mBAAT,QAAoC,SAApC;AAEA;;AACA,OAAM,MAAOC,OAAP,CAAc;AAOhBC;AACI,SAAKC,SAAL,GAAiB,EAAjB;AACH;;AAEMC,MAAI,CAACC,IAAD,EAAQ;AACf,SAAK,MAAMC,QAAX,IAAuB,KAAKH,SAA5B,EAAuC;AACnCG,cAAQ,CAACF,IAAT,CAAcC,IAAd;AACH;AACJ;;AAEME,OAAK,CAACC,GAAD,EAAS;AACjB,SAAK,MAAMF,QAAX,IAAuB,KAAKH,SAA5B,EAAuC;AACnC,UAAIG,QAAQ,CAACC,KAAb,EAAoB;AAChBD,gBAAQ,CAACC,KAAT,CAAeC,GAAf;AACH;AACJ;AACJ;;AAEMC,UAAQ;AACX,SAAK,MAAMH,QAAX,IAAuB,KAAKH,SAA5B,EAAuC;AACnC,UAAIG,QAAQ,CAACG,QAAb,EAAuB;AACnBH,gBAAQ,CAACG,QAAT;AACH;AACJ;AACJ;;AAEMC,WAAS,CAACJ,QAAD,EAA+B;AAC3C,SAAKH,SAAL,CAAeQ,IAAf,CAAoBL,QAApB;AACA,WAAO,IAAIN,mBAAJ,CAAwB,IAAxB,EAA8BM,QAA9B,CAAP;AACH;;AApCe","names":["SubjectSubscription","Subject","constructor","observers","next","item","observer","error","err","complete","subscribe","push"],"sources":["C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\node_modules\\@microsoft\\signalr\\src\\Subject.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: IStreamSubscriber<T>[];\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}