{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\nimport { HttpConnection } from \"./HttpConnection\";\nimport { HubConnection } from \"./HubConnection\";\nimport { LogLevel } from \"./ILogger\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { NullLogger } from \"./Loggers\";\nimport { Arg, ConsoleLogger } from \"./Utils\";\nconst LogLevelNameMapping = {\n  trace: LogLevel.Trace,\n  debug: LogLevel.Debug,\n  info: LogLevel.Information,\n  information: LogLevel.Information,\n  warn: LogLevel.Warning,\n  warning: LogLevel.Warning,\n  error: LogLevel.Error,\n  critical: LogLevel.Critical,\n  none: LogLevel.None\n};\n\nfunction parseLogLevel(name) {\n  // Case-insensitive matching via lower-casing\n  // Yes, I know case-folding is a complicated problem in Unicode, but we only support\n  // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\n  const mapping = LogLevelNameMapping[name.toLowerCase()];\n\n  if (typeof mapping !== \"undefined\") {\n    return mapping;\n  } else {\n    throw new Error(`Unknown log level: ${name}`);\n  }\n}\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\n\n\nexport class HubConnectionBuilder {\n  configureLogging(logging) {\n    Arg.isRequired(logging, \"logging\");\n\n    if (isLogger(logging)) {\n      this.logger = logging;\n    } else if (typeof logging === \"string\") {\n      const logLevel = parseLogLevel(logging);\n      this.logger = new ConsoleLogger(logLevel);\n    } else {\n      this.logger = new ConsoleLogger(logging);\n    }\n\n    return this;\n  }\n\n  withUrl(url, transportTypeOrOptions) {\n    Arg.isRequired(url, \"url\");\n    Arg.isNotEmpty(url, \"url\");\n    this.url = url; // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n    // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n\n    if (typeof transportTypeOrOptions === \"object\") {\n      this.httpConnectionOptions = { ...this.httpConnectionOptions,\n        ...transportTypeOrOptions\n      };\n    } else {\n      this.httpConnectionOptions = { ...this.httpConnectionOptions,\n        transport: transportTypeOrOptions\n      };\n    }\n\n    return this;\n  }\n  /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n   *\r\n   * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n   */\n\n\n  withHubProtocol(protocol) {\n    Arg.isRequired(protocol, \"protocol\");\n    this.protocol = protocol;\n    return this;\n  }\n\n  withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\n    if (this.reconnectPolicy) {\n      throw new Error(\"A reconnectPolicy has already been set.\");\n    }\n\n    if (!retryDelaysOrReconnectPolicy) {\n      this.reconnectPolicy = new DefaultReconnectPolicy();\n    } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\n      this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\n    } else {\n      this.reconnectPolicy = retryDelaysOrReconnectPolicy;\n    }\n\n    return this;\n  }\n  /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n   *\r\n   * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n   */\n\n\n  build() {\n    // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n    // provided to configureLogger\n    const httpConnectionOptions = this.httpConnectionOptions || {}; // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n\n    if (httpConnectionOptions.logger === undefined) {\n      // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n      httpConnectionOptions.logger = this.logger;\n    } // Now create the connection\n\n\n    if (!this.url) {\n      throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n    }\n\n    const connection = new HttpConnection(this.url, httpConnectionOptions);\n    return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy);\n  }\n\n}\n\nfunction isLogger(logger) {\n  return logger.log !== undefined;\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,sBAAT,QAAuC,0BAAvC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAGA,SAAkBC,QAAlB,QAAkC,WAAlC;AAGA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,GAAT,EAAcC,aAAd,QAAmC,SAAnC;AAEA,MAAMC,mBAAmB,GAA4B;AACjDC,OAAK,EAAEN,QAAQ,CAACO,KADiC;AAEjDC,OAAK,EAAER,QAAQ,CAACS,KAFiC;AAGjDC,MAAI,EAAEV,QAAQ,CAACW,WAHkC;AAIjDC,aAAW,EAAEZ,QAAQ,CAACW,WAJ2B;AAKjDE,MAAI,EAAEb,QAAQ,CAACc,OALkC;AAMjDC,SAAO,EAAEf,QAAQ,CAACc,OAN+B;AAOjDE,OAAK,EAAEhB,QAAQ,CAACiB,KAPiC;AAQjDC,UAAQ,EAAElB,QAAQ,CAACmB,QAR8B;AASjDC,MAAI,EAAEpB,QAAQ,CAACqB;AATkC,CAArD;;AAYA,SAASC,aAAT,CAAuBC,IAAvB,EAAmC;AAC/B;AACA;AACA;AACA,QAAMC,OAAO,GAAGnB,mBAAmB,CAACkB,IAAI,CAACE,WAAL,EAAD,CAAnC;;AACA,MAAI,OAAOD,OAAP,KAAmB,WAAvB,EAAoC;AAChC,WAAOA,OAAP;AACH,GAFD,MAEO;AACH,UAAM,IAAIP,KAAJ,CAAU,sBAAsBM,IAAI,EAApC,CAAN;AACH;AACJ;AAED;;;AACA,OAAM,MAAOG,oBAAP,CAA2B;AA0CtBC,kBAAgB,CAACC,OAAD,EAAqC;AACxDzB,OAAG,CAAC0B,UAAJ,CAAeD,OAAf,EAAwB,SAAxB;;AAEA,QAAIE,QAAQ,CAACF,OAAD,CAAZ,EAAuB;AACnB,WAAKG,MAAL,GAAcH,OAAd;AACH,KAFD,MAEO,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AACpC,YAAMI,QAAQ,GAAGV,aAAa,CAACM,OAAD,CAA9B;AACA,WAAKG,MAAL,GAAc,IAAI3B,aAAJ,CAAkB4B,QAAlB,CAAd;AACH,KAHM,MAGA;AACH,WAAKD,MAAL,GAAc,IAAI3B,aAAJ,CAAkBwB,OAAlB,CAAd;AACH;;AAED,WAAO,IAAP;AACH;;AA0BMK,SAAO,CAACC,GAAD,EAAcC,sBAAd,EAAiF;AAC3FhC,OAAG,CAAC0B,UAAJ,CAAeK,GAAf,EAAoB,KAApB;AACA/B,OAAG,CAACiC,UAAJ,CAAeF,GAAf,EAAoB,KAApB;AAEA,SAAKA,GAAL,GAAWA,GAAX,CAJ2F,CAM3F;AACA;;AACA,QAAI,OAAOC,sBAAP,KAAkC,QAAtC,EAAgD;AAC5C,WAAKE,qBAAL,GAA6B,EAAE,GAAG,KAAKA,qBAAV;AAAiC,WAAGF;AAApC,OAA7B;AACH,KAFD,MAEO;AACH,WAAKE,qBAAL,GAA6B,EACzB,GAAG,KAAKA,qBADiB;AAEzBC,iBAAS,EAAEH;AAFc,OAA7B;AAIH;;AAED,WAAO,IAAP;AACH;AAED;;;;;;AAIOI,iBAAe,CAACC,QAAD,EAAuB;AACzCrC,OAAG,CAAC0B,UAAJ,CAAeW,QAAf,EAAyB,UAAzB;AAEA,SAAKA,QAAL,GAAgBA,QAAhB;AACA,WAAO,IAAP;AACH;;AAmBMC,wBAAsB,CAACC,4BAAD,EAAuD;AAChF,QAAI,KAAKC,eAAT,EAA0B;AACtB,YAAM,IAAI1B,KAAJ,CAAU,yCAAV,CAAN;AACH;;AAED,QAAI,CAACyB,4BAAL,EAAmC;AAC/B,WAAKC,eAAL,GAAuB,IAAI9C,sBAAJ,EAAvB;AACH,KAFD,MAEO,IAAI+C,KAAK,CAACC,OAAN,CAAcH,4BAAd,CAAJ,EAAiD;AACpD,WAAKC,eAAL,GAAuB,IAAI9C,sBAAJ,CAA2B6C,4BAA3B,CAAvB;AACH,KAFM,MAEA;AACH,WAAKC,eAAL,GAAuBD,4BAAvB;AACH;;AAED,WAAO,IAAP;AACH;AAED;;;;;;AAIOI,OAAK;AACR;AACA;AACA,UAAMT,qBAAqB,GAAG,KAAKA,qBAAL,IAA8B,EAA5D,CAHQ,CAKR;;AACA,QAAIA,qBAAqB,CAACN,MAAtB,KAAiCgB,SAArC,EAAgD;AAC5C;AACAV,2BAAqB,CAACN,MAAtB,GAA+B,KAAKA,MAApC;AACH,KATO,CAWR;;;AACA,QAAI,CAAC,KAAKG,GAAV,EAAe;AACX,YAAM,IAAIjB,KAAJ,CAAU,0FAAV,CAAN;AACH;;AACD,UAAM+B,UAAU,GAAG,IAAIlD,cAAJ,CAAmB,KAAKoC,GAAxB,EAA6BG,qBAA7B,CAAnB;AAEA,WAAOtC,aAAa,CAACkD,MAAd,CACHD,UADG,EAEH,KAAKjB,MAAL,IAAe7B,UAAU,CAACgD,QAFvB,EAGH,KAAKV,QAAL,IAAiB,IAAIvC,eAAJ,EAHd,EAIH,KAAK0C,eAJF,CAAP;AAKH;;AA3K4B;;AA8KjC,SAASb,QAAT,CAAkBC,MAAlB,EAA6B;AACzB,SAAOA,MAAM,CAACoB,GAAP,KAAeJ,SAAtB;AACH","names":["DefaultReconnectPolicy","HttpConnection","HubConnection","LogLevel","JsonHubProtocol","NullLogger","Arg","ConsoleLogger","LogLevelNameMapping","trace","Trace","debug","Debug","info","Information","information","warn","Warning","warning","error","Error","critical","Critical","none","None","parseLogLevel","name","mapping","toLowerCase","HubConnectionBuilder","configureLogging","logging","isRequired","isLogger","logger","logLevel","withUrl","url","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","transport","withHubProtocol","protocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","reconnectPolicy","Array","isArray","build","undefined","connection","create","instance","log"],"sources":["C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\node_modules\\@microsoft\\signalr\\src\\HubConnectionBuilder.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\nconst LogLevelNameMapping: {[k: string]: LogLevel} = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}