{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ex2\\\\clientSide\\\\src\\\\chatScreen\\\\rightScreen\\\\ChatTextBox.js\";\nimport '../ChatScreen.css';\nimport \"./RightScreen.css\";\nimport { convertToBase64 } from \"../Utils\";\nimport { currentChatGlobal, setCurrentChatGlobal, user } from \"../../logIn/LogIn\";\nimport message from \"./Message\";\n/**\r\n * The bottom part of the right part of chat screen from which the user can send messages.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatTextBox(props) {\n  async function handleSendTextClick() {\n    //Getting the message typed by the user\n    let messageContent = document.getElementById(\"textBox\").value; //If the user didn't type a message we won't send an empty string, Else we add the message to the chat.\n\n    if (messageContent.trim() !== \"\") {\n      // Asking from the contact to add the message to his conversation chat.\n      var response = await fetch('http://' + props.chat.contact.server + '/api/transfer', {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          from: props.user.id,\n          to: props.chat.contact.username,\n          content: messageContent\n        })\n      });\n\n      if (!(response.status === 201)) {\n        return;\n      } // Adding a new message to the conversation in the db.\n\n\n      var response = await fetch('http://localhost:5170/api/contacts/' + props.chat.contact.username + '/messages', {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: messageContent\n        })\n      });\n\n      if (!(response.status === 201)) {\n        return;\n      }\n\n      var conversation = \"\"; // Getting the current update conversation of the logged-in user with the contact.\n\n      var response = await fetch('http://localhost:5170/api/Users/GetConversation', {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: props.chat.contact.username\n        })\n      });\n\n      if (response.ok) {\n        conversation = await response.json();\n      }\n\n      if (conversation != \"\") {\n        //Appending the message to the end of the messages array.\n        props.setChat(conversation);\n      }\n\n      var lastMessage = conversation.messages[conversation.messages.length - 1]; //Clearing the chat message box.\n\n      document.getElementById(\"textBox\").value = \"\"; //Signaling to the contact that he has a new message.\n\n      if (props.connection.connectionStarted) {\n        try {\n          await props.connection.invoke('HubNewMessage', user.id, props.chat.contact.username, lastMessage.id, lastMessage.content, lastMessage.created, lastMessage.sent);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bottom-input-line\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"textBox\",\n      className: \"form-control-lg message-box\",\n      rows: \"1\",\n      placeholder: \"Type a message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"btn-lg btn-outline-secondary float-end bottom-btn\",\n      onClick: handleSendTextClick,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_c = ChatTextBox;\nexport default ChatTextBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatTextBox\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ex2/clientSide/src/chatScreen/rightScreen/ChatTextBox.js"],"names":["convertToBase64","currentChatGlobal","setCurrentChatGlobal","user","message","ChatTextBox","props","handleSendTextClick","messageContent","document","getElementById","value","trim","response","fetch","chat","contact","server","method","credentials","headers","body","JSON","stringify","from","id","to","username","content","status","conversation","ok","json","setChat","lastMessage","messages","length","connection","connectionStarted","invoke","created","sent","e","console","log"],"mappings":"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","sourcesContent":["import '../ChatScreen.css';\r\nimport \"./RightScreen.css\"\r\nimport {convertToBase64} from \"../Utils\";\r\nimport {currentChatGlobal, setCurrentChatGlobal, user} from \"../../logIn/LogIn\";\r\nimport message from \"./Message\";\r\n\r\n/**\r\n * The bottom part of the right part of chat screen from which the user can send messages.\r\n */\r\nfunction ChatTextBox(props) {\r\n    async function handleSendTextClick() {\r\n        //Getting the message typed by the user\r\n        let messageContent = document.getElementById(\"textBox\").value;\r\n        //If the user didn't type a message we won't send an empty string, Else we add the message to the chat.\r\n        if (messageContent.trim() !== \"\") {\r\n\r\n            // Asking from the contact to add the message to his conversation chat.\r\n            var response = await fetch('http://' + props.chat.contact.server + '/api/transfer',\r\n                {\r\n                    method: \"POST\",\r\n                    credentials: 'include',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        from: props.user.id,\r\n                        to: props.chat.contact.username,\r\n                        content: messageContent\r\n                    })\r\n                })\r\n            if (!(response.status === 201)) {\r\n                return;\r\n            }\r\n\r\n            // Adding a new message to the conversation in the db.\r\n            var response = await fetch('http://localhost:5170/api/contacts/' + props.chat.contact.username\r\n                + '/messages',\r\n                {\r\n                    method: \"POST\",\r\n                    credentials: 'include',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        content: messageContent\r\n                    })\r\n                })\r\n            if (!(response.status === 201)) {\r\n                return;\r\n            }\r\n            var conversation = \"\"\r\n\r\n            // Getting the current update conversation of the logged-in user with the contact.\r\n            var response = await fetch('http://localhost:5170/api/Users/GetConversation',\r\n                {\r\n                    method: \"POST\",\r\n                    credentials: 'include',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        id: props.chat.contact.username\r\n                    })\r\n                })\r\n            if (response.ok) {\r\n                conversation = await response.json();\r\n            }\r\n            if (conversation != \"\") {\r\n                //Appending the message to the end of the messages array.\r\n                props.setChat(conversation)\r\n            }\r\n            var lastMessage = conversation.messages[conversation.messages.length - 1]\r\n            //Clearing the chat message box.\r\n            document.getElementById(\"textBox\").value = \"\";\r\n            //Signaling to the contact that he has a new message.\r\n            if (props.connection.connectionStarted) {\r\n                try {\r\n                    await props.connection.invoke('HubNewMessage', user.id, props.chat.contact.username, lastMessage.id,\r\n                        lastMessage.content, lastMessage.created, lastMessage.sent);\r\n                } catch (e) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"bottom-input-line\">\r\n            {/*text box for writing messages*/}\r\n            <textarea id=\"textBox\" className=\"form-control-lg message-box\" rows=\"1\"\r\n                      placeholder=\"Type a message\"></textarea>\r\n\r\n            {/*send text button*/}\r\n            <button type=\"button\" className=\"btn-lg btn-outline-secondary float-end bottom-btn\"\r\n                    onClick={handleSendTextClick}>\r\n                <i className=\"bi bi-send\"></i>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatTextBox;"]},"metadata":{},"sourceType":"module"}