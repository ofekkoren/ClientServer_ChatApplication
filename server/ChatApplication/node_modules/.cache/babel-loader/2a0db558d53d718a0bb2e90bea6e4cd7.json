{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\signUp\\\\SignUp.js\",\n    _s = $RefreshSig$();\n\nimport '../logIn/LogIn.css';\nimport './SignUp.css';\nimport users from '../db/UsersDataBase';\nimport { convertToBase64Image } from \"../chatScreen/Utils\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport React from \"react\";\nimport { user, setUser } from '../logIn/LogIn';\n/**\r\n * A sign-up form for the chat app.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SignUp() {\n  _s();\n\n  const navigate = useNavigate();\n  /**\r\n   * Setting an invalid class and invalid feedback for element.\r\n   * @param element the element that will have an invalid feedback.\r\n   * @param message the message of the feedback.\r\n   */\n\n  const setValid = (element, message) => {\n    const inputParent = element.parentElement;\n    element.classList.add('is-valid');\n    element.classList.remove('is-invalid');\n    const validationMessgage = inputParent.getElementsByClassName(\"validation-helper\")[0];\n    validationMessgage.classList.add('valid-feedback');\n    validationMessgage.classList.remove('invalid-feedback');\n    validationMessgage.innerText = message;\n  };\n  /**\r\n   * Setting an valid class and valid feedback for element.\r\n   * @param element the element that will have a valid feedback.\r\n   * @param message the message of the feedback.\r\n   */\n\n\n  const setInvalid = (element, message) => {\n    const inputParent = element.parentElement;\n    element.classList.add('is-invalid');\n    element.classList.remove('is-valid');\n    const validationMessgage = inputParent.getElementsByClassName(\"validation-helper\")[0];\n    validationMessgage.classList.add('invalid-feedback');\n    validationMessgage.classList.remove('valid-feedback');\n    validationMessgage.innerText = message;\n  };\n  /**\r\n   * Checking if the given username already exists in the users database.\r\n   * @param checkedUsername.\r\n   * @returns false- if the username already exists. true- if the username is free to use.\r\n   */\n\n\n  const checkUserername = checkedUsername => {\n    for (let user of users) {\n      if (user.username === checkedUsername) return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Checking if the given element represents a path to a png/jpg/jpeg file.\r\n   */\n\n\n  const checkImage = checkedImage => {\n    let imagePath = checkedImage.value;\n    let extensionIndex = imagePath.lastIndexOf(\".\") + 1;\n    let extension = imagePath.substring(extensionIndex, imagePath.length).toLowerCase();\n\n    if (extension == \"jpg\" || extension == \"jpeg\" || extension == \"png\") {\n      return true;\n    } else return false;\n  };\n  /**\r\n   * Checking if the data filled by the user in a form is valid.\r\n   * @returns true if all the data is valid. Else, false is returned.\r\n   */\n\n\n  const checkValid = () => {\n    //getting the elements.\n    const userName = document.getElementById('username');\n    const nickName = document.getElementById('nickname');\n    const picture = document.getElementById('picture');\n    const password = document.getElementById('Password');\n    const passwordRepeat = document.getElementById('validatePassword');\n    console.log(users);\n    let isValid = true; //Checking the username. We want it to be unique and not an empty string.\n\n    if (userName.value.trim() === \"\") {\n      setInvalid(userName, 'Username is required');\n      isValid = false;\n    } else if (!checkUserername(userName.value.trim())) {\n      setInvalid(userName, 'Such username already exists');\n      isValid = false;\n    } else setValid(userName, \"This username is available\"); //Checking the nickname. We don't allow empty string as nickname.\n\n\n    if (nickName.value.trim() === \"\") {\n      setInvalid(nickName, 'Nickname is required');\n      isValid = false;\n    } else setValid(nickName, \"Nice Nickname!\"); //Checking the image uploaded by the user. It must be a jpg/png/jpeg file.\n\n\n    if (picture.value != \"\" && !checkImage(picture)) {\n      setInvalid(picture, 'Input type must be: png, jpg or jpeg. You can also choose too not upload an image');\n      picture.value = \"\";\n      isValid = false;\n    } else setValid(picture, \"\");\n    /*\r\n     * Checking the password chosen by the user. It must be longer than 6 character and contain al least one letter\r\n     * and one number.\r\n     */\n\n\n    if (password.value.length < 6) {\n      setInvalid(password, 'Password must contain at least 6 characters');\n      isValid = false;\n    } else if (password.value.search(/\\d/) == -1) {\n      setInvalid(password, 'Password must contain at least one number');\n      isValid = false;\n    } else if (password.value.search(/[a-zA-Z]/) == -1) {\n      setInvalid(password, 'Password must contain at least one letter');\n      isValid = false;\n    } else setValid(password, \"Good password\");\n\n    if (passwordRepeat.value === \"\") {\n      setInvalid(passwordRepeat, \"You are required to repeat your password\");\n      isValid = false;\n    } else if (passwordRepeat.value !== password.value) {\n      setInvalid(passwordRepeat, \"Password doesn't match\");\n      isValid = false;\n    } else setValid(passwordRepeat, \"\");\n\n    return isValid;\n  };\n  /**\r\n   * Handling the submission of the registration form.\r\n   * @param event the submit event.\r\n   */\n\n\n  const handleSubmit = event => {\n    const regForm = event.currentTarget;\n    event.preventDefault();\n    event.stopPropagation(); //If the information filled by the user is valid he will be added to the user database.\n\n    if (checkValid()) {\n      const newUserName = document.getElementById(\"username\").value.trim();\n      const newNickName = document.getElementById('nickname').value.trim();\n      const newPassword = document.getElementById('Password').value;\n      let newPicture = process.env.PUBLIC_URL + \"/images/userImages/default-image.jpg\";\n      users.push({\n        username: newUserName,\n        nickname: newNickName,\n        password: newPassword,\n        image: newPicture,\n        chats: []\n      }); //If the user chose to upload an image we will change it's image from the deafult user image.\n\n      if (document.getElementById('picture').value != \"\") {\n        var imagePromise = convertToBase64Image(document.getElementById('picture').files[0]);\n        imagePromise.then(function (result) {\n          newPicture = result;\n          users[users.length - 1].image = newPicture;\n        });\n      }\n      /**\r\n      * The function returns the conversations of the current log-in user, according\r\n      * to the username (his id).\r\n      * @param logInUsername is the username of the logged-in user.\r\n      */\n\n\n      function getUsersChats(logInUsername) {\n        for (var i = 0; i < Object.keys(users).length; i++) {\n          if (users[i].username.localeCompare(logInUsername) === 0) {\n            return users[i];\n          }\n        }\n      }\n\n      setUser(getUsersChats(newUserName)); //   user = getUsersChats(newUserName);\n      //Indicating the user about the successful registration\n      // navigate(\"SuccessfulSignUp\");\n\n      navigate(\"::chatScreen\");\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    //The sign-up form.\n    _jsxDEV(\"div\", {\n      className: \"container\",\n      id: \"signContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"text-center sign-up-form needs-validation\",\n        noValidate: true,\n        id: \"signUpForm\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"log-in-header\",\n          children: \"We need more friends, please join us ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-floating mb-3 input-style \",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"userName\",\n            className: \"form-control input-box-size\",\n            id: \"username\",\n            placeholder: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            htmlFor: \"username\",\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"validation-helper\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-floating mb-3 input-style \",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"userName\",\n            className: \"form-control \",\n            id: \"nickname\",\n            placeholder: \"nickname\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            htmlFor: \"nickname\",\n            children: \"nickname\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"validation-helper\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-floating mb-3 input-style \",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".jpg, .jpeg, .png\",\n            name: \"userName\",\n            className: \"form-control \",\n            id: \"picture\",\n            placeholder: \"Profile picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            htmlFor: \"picture\",\n            id: \"userImageInput\",\n            children: \"Profile picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"validation-helper\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-floating mb-3 input-style \",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            name: \"Password\",\n            className: \"form-control \",\n            id: \"Password\",\n            placeholder: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            htmlFor: \"Password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"validation-helper\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-floating mb-3 input-style \",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            name: \"validatePassword\",\n            className: \"form-control \",\n            id: \"validatePassword\",\n            placeholder: \"Repeat password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            htmlFor: \"validatePassword\",\n            children: \"Repeat password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"validation-helper\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-primary btn-lg\",\n            children: \"Sign-in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text\",\n          children: [\"already registered? log in \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            className: \"text\",\n            children: \"here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 48\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(SignUp, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = SignUp;\nexport default SignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/signUp/SignUp.js"],"names":["users","convertToBase64Image","Link","useNavigate","React","user","setUser","SignUp","navigate","setValid","element","message","inputParent","parentElement","classList","add","remove","validationMessgage","getElementsByClassName","innerText","setInvalid","checkUserername","checkedUsername","username","checkImage","checkedImage","imagePath","value","extensionIndex","lastIndexOf","extension","substring","length","toLowerCase","checkValid","userName","document","getElementById","nickName","picture","password","passwordRepeat","console","log","isValid","trim","search","handleSubmit","event","regForm","currentTarget","preventDefault","stopPropagation","newUserName","newNickName","newPassword","newPicture","process","env","PUBLIC_URL","push","nickname","image","chats","imagePromise","files","then","result","getUsersChats","logInUsername","i","Object","keys","localeCompare"],"mappings":"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","sourcesContent":["import '../logIn/LogIn.css';\r\nimport './SignUp.css'\r\nimport users from '../db/UsersDataBase';\r\nimport {convertToBase64Image} from \"../chatScreen/Utils\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { user, setUser } from '../logIn/LogIn';\r\n\r\n/**\r\n * A sign-up form for the chat app.\r\n */\r\nfunction SignUp() {\r\n    const navigate = useNavigate();\r\n\r\n    /**\r\n     * Setting an invalid class and invalid feedback for element.\r\n     * @param element the element that will have an invalid feedback.\r\n     * @param message the message of the feedback.\r\n     */\r\n    const setValid = (element, message) => {\r\n        const inputParent = element.parentElement;\r\n        element.classList.add('is-valid');\r\n        element.classList.remove('is-invalid')\r\n        const validationMessgage = inputParent.getElementsByClassName(\"validation-helper\")[0];\r\n        validationMessgage.classList.add('valid-feedback');\r\n        validationMessgage.classList.remove('invalid-feedback')\r\n        validationMessgage.innerText = message;\r\n    };\r\n\r\n    /**\r\n     * Setting an valid class and valid feedback for element.\r\n     * @param element the element that will have a valid feedback.\r\n     * @param message the message of the feedback.\r\n     */\r\n    const setInvalid = (element, message) => {\r\n        const inputParent = element.parentElement;\r\n        element.classList.add('is-invalid');\r\n        element.classList.remove('is-valid')\r\n        const validationMessgage = inputParent.getElementsByClassName(\"validation-helper\")[0];\r\n        validationMessgage.classList.add('invalid-feedback');\r\n        validationMessgage.classList.remove('valid-feedback')\r\n        validationMessgage.innerText = message;\r\n\r\n    }\r\n\r\n    /**\r\n     * Checking if the given username already exists in the users database.\r\n     * @param checkedUsername.\r\n     * @returns false- if the username already exists. true- if the username is free to use.\r\n     */\r\n    const checkUserername = (checkedUsername) => {\r\n        for (let user of users) {\r\n            if (user.username === checkedUsername)\r\n                return false\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checking if the given element represents a path to a png/jpg/jpeg file.\r\n     */\r\n    const checkImage = (checkedImage) => {\r\n        let imagePath = checkedImage.value;\r\n        let extensionIndex = imagePath.lastIndexOf(\".\") + 1;\r\n        let extension = imagePath.substring(extensionIndex, imagePath.length).toLowerCase();\r\n        if (extension == \"jpg\" || extension == \"jpeg\" || extension == \"png\") {\r\n            return true\r\n        } else\r\n            return false;\r\n    }\r\n\r\n    /**\r\n     * Checking if the data filled by the user in a form is valid.\r\n     * @returns true if all the data is valid. Else, false is returned.\r\n     */\r\n    const checkValid = () => {\r\n        //getting the elements.\r\n        const userName = document.getElementById('username');\r\n        const nickName = document.getElementById('nickname');\r\n        const picture = document.getElementById('picture');\r\n        const password = document.getElementById('Password');\r\n        const passwordRepeat = document.getElementById('validatePassword');\r\n\r\n        console.log(users)\r\n\r\n        let isValid = true;\r\n        //Checking the username. We want it to be unique and not an empty string.\r\n        if (userName.value.trim() === \"\") {\r\n            setInvalid(userName, 'Username is required');\r\n            isValid = false;\r\n        } else if (!checkUserername(userName.value.trim())) {\r\n            setInvalid(userName, 'Such username already exists');\r\n            isValid = false;\r\n        } else\r\n            setValid(userName, \"This username is available\");\r\n\r\n        //Checking the nickname. We don't allow empty string as nickname.\r\n        if (nickName.value.trim() === \"\") {\r\n            setInvalid(nickName, 'Nickname is required');\r\n            isValid = false;\r\n        } else\r\n            setValid(nickName, \"Nice Nickname!\")\r\n\r\n\r\n        //Checking the image uploaded by the user. It must be a jpg/png/jpeg file.\r\n        if (picture.value != \"\" && !checkImage(picture)) {\r\n            setInvalid(picture, 'Input type must be: png, jpg or jpeg. You can also choose too not upload an image');\r\n            picture.value = \"\";\r\n            isValid = false;\r\n        } else\r\n            setValid(picture, \"\");\r\n\r\n        /*\r\n         * Checking the password chosen by the user. It must be longer than 6 character and contain al least one letter\r\n         * and one number.\r\n         */\r\n        if (password.value.length < 6) {\r\n            setInvalid(password, 'Password must contain at least 6 characters');\r\n            isValid = false;\r\n        } else if (password.value.search(/\\d/) == -1) {\r\n            setInvalid(password, 'Password must contain at least one number');\r\n            isValid = false;\r\n        } else if (password.value.search(/[a-zA-Z]/) == -1) {\r\n            setInvalid(password, 'Password must contain at least one letter');\r\n            isValid = false;\r\n        } else\r\n            setValid(password, \"Good password\");\r\n\r\n        if (passwordRepeat.value === \"\") {\r\n            setInvalid(passwordRepeat, \"You are required to repeat your password\");\r\n            isValid = false;\r\n        } else if (passwordRepeat.value !== password.value) {\r\n            setInvalid(passwordRepeat, \"Password doesn't match\");\r\n            isValid = false;\r\n        } else\r\n            setValid(passwordRepeat, \"\");\r\n        return isValid\r\n    }\r\n\r\n    /**\r\n     * Handling the submission of the registration form.\r\n     * @param event the submit event.\r\n     */\r\n    const handleSubmit = (event) => {\r\n        const regForm = event.currentTarget;\r\n        event.preventDefault();\r\n        event.stopPropagation()\r\n        //If the information filled by the user is valid he will be added to the user database.\r\n        if (checkValid()) {\r\n            const newUserName = document.getElementById(\"username\").value.trim();\r\n            const newNickName = document.getElementById('nickname').value.trim();\r\n            const newPassword = document.getElementById('Password').value;\r\n            let newPicture = process.env.PUBLIC_URL + \"/images/userImages/default-image.jpg\";\r\n            users.push(\r\n                {\r\n                    username: newUserName,\r\n                    nickname: newNickName,\r\n                    password: newPassword,\r\n                    image: newPicture,\r\n                    chats: []\r\n                })\r\n            //If the user chose to upload an image we will change it's image from the deafult user image.\r\n            if (document.getElementById('picture').value != \"\") {\r\n                var imagePromise = convertToBase64Image(document.getElementById('picture').files[0]);\r\n                imagePromise.then(function (result) {\r\n                    newPicture = result;\r\n                    users[users.length - 1].image = newPicture;\r\n                });\r\n            }\r\n\r\n                /**\r\n      * The function returns the conversations of the current log-in user, according\r\n     * to the username (his id).\r\n     * @param logInUsername is the username of the logged-in user.\r\n     */\r\n    function getUsersChats(logInUsername) {\r\n        for (var i = 0; i < Object.keys(users).length; i++) {\r\n          if (users[i].username.localeCompare(logInUsername) === 0) {\r\n            return users[i];\r\n          }\r\n        }\r\n      }\r\n  \r\n      setUser(getUsersChats(newUserName));\r\n    //   user = getUsersChats(newUserName);\r\n            //Indicating the user about the successful registration\r\n            // navigate(\"SuccessfulSignUp\");\r\n            navigate(\"::chatScreen\");\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        //The sign-up form.\r\n        <div className=\"container\" id=\"signContainer\">\r\n\r\n            <form className=\"text-center sign-up-form needs-validation\" noValidate id=\"signUpForm\"\r\n                  onSubmit={handleSubmit}>\r\n                <h3 className=\"log-in-header\">We need more friends, please join us ...</h3>\r\n\r\n                <div className=\"form-floating mb-3 input-style \">\r\n                    <input type=\"text\" name='userName' className=\"form-control input-box-size\" id=\"username\"\r\n                           placeholder=\"Username\"></input>\r\n                    <label className=\"form-label\" htmlFor=\"username\">Username</label>\r\n                    <span className=\"validation-helper\"></span>\r\n                </div>\r\n\r\n                <div className=\"form-floating mb-3 input-style \">\r\n                    <input type=\"text\" name='userName' className=\"form-control \" id=\"nickname\"\r\n                           placeholder=\"nickname\"></input>\r\n                    <label className=\"form-label\" htmlFor=\"nickname\">nickname</label>\r\n                    <span className=\"validation-helper\"></span>\r\n                </div>\r\n\r\n                <div className=\"form-floating mb-3 input-style \">\r\n                    <input type=\"file\" accept=\".jpg, .jpeg, .png\" name='userName' className=\"form-control \" id=\"picture\"\r\n                           placeholder=\"Profile picture\"></input>\r\n                    <label className=\"form-label\" htmlFor=\"picture\" id=\"userImageInput\">Profile picture</label>\r\n                    <span className=\"validation-helper\"></span>\r\n                </div>\r\n\r\n                <div className=\"form-floating mb-3 input-style \">\r\n                    <input type=\"password\" name='Password' className=\"form-control \" id=\"Password\"\r\n                           placeholder=\"Password\"></input>\r\n                    <label className=\"form-label\" htmlFor=\"Password\">Password</label>\r\n                    <span className=\"validation-helper\"></span>\r\n                </div>\r\n\r\n                <div className=\"form-floating mb-3 input-style \">\r\n                    <input type=\"password\" name='validatePassword' className=\"form-control \" id=\"validatePassword\"\r\n                           placeholder=\"Repeat password\"></input>\r\n                    <label className=\"form-label\" htmlFor=\"validatePassword\">Repeat password</label>\r\n                    <span className=\"validation-helper\"></span>\r\n                </div>\r\n\r\n\r\n                <div className=\"mb-3\">\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-lg\">Sign-in</button>\r\n                </div>\r\n\r\n                <div className=\"text\">\r\n                    already registered? log in <Link to='/' className=\"text\">here</Link>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n        ;\r\n}\r\n\r\nexport default SignUp;\r\n"]},"metadata":{},"sourceType":"module"}