{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\chatScreen\\\\ChatScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport './ChatScreen.css';\nimport { useState, useRef } from \"react\";\nimport LeftScreen from './LeftScreen';\nimport RightScreen from \"./RightScreen\";\nimport users from \"../db/UsersDataBase\";\nimport { isUserLoggedIn } from '../logIn/LogIn';\nimport { useLocation } from \"react-router-dom\";\nimport { user } from '../logIn/LogIn';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatScreen() {\n  _s();\n\n  // location.state.name\n  const location = useLocation(); // console.log(location.state.user);\n\n  let [currentConversation, setCurrentConversation] = useState(\"\");\n  let conversationDBRef = useRef(\"\"); //Reference to the original location of the conversation in the DB.\n\n  let [currentListOfChats, setCurrentListOfChats] = useState(props.user.chats);\n\n  function updateListOfConversations(setConversations, currentListOfChats) {\n    // console.log(currentListOfChats)\n    var getInfo = {\n      setConversations: setConversations,\n      currentListOfChats: currentListOfChats\n    }; // console.log(getInfo)\n    // currentListOfChats.pop();\n    // currentListOfChats.unshift(currentConversation);\n    // let chatsArr = [...currentListOfChats, currentConversation];\n    // setConversations(chatsArr);\n\n    return getInfo;\n  }\n\n  useEffect(() => {\n    //Applying the function only if a chat was chosen by the user.\n    if (currentConversation !== \"\") {\n      //If a new message was sent in the current chat we add this message to the corresponding array in our DB.\n      if (currentConversation.messages.length !== conversationDBRef.current.messages.length) {\n        conversationDBRef.current.messages.push(currentConversation.messages[currentConversation.messages.length - 1]);\n      } //Scrolling down to the last message when sending a new message or selecting an other chat.\n\n\n      let bottom = document.getElementById(\"lastMessage\");\n      bottom.scrollIntoView({\n        block: \"end\"\n      }); // if(updateListOfConversations().setConversations !== undefined && updateListOfConversations().currentListOfChats !== undefined) {\n      //     // console.log(updateListOfConversations());\n      // }\n      // let chatsArr = [...updateListOfConversations().currentListOfChats, currentConversation];\n      // updateListOfConversations.setConversations(chatsArr);\n    }\n  }, [currentConversation]); // props.username = users[0]; // TODO Used for debug,will be deleted in the future\n\n  if (isUserLoggedIn === 0) {\n    alert(\"bad!\");\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-chat-screen justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner-chat-cube\",\n        children: [/*#__PURE__*/_jsxDEV(LeftScreen, {\n          currentConversation: currentConversation,\n          user: user,\n          setChat: setCurrentConversation,\n          refer: conversationDBRef,\n          currentListOfChats: currentListOfChats,\n          setCurrentListOfChats: setCurrentListOfChats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RightScreen, {\n          chat: currentConversation,\n          setChat: setCurrentConversation,\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ChatScreen, \"28kepmQKrgd6rE5bpBj1ptuGQXU=\", false, function () {\n  return [useLocation];\n});\n\n_c = ChatScreen;\nexport default ChatScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/chatScreen/ChatScreen.js"],"names":["React","useEffect","useState","useRef","LeftScreen","RightScreen","users","isUserLoggedIn","useLocation","user","ChatScreen","location","currentConversation","setCurrentConversation","conversationDBRef","currentListOfChats","setCurrentListOfChats","props","chats","updateListOfConversations","setConversations","getInfo","messages","length","current","push","bottom","document","getElementById","scrollIntoView","block","alert"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kBAAP;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,IAAT,QAAqB,gBAArB;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AAClB;AACA,QAAMC,QAAQ,GAAGH,WAAW,EAA5B,CAFkB,CAGlB;;AAEA,MAAI,CAACI,mBAAD,EAAsBC,sBAAtB,IAAgDX,QAAQ,CAAC,EAAD,CAA5D;AACA,MAAIY,iBAAiB,GAAGX,MAAM,CAAC,EAAD,CAA9B,CANkB,CAMkB;;AACpC,MAAI,CAACY,kBAAD,EAAqBC,qBAArB,IAA8Cd,QAAQ,CAACe,KAAK,CAACR,IAAN,CAAWS,KAAZ,CAA1D;;AAEA,WAASC,yBAAT,CAAmCC,gBAAnC,EAAqDL,kBAArD,EAAyE;AACrE;AACA,QAAIM,OAAO,GAAG;AAACD,MAAAA,gBAAgB,EAACA,gBAAlB;AAAoCL,MAAAA,kBAAkB,EAACA;AAAvD,KAAd,CAFqE,CAGrE;AACA;AACA;AACA;AACA;;AACA,WAAOM,OAAP;AAEH;;AAEDpB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAIW,mBAAmB,KAAK,EAA5B,EAAgC;AAC5B;AACA,UAAIA,mBAAmB,CAACU,QAApB,CAA6BC,MAA7B,KAAwCT,iBAAiB,CAACU,OAAlB,CAA0BF,QAA1B,CAAmCC,MAA/E,EAAuF;AACnFT,QAAAA,iBAAiB,CAACU,OAAlB,CAA0BF,QAA1B,CAAmCG,IAAnC,CAAwCb,mBAAmB,CAACU,QAApB,CAA6BV,mBAAmB,CAACU,QAApB,CAA6BC,MAA7B,GAAsC,CAAnE,CAAxC;AACH,OAJ2B,CAK5B;;;AACA,UAAIG,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAb;AACAF,MAAAA,MAAM,CAACG,cAAP,CAAsB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAtB,EAP4B,CAS5B;AACA;AACA;AACA;AACA;AAEH;AACJ,GAlBQ,EAkBN,CAAClB,mBAAD,CAlBM,CAAT,CArBkB,CAyClB;;AAEA,MAAIL,cAAc,KAAK,CAAvB,EAA0B;AACtBwB,IAAAA,KAAK,CAAC,MAAD,CAAL;AACH,GAFD,MAIK;AACD,wBACI;AAAK,MAAA,SAAS,EAAC,8CAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCAEI,QAAC,UAAD;AAAY,UAAA,mBAAmB,EAAEnB,mBAAjC;AAAsD,UAAA,IAAI,EAAEH,IAA5D;AAAkE,UAAA,OAAO,EAAEI,sBAA3E;AAAmG,UAAA,KAAK,EAAEC,iBAA1G;AAA6H,UAAA,kBAAkB,EAAEC,kBAAjJ;AAAqK,UAAA,qBAAqB,EAAEC;AAA5L;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAII,QAAC,WAAD;AAAa,UAAA,IAAI,EAAEJ,mBAAnB;AAAwC,UAAA,OAAO,EAAEC,sBAAjD;AAAyE,UAAA,IAAI,EAAEJ;AAA/E;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;AACJ;;GA3DQC,U;UAEYF,W;;;KAFZE,U;AA6DT,eAAeA,UAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport './ChatScreen.css';\r\nimport { useState, useRef } from \"react\";\r\nimport LeftScreen from './LeftScreen';\r\nimport RightScreen from \"./RightScreen\";\r\nimport users from \"../db/UsersDataBase\";\r\nimport { isUserLoggedIn } from '../logIn/LogIn';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { user } from '../logIn/LogIn';\r\n\r\nfunction ChatScreen() {\r\n    // location.state.name\r\n    const location = useLocation();\r\n    // console.log(location.state.user);\r\n\r\n    let [currentConversation, setCurrentConversation] = useState(\"\");\r\n    let conversationDBRef = useRef(\"\"); //Reference to the original location of the conversation in the DB.\r\n    let [currentListOfChats, setCurrentListOfChats] = useState(props.user.chats);\r\n\r\n    function updateListOfConversations(setConversations, currentListOfChats) {\r\n        // console.log(currentListOfChats)\r\n        var getInfo = {setConversations:setConversations, currentListOfChats:currentListOfChats}\r\n        // console.log(getInfo)\r\n        // currentListOfChats.pop();\r\n        // currentListOfChats.unshift(currentConversation);\r\n        // let chatsArr = [...currentListOfChats, currentConversation];\r\n        // setConversations(chatsArr);\r\n        return getInfo;\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        //Applying the function only if a chat was chosen by the user.\r\n        if (currentConversation !== \"\") {\r\n            //If a new message was sent in the current chat we add this message to the corresponding array in our DB.\r\n            if (currentConversation.messages.length !== conversationDBRef.current.messages.length) {\r\n                conversationDBRef.current.messages.push(currentConversation.messages[currentConversation.messages.length - 1])\r\n            }\r\n            //Scrolling down to the last message when sending a new message or selecting an other chat.\r\n            let bottom = document.getElementById(\"lastMessage\");\r\n            bottom.scrollIntoView({ block: \"end\" });\r\n            \r\n            // if(updateListOfConversations().setConversations !== undefined && updateListOfConversations().currentListOfChats !== undefined) {\r\n            //     // console.log(updateListOfConversations());\r\n            // }\r\n            // let chatsArr = [...updateListOfConversations().currentListOfChats, currentConversation];\r\n            // updateListOfConversations.setConversations(chatsArr);\r\n\r\n        }\r\n    }, [currentConversation])\r\n\r\n    // props.username = users[0]; // TODO Used for debug,will be deleted in the future\r\n\r\n    if (isUserLoggedIn === 0) {\r\n        alert(\"bad!\")\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <div className=\"container-chat-screen justify-content-center\">\r\n                <div className=\"inner-chat-cube\">\r\n                    {/* <LeftScreen logInUsername=\"Ofek Koren\"/> */}\r\n                    <LeftScreen currentConversation={currentConversation} user={user} setChat={setCurrentConversation} refer={conversationDBRef} currentListOfChats={currentListOfChats} setCurrentListOfChats={setCurrentListOfChats} />\r\n                    {/* <LeftScreen currentConversation={currentConversation} user={user} setChat={setCurrentConversation} refer={conversationDBRef} updateListOfConversations={updateListOfConversations} /> */}\r\n                    <RightScreen chat={currentConversation} setChat={setCurrentConversation} user={user} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatScreen;"]},"metadata":{},"sourceType":"module"}