{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\chatScreen\\\\rightScreen\\\\AudioRecorderModal.js\";\nimport \"./AudioRecorderModal.css\";\n/**\r\n * A pop-up modal component which lets the user record and send audio messages.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AudioRecorderModal(props) {\n  //If the validator equals true the audio recorded should be sent. Else, the audio should be dismissed.\n  let audioValidator = true; //Will hold the mediaRecorder.\n\n  var recorder = null;\n  /**\r\n   * Handles clicking on the record audio and send audio button.\r\n   */\n\n  const handleSendAudioRecord = () => {\n    let controlButton = document.getElementById(\"audioRecord\"); //Start the recording when clicking the record button\n\n    if (controlButton.innerText === \"Record message\") {\n      controlButton.innerText = \"Send record\";\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        /*\r\n         * After getting permission to use the audio of the user we create a new recorder and setting its stop\r\n         * and dataAvailable listeners.\r\n         */\n        recorder = new MediaRecorder(stream);\n        recorder.start();\n        let audioData = [];\n\n        recorder.ondataavailable = event => {\n          audioData.push(event.data);\n        };\n\n        recorder.onstop = event => {\n          //Creating url object for the audio from the audio data that was stored in the audioData array.\n          let blob = new Blob(audioData); //Stopping all recording\n\n          recorder.stream.getAudioTracks().forEach(track => track.stop());\n          let audioObject = URL.createObjectURL(blob);\n          sendAudioHelper(audioObject);\n        };\n      });\n    } //At the next click on the button the audio will be sent\n    else {\n      //Closing the record audio modal.\n      document.getElementById(\"dismissAfterAudioSent\").click();\n      /*\r\n       * When clicking on record and then send too quick the recorder might be created too late. In this case\r\n       * a timeout of 1 second is set to create the recorder. After checking that the recorder was created\r\n       * we can stop it safely.\r\n       */\n\n      if (recorder === null) setTimeout(() => {\n        recorder.stop();\n      }, 1000);else if (recorder instanceof MediaRecorder) recorder.stop(); //Setting back the button to enable further recording.\n\n      controlButton.innerText = \"Record message\";\n    }\n  };\n  /**\r\n   * Sending an audio message is the validator value is true.\r\n   * @param audioRecord\r\n   */\n\n\n  const sendAudioHelper = audioRecord => {\n    if (audioValidator === true) {\n      let messageInfo = {\n        type: \"audio\",\n        content: audioRecord,\n        createdAt: new Date().toISOString(),\n        sender: props.sendingUser.username\n      }; //Appending the message to the end of the messages array.\n\n      let messagesArr = [...props.chat.messages, messageInfo];\n      props.setChat({\n        users: props.chat.users,\n        messages: messagesArr\n      }); //Setting back the button to enable further recording.\n\n      document.getElementById(\"audioRecord\").innerText = \"Record message\";\n    } // Else, The audio won't be sent and the validator will return to its default value for further recordings.\n    else audioValidator = true;\n\n    recorder = null;\n  };\n  /**\r\n   * Handles clicking on the dismissMessage (red button) on the recording audio modal.\r\n   */\n\n\n  const handleDismissAudio = () => {\n    /*\r\n     * If we didn't start recording and just clicked at the close button nothing will happen and the record modal\r\n     * will be closed. If we did start recording, the validator will be set to false so that the record\r\n     * won't be sent. Then we set back the button to enable further recording and stop the current recording.\r\n     */\n    if (recorder !== null) {\n      audioValidator = false;\n      document.getElementById(\"audioRecord\").innerText = \"Record message\";\n      recorder.stop();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal fade\",\n    id: \"recordModal\",\n    \"data-bs-backdrop\": \"static\",\n    \"data-bs-keyboard\": \"false\",\n    tabIndex: \"-1\",\n    \"aria-labelledby\": \"staticBackdropLabel\",\n    \"aria-hidden\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-dialog record-modal-dialog\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-header record-modal\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"modal-title\",\n            id: \"staticBackdropLabel\",\n            children: \"Audio message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-footer record-modal\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-danger\",\n            id: \"dismissMessage\",\n            \"data-bs-dismiss\": \"modal\",\n            onClick: handleDismissAudio,\n            children: \"Dismiss message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              display: \"none\"\n            },\n            type: \"button\",\n            className: \"btn btn-danger\",\n            \"data-bs-dismiss\": \"modal\",\n            id: \"dismissAfterAudioSent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary\",\n            id: \"audioRecord\",\n            onClick: handleSendAudioRecord,\n            children: \"Record message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_c = AudioRecorderModal;\nexport default AudioRecorderModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioRecorderModal\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/chatScreen/rightScreen/AudioRecorderModal.js"],"names":["AudioRecorderModal","props","audioValidator","recorder","handleSendAudioRecord","controlButton","document","getElementById","innerText","navigator","mediaDevices","getUserMedia","audio","then","stream","MediaRecorder","start","audioData","ondataavailable","event","push","data","onstop","blob","Blob","getAudioTracks","forEach","track","stop","audioObject","URL","createObjectURL","sendAudioHelper","click","setTimeout","audioRecord","messageInfo","type","content","createdAt","Date","toISOString","sender","sendingUser","username","messagesArr","chat","messages","setChat","users","handleDismissAudio","display"],"mappings":"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","sourcesContent":["import \"./AudioRecorderModal.css\";\r\n\r\n/**\r\n * A pop-up modal component which lets the user record and send audio messages.\r\n */\r\nfunction AudioRecorderModal(props) {\r\n\r\n    //If the validator equals true the audio recorded should be sent. Else, the audio should be dismissed.\r\n    let audioValidator = true;\r\n    //Will hold the mediaRecorder.\r\n    var recorder = null\r\n\r\n    /**\r\n     * Handles clicking on the record audio and send audio button.\r\n     */\r\n    const handleSendAudioRecord = () => {\r\n        let controlButton = document.getElementById(\"audioRecord\");\r\n        //Start the recording when clicking the record button\r\n        if (controlButton.innerText === \"Record message\") {\r\n            controlButton.innerText = \"Send record\";\r\n            navigator.mediaDevices.getUserMedia({audio: true}).then(stream => {\r\n\r\n                /*\r\n                 * After getting permission to use the audio of the user we create a new recorder and setting its stop\r\n                 * and dataAvailable listeners.\r\n                 */\r\n                recorder = new MediaRecorder(stream);\r\n                recorder.start();\r\n                let audioData = [];\r\n                recorder.ondataavailable = event => {\r\n                    audioData.push(event.data);\r\n                }\r\n                recorder.onstop = event => {\r\n                    //Creating url object for the audio from the audio data that was stored in the audioData array.\r\n                    let blob = new Blob(audioData);\r\n                    //Stopping all recording\r\n                    recorder.stream.getAudioTracks().forEach(track => track.stop());\r\n                    let audioObject = URL.createObjectURL(blob);\r\n                    sendAudioHelper(audioObject);\r\n                }\r\n            })\r\n        }\r\n        //At the next click on the button the audio will be sent\r\n        else {\r\n            //Closing the record audio modal.\r\n            document.getElementById(\"dismissAfterAudioSent\").click();\r\n\r\n            /*\r\n             * When clicking on record and then send too quick the recorder might be created too late. In this case\r\n             * a timeout of 1 second is set to create the recorder. After checking that the recorder was created\r\n             * we can stop it safely.\r\n             */\r\n            if (recorder === null)\r\n                setTimeout(() => {\r\n                    recorder.stop()\r\n                }, 1000);\r\n            else if (recorder instanceof MediaRecorder)\r\n                recorder.stop()\r\n            //Setting back the button to enable further recording.\r\n            controlButton.innerText = \"Record message\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sending an audio message is the validator value is true.\r\n     * @param audioRecord\r\n     */\r\n    const sendAudioHelper = (audioRecord) => {\r\n        if (audioValidator === true) {\r\n            let messageInfo = {\r\n                type: \"audio\",\r\n                content: audioRecord,\r\n                createdAt: new Date().toISOString(),\r\n                sender: props.sendingUser.username\r\n            }\r\n            //Appending the message to the end of the messages array.\r\n            let messagesArr = [...props.chat.messages, messageInfo]\r\n            props.setChat({users: props.chat.users, messages: messagesArr})\r\n            //Setting back the button to enable further recording.\r\n            document.getElementById(\"audioRecord\").innerText = \"Record message\";\r\n        }\r\n        // Else, The audio won't be sent and the validator will return to its default value for further recordings.\r\n        else\r\n            audioValidator = true;\r\n        recorder = null;\r\n    }\r\n\r\n    /**\r\n     * Handles clicking on the dismissMessage (red button) on the recording audio modal.\r\n     */\r\n    const handleDismissAudio = () => {\r\n        /*\r\n         * If we didn't start recording and just clicked at the close button nothing will happen and the record modal\r\n         * will be closed. If we did start recording, the validator will be set to false so that the record\r\n         * won't be sent. Then we set back the button to enable further recording and stop the current recording.\r\n         */\r\n        if (recorder !== null) {\r\n            audioValidator = false;\r\n            document.getElementById(\"audioRecord\").innerText = \"Record message\";\r\n            recorder.stop()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal fade\" id=\"recordModal\" data-bs-backdrop=\"static\"\r\n             data-bs-keyboard=\"false\" tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\"\r\n             aria-hidden=\"true\">\r\n            <div className=\"modal-dialog record-modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header record-modal\">\r\n                        <h5 className=\"modal-title\" id=\"staticBackdropLabel\">Audio message</h5>\r\n                    </div>\r\n                    <div className=\"modal-footer record-modal\">\r\n                        {/*Close the modal/dismiss recording button*/}\r\n                        <button type=\"button\" className=\"btn btn-danger\" id=\"dismissMessage\"\r\n                                data-bs-dismiss=\"modal\" onClick={handleDismissAudio}>Dismiss message\r\n                        </button>\r\n\r\n                        {/*Button to close the modal if we send a message, not visible to the user*/}\r\n                        <button style={{display: \"none\"}} type=\"button\" className=\"btn btn-danger\"\r\n                                data-bs-dismiss=\"modal\" id=\"dismissAfterAudioSent\">\r\n                        </button>\r\n\r\n                        {/*start recording/send recording button*/}\r\n                        <button type=\"button\" className=\"btn btn-primary\" id=\"audioRecord\"\r\n                                onClick={handleSendAudioRecord}>Record message\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default AudioRecorderModal;"]},"metadata":{},"sourceType":"module"}