{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\chatScreen\\\\LeftScreen.js\";\nimport React, { useEffect } from 'react';\nimport './ChatScreen.css';\nimport './LeftScreen.css';\nimport './leftChatItem/LeftChatItem.css';\nimport users from '../db/UsersDataBase';\nimport LeftChatItem from './leftChatItem/LeftChatItem';\nimport conversations from '../db/Conversations';\nimport { useState, useRef } from \"react\";\nimport ChooseNewChat from './ChooseNewChat';\nimport { getFormattedDateString } from \"./Utils\";\n/**\r\n * The left side of the chat which holds the list of chats the user is having.\r\n * @param props include the information of the user currently logged-in, the current chosen\r\n * conversation, the list of conversations the user is having and a setter to this list.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LeftScreen(props) {\n  // Chats holds all the conversations of the current log-in user.\n  var chats = props.user.chats; // Keeping the current log-in user's profile image.\n\n  var logInUserImage = props.user.image;\n  var relevantInfo = [];\n  /*\r\n   * For each conversation the current log-in user is having, we create the information\r\n   * needed to be presented on the left side bar, including the contact's name, his profile picture,\r\n   * the last message has been sent in the conversation and the time it was delivered.\r\n  */\n\n  for (var i = 0; i < Object.keys(chats).length; i++) {\n    var usernameInChat = \"\";\n    var nicknameInChat = \"\";\n    var lastMessage = \"\";\n    var message = \"\";\n    var image;\n    var type = \"\"; // If the username in the conversation information is our log-in username, the other username is the\n    // contact's username.\n\n    if (chats[i].users[0].username.localeCompare(props.user.username) == 0) {\n      usernameInChat = chats[i].users[1].username;\n      nicknameInChat = chats[i].users[1].nickname;\n      image = chats[i].users[1].image;\n    } else {\n      usernameInChat = chats[i].users[0].username;\n      nicknameInChat = chats[i].users[0].nickname;\n      image = chats[i].users[0].image;\n    }\n\n    if (chats[i].messages.length) {\n      lastMessage = chats[i].messages[chats[i].messages.length - 1].content;\n      type = chats[i].messages[chats[i].messages.length - 1].type;\n      message = chats[i].messages[chats[i].messages.length - 1];\n    }\n\n    relevantInfo.push({\n      nicknameInChat: nicknameInChat,\n      usernameInChat: usernameInChat,\n      type: type,\n      lastMessage: lastMessage,\n      time: getFormattedDateString(message),\n      image: image\n    });\n  }\n\n  var conversationsList; // if (Object.keys(chats).length !== 0) {\n\n  conversationsList = props.currentListOfChats.map((conversation, index) => {\n    return /*#__PURE__*/_jsxDEV(LeftChatItem, {\n      conversation: relevantInfo[index],\n      chat: chats[index],\n      refer: props.refer,\n      setChat: props.setChat\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 16\n    }, this);\n  }); // console.log(conversationsList)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-4 leftScreen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"topLine\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logInUserImage,\n        className: \"float-start top-left-profile-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"top-left-username\",\n        children: props.user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bi bi-person-plus-fill add-conversation ms-3\",\n        \"data-bs-toggle\": \"modal\",\n        \"data-bs-target\": \"#add-new-contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      id: \"left-chats-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-col\",\n        id: \"present-left-chat-items\",\n        children: conversationsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChooseNewChat, {\n      logInUsername: props.user.username,\n      conversationsList: conversationsList,\n      currentListOfChats: props.currentListOfChats,\n      setCurrentListOfChats: props.setCurrentListOfChats,\n      user: props.user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_c = LeftScreen;\nexport default LeftScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeftScreen\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/chatScreen/LeftScreen.js"],"names":["React","useEffect","users","LeftChatItem","conversations","useState","useRef","ChooseNewChat","getFormattedDateString","LeftScreen","props","chats","user","logInUserImage","image","relevantInfo","i","Object","keys","length","usernameInChat","nicknameInChat","lastMessage","message","type","username","localeCompare","nickname","messages","content","push","time","conversationsList","currentListOfChats","map","conversation","index","refer","setChat","setCurrentListOfChats"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport './ChatScreen.css';\r\nimport './LeftScreen.css';\r\nimport './leftChatItem/LeftChatItem.css';\r\nimport users from '../db/UsersDataBase';\r\nimport LeftChatItem from './leftChatItem/LeftChatItem';\r\nimport conversations from '../db/Conversations';\r\nimport { useState, useRef } from \"react\";\r\nimport ChooseNewChat from './ChooseNewChat';\r\nimport { getFormattedDateString } from \"./Utils\";\r\n\r\n\r\n/**\r\n * The left side of the chat which holds the list of chats the user is having.\r\n * @param props include the information of the user currently logged-in, the current chosen\r\n * conversation, the list of conversations the user is having and a setter to this list.\r\n */\r\nfunction LeftScreen(props) {\r\n    // Chats holds all the conversations of the current log-in user.\r\n    var chats = props.user.chats;\r\n    // Keeping the current log-in user's profile image.\r\n    var logInUserImage = props.user.image;\r\n\r\n\r\n    var relevantInfo = [];\r\n\r\n    /*\r\n     * For each conversation the current log-in user is having, we create the information\r\n     * needed to be presented on the left side bar, including the contact's name, his profile picture,\r\n     * the last message has been sent in the conversation and the time it was delivered.\r\n    */\r\n    for (var i = 0; i < Object.keys(chats).length; i++) {\r\n        var usernameInChat = \"\";\r\n        var nicknameInChat = \"\"\r\n        var lastMessage = \"\";\r\n        var message = \"\";\r\n        var image;\r\n        var type = \"\";\r\n\r\n        // If the username in the conversation information is our log-in username, the other username is the\r\n        // contact's username.\r\n        if (chats[i].users[0].username.localeCompare(props.user.username) == 0) {\r\n            usernameInChat = chats[i].users[1].username;\r\n            nicknameInChat = chats[i].users[1].nickname;\r\n            image = chats[i].users[1].image;\r\n        } else {\r\n            usernameInChat = chats[i].users[0].username;\r\n            nicknameInChat = chats[i].users[0].nickname;\r\n            image = chats[i].users[0].image;\r\n        }\r\n\r\n        \r\n        if ((chats[i].messages.length)) {\r\n            lastMessage = chats[i].messages[chats[i].messages.length - 1].content;\r\n            type = chats[i].messages[chats[i].messages.length - 1].type;\r\n            message = chats[i].messages[chats[i].messages.length - 1];\r\n        }\r\n        relevantInfo.push({ nicknameInChat: nicknameInChat, usernameInChat: usernameInChat, type: type, lastMessage: lastMessage, time: getFormattedDateString(message), image: image });\r\n    }\r\n\r\n\r\n    var conversationsList;\r\n    // if (Object.keys(chats).length !== 0) {\r\n    conversationsList = props.currentListOfChats.map((conversation, index) => {\r\n        return <LeftChatItem conversation={relevantInfo[index]} key={index} chat={chats[index]} refer={props.refer} setChat={props.setChat} />\r\n    });\r\n\r\n    // console.log(conversationsList)\r\n    return (\r\n        <div className=\"col-4 leftScreen\">\r\n            <div className=\"topLine\">\r\n                <img src={logInUserImage} className=\"float-start top-left-profile-image\"></img>\r\n                {/* <img src={logInUserImage} className=\"top-profile-image\"></img> */}\r\n                <h5 className='top-left-username'>{props.user.username}</h5>\r\n                <button className=\"bi bi-person-plus-fill add-conversation ms-3\" data-bs-toggle=\"modal\" data-bs-target=\"#add-new-contact\"></button>\r\n\r\n            </div>\r\n\r\n            {/* <div className=\"topLine\">\r\n                <img src={process.env.PUBLIC_URL + props.chatWith.image}\r\n                     className=\" top-profile-image\"></img>\r\n                <h5>{props.chatWith.nickname}</h5>\r\n            </div> */}\r\n\r\n\r\n            <div className=\"container\" id=\"left-chats-container\">\r\n                <div className=\"center-col\" id=\"present-left-chat-items\">\r\n                    {conversationsList}\r\n                </div>\r\n            </div>\r\n\r\n            <ChooseNewChat logInUsername={props.user.username} conversationsList={conversationsList} currentListOfChats={props.currentListOfChats} setCurrentListOfChats={props.setCurrentListOfChats} user={props.user} />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeftScreen;"]},"metadata":{},"sourceType":"module"}