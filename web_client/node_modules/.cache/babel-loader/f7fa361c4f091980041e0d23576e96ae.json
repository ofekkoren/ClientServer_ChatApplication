{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\chatScreen\\\\LeftScreen.js\",\n    _s = $RefreshSig$();\n\nimport './ChatScreen.css';\nimport './LeftScreen.css';\nimport './leftChatItem/LeftChatItem.css';\nimport users from '../db/UsersDataBase';\nimport LeftChatItem from './leftChatItem/LeftChatItem';\nimport conversations from '../db/Conversations';\nimport { useState, useRef } from \"react\";\nimport ChooseNewChat from './ChooseNewChat';\nimport { getFormattedDateString } from \"./Utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LeftScreen(props) {\n  _s();\n\n  // console.log(props.user.chats)\n  let [currentListOfChats, setcurrentListOfChats] = useState(props.user.chats);\n  var logInUserImage;\n  /*\r\n   * The function returns the conversations of the current log-in user, according\r\n   * to the username (his id). \r\n  */\n  //TODO - take the function to chatScreen\n\n  function getUsersChats(logInUsername) {\n    for (var i = 0; i < Object.keys(users).length; i++) {\n      if (users[i].username.localeCompare(logInUsername) === 0) {\n        return users[i];\n      }\n    }\n  } // Chats holds all the conversations of the current log-in user.\n  //TODO\n  // var chats = getUsersChats(props.user.logInUsername).chats;\n\n\n  var chats = props.user.chats;\n  console. // Keeping the current log-in user's profile image.\n  //TODO\n  //logInUserImage = getUsersChats(props.user.logInUsername).image;\n  logInUserImage = props.user.image;\n  var relevantInfo = [];\n  var usernameInChat = \"\";\n  var nicknameInChat = \"\";\n  var lastMessage = \"\";\n  var message = \"\";\n  var image;\n  var type = \"\";\n  /*\r\n   * For each conversation the current log-in user is having, we create the information\r\n   * needed to be presented on the left side bar, including the contact's name, his profile picture,\r\n   * the last message has been sent in the conversation and the time it was delivered.\r\n  */\n\n  for (var i = 0; i < Object.keys(chats).length; i++) {\n    // If the username in the conversation information is our log-in username, the other username is the\n    // contact's username.\n    if (chats[i].users[0].username.localeCompare(props.user.username) == 0) {\n      usernameInChat = chats[i].users[1].username;\n      nicknameInChat = chats[i].users[1].nickname;\n      image = chats[i].users[1].image;\n    } else {\n      usernameInChat = chats[i].users[0].username;\n      nicknameInChat = chats[i].users[0].nickname;\n      image = chats[i].users[0].image;\n    }\n\n    lastMessage = chats[i].messages[chats[i].messages.length - 1].content;\n    type = chats[i].messages[chats[i].messages.length - 1].type;\n    message = chats[i].messages[chats[i].messages.length - 1];\n    relevantInfo.push({\n      nicknameInChat: nicknameInChat,\n      usernameInChat: usernameInChat,\n      type: type,\n      lastMessage: lastMessage,\n      time: getFormattedDateString(message),\n      image: image\n    });\n  }\n\n  var conversationsList; // console.log(!Object.keys(chats).length === 0)\n  // if (Object.keys(chats).length !== 0) {\n\n  conversationsList = currentListOfChats.map((conversation, index) => {\n    console.log(relevantInfo[index]);\n    return /*#__PURE__*/_jsxDEV(LeftChatItem, {\n      conversation: relevantInfo[index],\n      chat: chats[index],\n      setChat: props.setChat\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 20\n    }, this);\n  }); // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-4 leftScreen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"topLine\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logInUserImage,\n        className: \"float-start top-left-profile-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"top-left-username\",\n        children: props.user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bi bi-person-plus-fill add-conversation ms-3\",\n        \"data-bs-toggle\": \"modal\",\n        \"data-bs-target\": \"#add-new-contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-col\",\n        id: \"present-left-chat-items\",\n        children: conversationsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChooseNewChat, {\n      logInUsername: props.user.username,\n      conversationsList: conversationsList,\n      currentListOfChats: currentListOfChats,\n      setcurrentListOfChats: setcurrentListOfChats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LeftScreen, \"zpajjRdX4GKjPrp51LEMH0Oj6Mk=\");\n\n_c = LeftScreen;\nexport default LeftScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeftScreen\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/chatScreen/LeftScreen.js"],"names":["users","LeftChatItem","conversations","useState","useRef","ChooseNewChat","getFormattedDateString","LeftScreen","props","currentListOfChats","setcurrentListOfChats","user","chats","logInUserImage","getUsersChats","logInUsername","i","Object","keys","length","username","localeCompare","console","image","relevantInfo","usernameInChat","nicknameInChat","lastMessage","message","type","nickname","messages","content","push","time","conversationsList","map","conversation","index","log","setChat"],"mappings":"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","sourcesContent":["import './ChatScreen.css';\r\nimport './LeftScreen.css';\r\nimport './leftChatItem/LeftChatItem.css';\r\nimport users from '../db/UsersDataBase';\r\nimport LeftChatItem from './leftChatItem/LeftChatItem';\r\nimport conversations from '../db/Conversations';\r\nimport { useState, useRef } from \"react\";\r\nimport ChooseNewChat from './ChooseNewChat';\r\nimport { getFormattedDateString } from \"./Utils\";\r\n\r\n\r\nfunction LeftScreen(props) {\r\n    // console.log(props.user.chats)\r\n    let [currentListOfChats, setcurrentListOfChats] = useState(props.user.chats);\r\n    var logInUserImage;\r\n\r\n    /*\r\n     * The function returns the conversations of the current log-in user, according\r\n     * to the username (his id). \r\n    */\r\n    //TODO - take the function to chatScreen\r\n    function getUsersChats(logInUsername) {\r\n        for (var i = 0; i < Object.keys(users).length; i++) {\r\n            if (users[i].username.localeCompare(logInUsername) === 0) {\r\n                return users[i];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // Chats holds all the conversations of the current log-in user.\r\n    //TODO\r\n    // var chats = getUsersChats(props.user.logInUsername).chats;\r\n    var chats = props.user.chats;\r\n    console.\r\n\r\n    // Keeping the current log-in user's profile image.\r\n    //TODO\r\n    //logInUserImage = getUsersChats(props.user.logInUsername).image;\r\n    logInUserImage = props.user.image;\r\n\r\n\r\n    var relevantInfo = [];\r\n    var usernameInChat = \"\";\r\n    var nicknameInChat = \"\"\r\n    var lastMessage = \"\";\r\n    var message = \"\";\r\n    var image;\r\n    var type = \"\";\r\n\r\n    /*\r\n     * For each conversation the current log-in user is having, we create the information\r\n     * needed to be presented on the left side bar, including the contact's name, his profile picture,\r\n     * the last message has been sent in the conversation and the time it was delivered.\r\n    */\r\n    for (var i = 0; i < Object.keys(chats).length; i++) {\r\n        // If the username in the conversation information is our log-in username, the other username is the\r\n        // contact's username.\r\n        if (chats[i].users[0].username.localeCompare(props.user.username) == 0) {\r\n            usernameInChat = chats[i].users[1].username;\r\n            nicknameInChat = chats[i].users[1].nickname;\r\n            image = chats[i].users[1].image;\r\n        } else {\r\n            usernameInChat = chats[i].users[0].username;\r\n            nicknameInChat = chats[i].users[0].nickname;\r\n            image = chats[i].users[0].image;\r\n        }\r\n        lastMessage = chats[i].messages[chats[i].messages.length - 1].content;\r\n        type = chats[i].messages[chats[i].messages.length - 1].type;\r\n        message = chats[i].messages[chats[i].messages.length - 1];\r\n        relevantInfo.push({ nicknameInChat: nicknameInChat, usernameInChat: usernameInChat, type: type, lastMessage: lastMessage, time: getFormattedDateString(message), image: image });\r\n    }\r\n\r\n    var conversationsList;\r\n    // console.log(!Object.keys(chats).length === 0)\r\n    // if (Object.keys(chats).length !== 0) {\r\n        conversationsList = currentListOfChats.map((conversation, index) => {\r\n            console.log(relevantInfo[index])\r\n            return <LeftChatItem conversation={relevantInfo[index]} key={index} chat={chats[index]} setChat={props.setChat} />\r\n        });\r\n    // }\r\n\r\n    return (\r\n        <div className=\"col-4 leftScreen\">\r\n            <div className=\"topLine\">\r\n                <img src={logInUserImage} className=\"float-start top-left-profile-image\"></img>\r\n                {/* <img src={logInUserImage} className=\"top-profile-image\"></img> */}\r\n                <h5 className='top-left-username'>{props.user.username}</h5>\r\n                <button className=\"bi bi-person-plus-fill add-conversation ms-3\" data-bs-toggle=\"modal\" data-bs-target=\"#add-new-contact\"></button>\r\n\r\n            </div>\r\n\r\n            {/* <div className=\"topLine\">\r\n                <img src={process.env.PUBLIC_URL + props.chatWith.image}\r\n                     className=\" top-profile-image\"></img>\r\n                <h5>{props.chatWith.nickname}</h5>\r\n            </div> */}\r\n\r\n\r\n            <div className=\"container\">\r\n                <div className=\"center-col\" id=\"present-left-chat-items\">\r\n                    {conversationsList}\r\n                </div>\r\n            </div>\r\n\r\n            <ChooseNewChat logInUsername={props.user.username} conversationsList={conversationsList} currentListOfChats={currentListOfChats} setcurrentListOfChats={setcurrentListOfChats} />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeftScreen;"]},"metadata":{},"sourceType":"module"}