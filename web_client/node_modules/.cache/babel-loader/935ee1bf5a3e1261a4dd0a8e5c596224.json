{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ex2\\\\clientSide\\\\src\\\\logIn\\\\LogIn.js\",\n    _s = $RefreshSig$();\n\nimport './LogIn.css';\nimport ChatScreen from '../chatScreen/ChatScreen';\nimport '../signUp/SignUp.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { getUser } from '../chatScreen/Utils'; // Keeps the current user which will be logged-in to the website.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar user = \"\";\nvar currentChatGlobal = \"\";\n/**\r\n * Setter to the logged-in user.\r\n * @param initializedUser is an update user logged in the website.\r\n */\n\nfunction setUser(initializedUser) {\n  user = initializedUser;\n}\n\nexport { user, setUser };\n/**\r\n * The LogIn function is the log-in logic. It gives the user an option to log in to the web by\r\n * entering his name and password, and if the fields are valid it enters him into his\r\n * chats screen.\r\n */\n\nfunction LogIn() {\n  _s();\n\n  const navigate = useNavigate();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    const username = e.target.userName.value;\n    const password = e.target.password.value;\n    var alertPlaceholder = document.getElementById('liveAlertPlaceholder');\n    var alertTrigger = document.getElementById('liveAlertBtn');\n    var wrapper = document.createElement('div');\n    var dataJson; // Checking the user's details in the db.\n\n    var response = await fetch('http://localhost:5170/api/LogIn', {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    });\n    var dataAboutUser = await response.json();\n    /*\r\n     * If the user filled all of the fileds but entered wrong information and clicked on\r\n     * log-in, we present an announcement that the user is not valid.\r\n    */\n\n    if (alertTrigger && dataAboutUser.username === \"invalid\" && dataAboutUser.username === \"invalid\") {\n      var invalidUser = \"Wrong username or password!\";\n      document.getElementById(\"validUser\").innerHTML = invalidUser;\n      return;\n    } // If one of the fiels is empty and the user clicked on the log-in button, write an announcement.\n\n\n    if (alertTrigger && dataAboutUser.username === \"empty\" && dataAboutUser.username === \"empty\") {\n      var invalidUser = \"All fields must be filled!\";\n      document.getElementById(\"validUser\").innerHTML = invalidUser;\n      return;\n    }\n\n    var user = await getUser(username);\n    setUser(user);\n    navigate(\"chatScreen\");\n  }\n\n  /*#__PURE__*/\n  _jsxDEV(\"html\", {\n    children: [/*#__PURE__*/_jsxDEV(\"head\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"text\", {\n          children: [\" Username\", /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"usernameInput\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 1\n  }, this);\n}\n\n_s(LogIn, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = LogIn;\nexport default LogIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogIn\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ex2/clientSide/src/logIn/LogIn.js"],"names":["ChatScreen","React","ReactDOM","Link","useNavigate","useParams","getUser","user","currentChatGlobal","setUser","initializedUser","LogIn","navigate","handleSubmit","e","preventDefault","username","target","userName","value","password","alertPlaceholder","document","getElementById","alertTrigger","wrapper","createElement","dataJson","response","fetch","method","credentials","headers","body","JSON","stringify","dataAboutUser","json","invalidUser","innerHTML"],"mappings":"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","sourcesContent":["import './LogIn.css';\r\nimport ChatScreen from '../chatScreen/ChatScreen';\r\nimport '../signUp/SignUp.css'\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Link, useNavigate, useParams} from \"react-router-dom\";\r\nimport { getUser } from '../chatScreen/Utils';\r\n\r\n\r\n// Keeps the current user which will be logged-in to the website.\r\nvar user = \"\";\r\nvar currentChatGlobal=\"\";\r\n/**\r\n * Setter to the logged-in user.\r\n * @param initializedUser is an update user logged in the website.\r\n */\r\nfunction setUser(initializedUser) {\r\n  user = initializedUser;\r\n}\r\nexport {user, setUser};\r\n\r\n\r\n\r\n/**\r\n * The LogIn function is the log-in logic. It gives the user an option to log in to the web by\r\n * entering his name and password, and if the fields are valid it enters him into his\r\n * chats screen.\r\n */\r\nfunction LogIn() {\r\n\r\n  const navigate = useNavigate();\r\n  \r\n  async function handleSubmit (e) {\r\n    e.preventDefault();\r\n    const username = e.target.userName.value;\r\n    const password = e.target.password.value;\r\n\r\n    var alertPlaceholder = document.getElementById('liveAlertPlaceholder');\r\n    var alertTrigger = document.getElementById('liveAlertBtn');\r\n    var wrapper = document.createElement('div');\r\n\r\n    var dataJson;\r\n\r\n    // Checking the user's details in the db.\r\n    var response = await fetch('http://localhost:5170/api/LogIn',\r\n    {\r\n      method: \"POST\",\r\n      credentials: 'include',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        username: username,\r\n        password: password\r\n      })\r\n    })\r\n    var dataAboutUser = await response.json();\r\n\r\n    /*\r\n     * If the user filled all of the fileds but entered wrong information and clicked on\r\n     * log-in, we present an announcement that the user is not valid.\r\n    */\r\n    if (alertTrigger && dataAboutUser.username === \"invalid\" && dataAboutUser.username === \"invalid\") {\r\n      var invalidUser = \"Wrong username or password!\"\r\n      document.getElementById(\"validUser\").innerHTML = invalidUser;\r\n      return;\r\n    }\r\n    // If one of the fiels is empty and the user clicked on the log-in button, write an announcement.\r\n    if (alertTrigger && dataAboutUser.username === \"empty\" && dataAboutUser.username === \"empty\") {\r\n      var invalidUser = \"All fields must be filled!\"\r\n      document.getElementById(\"validUser\").innerHTML = invalidUser;\r\n      return;\r\n    }\r\n    var user = await getUser(username);\r\n    setUser(user);\r\n    navigate(\"chatScreen\");\r\n  }\r\n  \r\n\r\n<html>\r\n    <head></head>\r\n    <body>\r\n        <div>\r\n            <text> Username\r\n                <input id=\"usernameInput\"> \r\n                </input>\r\n            </text>\r\n        </div>\r\n    </body>\r\n</html>\r\n}\r\nexport default LogIn;"]},"metadata":{},"sourceType":"module"}