{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\chatScreen\\\\AddNewChat.js\";\nimport React from 'react';\nimport conversations from '../db/Conversations';\nimport users from '../db/UsersDataBase';\nimport LeftScreen from './LeftScreen';\nimport LeftChatItem from './leftChatItem/LeftChatItem';\nimport './AddNewChat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddNewChat(props) {\n  var isRegisteredUser = false;\n  console.log(props); // If the user entered his contact's identifier username, do nothing. \n\n  if (props.logInUsername == props.newContact) {\n    return;\n  }\n\n  for (var i = 0; i < Object.keys(props.conversationsList).length; i++) {\n    // If the user already have a conversation with this contact, do nothing.\n    if (props.conversationsList[i].usernameInChat == props.newContact) {\n      return;\n    }\n  }\n\n  var user;\n\n  for (var i = 0; i < Object.keys(users).length; i++) {\n    // If the user already have a conversation with this contact, do nothing.\n    if (props.logInUsername == users[i].username) {\n      user = users[i];\n    }\n  }\n\n  var newConversation;\n\n  for (var i = 0; i < Object.keys(users).length; i++) {\n    // If the user already have a conversation with this contact, do nothing.\n    if (props.newContact == users[i].username) {\n      isRegisteredUser = true; //add its username, nickname, image\n\n      newConversation = {\n        users: [{\n          username: user.username,\n          nickname: user.nickname,\n          image: user.image\n        }, {\n          username: users[i].username,\n          nickname: users[i].nickname,\n          image: users[i].image\n        }],\n        messages: [{\n          type: \"\",\n          content: \"\",\n          createdAt: \"\",\n          sender: \"\"\n        }]\n      };\n    }\n  } //If the user is not registered, do nothing.\n\n\n  if (!isRegisteredUser) {\n    return;\n  } else {\n    return newConversation;\n    var usernameInChat = \"\";\n    var lastMessage = \"\";\n    var time = \"\";\n    var image;\n    var type = \"\"; // conversations.unshift(newConversation);\n    // console.log(conversationsList);\n    // Adding new conversation as a LeftChatItem to relevantInfo map.\n\n    lastMessage = newConversation.messages[Object.keys(newConversation.messages).length - 1].content;\n    type = newConversation.messages[Object.keys(newConversation.messages).length - 1].type;\n    time = newConversation.messages[Object.keys(newConversation.messages).length - 1].createdAt;\n    image = newConversation.users[1].image;\n    var newChat = {\n      usernameInChat: props.newContact,\n      type: type,\n      lastMessage: lastMessage,\n      time: time,\n      image: image\n    }; // return {newChat, newConversation};\n    // let chatsArr = [...props.relevantInfo, newChat]\n    // var conversation = { usernameInChat: newContact, type: type, lastMessage: lastMessage, time: time, image: image }\n    // <LeftChatItem usernameInChat={newContact} type={type} lastMessage={lastMessage} time={time} image={image} />\n  }\n\n  return (\n    /*#__PURE__*/\n    // {conversationsList}\n    // console.log(\"hellllee\")\n    _jsxDEV(\"div\", {\n      className: \"col-4 newtab\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_c = AddNewChat;\nexport default AddNewChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNewChat\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/chatScreen/AddNewChat.js"],"names":["React","conversations","users","LeftScreen","LeftChatItem","AddNewChat","props","isRegisteredUser","console","log","logInUsername","newContact","i","Object","keys","conversationsList","length","usernameInChat","user","username","newConversation","nickname","image","messages","type","content","createdAt","sender","lastMessage","time","newChat"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport conversations from '../db/Conversations';\r\nimport users from '../db/UsersDataBase';\r\nimport LeftScreen from './LeftScreen';\r\nimport LeftChatItem from './leftChatItem/LeftChatItem';\r\nimport './AddNewChat.css';\r\n\r\nfunction AddNewChat(props) {\r\n\r\n    var isRegisteredUser = false;\r\n    console.log(props);\r\n\r\n    \r\n    // If the user entered his contact's identifier username, do nothing. \r\n    if (props.logInUsername == props.newContact) {\r\n        return;\r\n    }\r\n    for (var i = 0; i < Object.keys(props.conversationsList).length; i++) {\r\n        // If the user already have a conversation with this contact, do nothing.\r\n        if (props.conversationsList[i].usernameInChat == props.newContact) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    var user;\r\n    for (var i = 0; i < Object.keys(users).length; i++) {\r\n        // If the user already have a conversation with this contact, do nothing.\r\n        if (props.logInUsername == users[i].username) {\r\n            user = users[i];\r\n        }\r\n    }\r\n\r\n\r\n    var newConversation;\r\n    for (var i = 0; i < Object.keys(users).length; i++) {\r\n        // If the user already have a conversation with this contact, do nothing.\r\n        if (props.newContact == users[i].username) {\r\n            isRegisteredUser = true;\r\n            //add its username, nickname, image\r\n            newConversation = {\r\n                users: [{ username: user.username, nickname: user.nickname, image: user.image },\r\n                { username: users[i].username, nickname: users[i].nickname, image: users[i].image }],\r\n                messages: [{ type: \"\", content: \"\", createdAt: \"\",sender: \"\"}]\r\n            }\r\n        }\r\n    }\r\n\r\n    //If the user is not registered, do nothing.\r\n    if (!isRegisteredUser) {\r\n        return;\r\n    } else {\r\n        return newConversation;\r\n\r\n\r\n        var usernameInChat = \"\";\r\n        var lastMessage = \"\";\r\n        var time = \"\";\r\n        var image;\r\n        var type = \"\";\r\n        // conversations.unshift(newConversation);\r\n        // console.log(conversationsList);\r\n\r\n        // Adding new conversation as a LeftChatItem to relevantInfo map.\r\n        lastMessage = newConversation.messages[Object.keys(newConversation.messages).length - 1].content;\r\n        type = newConversation.messages[Object.keys(newConversation.messages).length - 1].type;\r\n        time = newConversation.messages[Object.keys(newConversation.messages).length - 1].createdAt;\r\n        image = newConversation.users[1].image;\r\n\r\n        var newChat = { usernameInChat: props.newContact, type: type, lastMessage: lastMessage, time: time, image: image };\r\n\r\n\r\n        // return {newChat, newConversation};\r\n\r\n        // let chatsArr = [...props.relevantInfo, newChat]\r\n\r\n        // var conversation = { usernameInChat: newContact, type: type, lastMessage: lastMessage, time: time, image: image }\r\n        // <LeftChatItem usernameInChat={newContact} type={type} lastMessage={lastMessage} time={time} image={image} />\r\n\r\n    }\r\n    return (\r\n        // {conversationsList}\r\n        // console.log(\"hellllee\")\r\n        <div className=\"col-4 newtab\">\r\n            <div>hello</div>\r\n            {/* <div>\r\n        //         {conversationsList}\r\n        //     </div> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddNewChat;"]},"metadata":{},"sourceType":"module"}