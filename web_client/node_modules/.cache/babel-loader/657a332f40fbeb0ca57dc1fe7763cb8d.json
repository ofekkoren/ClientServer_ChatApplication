{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\nimport { LogLevel } from \"./ILogger\";\nexport class XhrHttpClient extends HttpClient {\n  constructor(logger) {\n    super();\n    this._logger = logger;\n  }\n  /** @inheritDoc */\n\n\n  send(request) {\n    // Check that abort was not signaled before calling send\n    if (request.abortSignal && request.abortSignal.aborted) {\n      return Promise.reject(new AbortError());\n    }\n\n    if (!request.method) {\n      return Promise.reject(new Error(\"No method defined.\"));\n    }\n\n    if (!request.url) {\n      return Promise.reject(new Error(\"No url defined.\"));\n    }\n\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open(request.method, request.url, true);\n      xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\n      xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\"); // Explicitly setting the Content-Type header for React Native on Android platform.\n\n      xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n      const headers = request.headers;\n\n      if (headers) {\n        Object.keys(headers).forEach(header => {\n          xhr.setRequestHeader(header, headers[header]);\n        });\n      }\n\n      if (request.responseType) {\n        xhr.responseType = request.responseType;\n      }\n\n      if (request.abortSignal) {\n        request.abortSignal.onabort = () => {\n          xhr.abort();\n          reject(new AbortError());\n        };\n      }\n\n      if (request.timeout) {\n        xhr.timeout = request.timeout;\n      }\n\n      xhr.onload = () => {\n        if (request.abortSignal) {\n          request.abortSignal.onabort = null;\n        }\n\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\n        } else {\n          reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\n        }\n      };\n\n      xhr.onerror = () => {\n        this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\n\n        reject(new HttpError(xhr.statusText, xhr.status));\n      };\n\n      xhr.ontimeout = () => {\n        this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\n\n        reject(new TimeoutError());\n      };\n\n      xhr.send(request.content || \"\");\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["AbortError","HttpError","TimeoutError","HttpClient","HttpResponse","LogLevel","XhrHttpClient","constructor","logger","_logger","send","request","abortSignal","aborted","Promise","reject","method","Error","url","resolve","xhr","XMLHttpRequest","open","withCredentials","undefined","setRequestHeader","headers","Object","keys","forEach","header","responseType","onabort","abort","timeout","onload","status","statusText","response","responseText","onerror","log","Warning","ontimeout","content"],"sources":["C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\node_modules\\@microsoft\\signalr\\src\\XhrHttpClient.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}