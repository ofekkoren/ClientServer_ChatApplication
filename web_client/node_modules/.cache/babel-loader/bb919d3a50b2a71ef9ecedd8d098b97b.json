{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\chatScreen\\\\ChatScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport './ChatScreen.css';\nimport { useState, useRef } from \"react\";\nimport LeftScreen from './LeftScreen';\nimport RightScreen from \"./RightScreen\";\nimport users from \"../db/UsersDataBase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatScreen(user) {\n  _s();\n\n  let [currentConversation, setCurrentConversation] = useState(\"\");\n  let conversationDBRef = useRef(\"\"); //Reference to the original location of the conversation in the DB.\n\n  useEffect(() => {\n    //Applying the function only if a chat was chosen by the user.\n    if (currentConversation !== \"\") {\n      //If a new message was sent in the current chat we add this message to the corresponding array in our DB.\n      if (currentConversation.messages.length !== conversationDBRef.current.messages.length) {\n        conversationDBRef.current.messages.push(currentConversation.messages[currentConversation.messages.length - 1]);\n      } //Scrolling down to the last message when sending a new message or selecting an other chat.\n\n\n      let bottom = document.getElementById(\"lastMessage\");\n      bottom.scrollIntoView({\n        block: \"end\"\n      });\n    }\n  }, [currentConversation]);\n  user = users[0]; // TODO Used for debug,will be deleted in the future\n\n  console.log(user.username);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-chat-screen justify-content-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inner-chat-cube\",\n      children: [/*#__PURE__*/_jsxDEV(LeftScreen, {\n        user: user,\n        setChat: setCurrentConversation,\n        refer: conversationDBRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(RightScreen, {\n        chat: currentConversation,\n        setChat: setCurrentConversation,\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatScreen, \"1BD+yneWEp5AOVcrSFEjv+ACGsg=\");\n\n_c = ChatScreen;\nexport default ChatScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/chatScreen/ChatScreen.js"],"names":["React","useEffect","useState","useRef","LeftScreen","RightScreen","users","ChatScreen","user","currentConversation","setCurrentConversation","conversationDBRef","messages","length","current","push","bottom","document","getElementById","scrollIntoView","block","console","log","username"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kBAAP;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAOC,KAAP,MAAkB,qBAAlB;;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAAA;;AAEtB,MAAI,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDR,QAAQ,CAAC,EAAD,CAA5D;AACA,MAAIS,iBAAiB,GAAGR,MAAM,CAAC,EAAD,CAA9B,CAHsB,CAGc;;AAEpCF,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAIQ,mBAAmB,KAAK,EAA5B,EAAgC;AAC5B;AACA,UAAIA,mBAAmB,CAACG,QAApB,CAA6BC,MAA7B,KAAwCF,iBAAiB,CAACG,OAAlB,CAA0BF,QAA1B,CAAmCC,MAA/E,EAAuF;AACnFF,QAAAA,iBAAiB,CAACG,OAAlB,CAA0BF,QAA1B,CAAmCG,IAAnC,CAAwCN,mBAAmB,CAACG,QAApB,CAA6BH,mBAAmB,CAACG,QAApB,CAA6BC,MAA7B,GAAsC,CAAnE,CAAxC;AACH,OAJ2B,CAK5B;;;AACA,UAAIG,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAb;AACAF,MAAAA,MAAM,CAACG,cAAP,CAAsB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAtB;AACH;AACJ,GAXQ,EAWN,CAACX,mBAAD,CAXM,CAAT;AAaAD,EAAAA,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAZ,CAlBsB,CAkBL;;AACjBe,EAAAA,OAAO,CAACC,GAAR,CAAYd,IAAI,CAACe,QAAjB;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,8CAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BAEK,QAAC,UAAD;AAAY,QAAA,IAAI,EAAEf,IAAlB;AAAwB,QAAA,OAAO,EAAEE,sBAAjC;AAAyD,QAAA,KAAK,EAAEC;AAAhE;AAAA;AAAA;AAAA;AAAA,cAFL,eAGI,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEF,mBAAnB;AAAwC,QAAA,OAAO,EAAEC,sBAAjD;AAAyE,QAAA,IAAI,EAAEF;AAA/E;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GA7BQD,U;;KAAAA,U;AA+BT,eAAeA,UAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport './ChatScreen.css';\r\nimport { useState, useRef } from \"react\";\r\nimport LeftScreen from './LeftScreen';\r\nimport RightScreen from \"./RightScreen\";\r\n\r\nimport users from \"../db/UsersDataBase\";\r\n\r\nfunction ChatScreen(user) {\r\n\r\n    let [currentConversation, setCurrentConversation] = useState(\"\");\r\n    let conversationDBRef = useRef(\"\"); //Reference to the original location of the conversation in the DB.\r\n\r\n    useEffect(() => {\r\n        //Applying the function only if a chat was chosen by the user.\r\n        if (currentConversation !== \"\") {\r\n            //If a new message was sent in the current chat we add this message to the corresponding array in our DB.\r\n            if (currentConversation.messages.length !== conversationDBRef.current.messages.length) {\r\n                conversationDBRef.current.messages.push(currentConversation.messages[currentConversation.messages.length - 1])\r\n            }\r\n            //Scrolling down to the last message when sending a new message or selecting an other chat.\r\n            let bottom = document.getElementById(\"lastMessage\");\r\n            bottom.scrollIntoView({ block: \"end\" });\r\n        }\r\n    }, [currentConversation])\r\n\r\n    user = users[0]; // TODO Used for debug,will be deleted in the future\r\n    console.log(user.username)\r\n    return (\r\n        <div className=\"container-chat-screen justify-content-center\">\r\n            <div className=\"inner-chat-cube\">\r\n                {/* <LeftScreen logInUsername=\"Ofek Koren\"/> */}\r\n                 <LeftScreen user={user} setChat={setCurrentConversation} refer={conversationDBRef} />\r\n                <RightScreen chat={currentConversation} setChat={setCurrentConversation} user={user} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatScreen;"]},"metadata":{},"sourceType":"module"}