{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\chatScreen\\\\RightScreen.js\";\nimport './ChatScreen.css';\nimport \"./RightScreen.css\";\nimport { useState } from \"react\";\nimport users from \"../db/UsersDataBase\";\nimport Conversations from \"../db/Conversations\";\nimport conversations from \"../db/Conversations\";\n/**\r\n * The body of the chat\r\n * @param props inlude the information of the user currently logged-in and the current chosen conversation.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RightScreen(props) {\n  /*\r\n      let [currentConversation, setCurrentConversation] = useState(props.chat);\r\n  */\n  //If no chat was chosen by the user, no name or image will or message box will be displayed.\n  if (props.chat === \"\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col rightScreen\",\n      children: /*#__PURE__*/_jsxDEV(ChatHeader, {\n        chatWith: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this);\n  } //Checking which of the chat participants is the signed-in user. The second participant is the user we chat with.\n  else {\n    /*        console.log(conversations)\r\n            console.log(users)*/\n    if (props.user.username === props.chat.users[0].username) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col rightScreen\",\n        children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n          chatWith: props.chat.users[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-body\",\n          children: props.chat.messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user\",\n            children: message.content\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ChatTextBox, {\n          chat: props.chat,\n          setChat: props.setChat,\n          sendingUser: props.user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col rightScreen\",\n        children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n          chatWith: props.chat.users[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-body\",\n          children: props.chat.messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user\",\n            children: message.content\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ChatTextBox, {\n          chat: props.chat,\n          setChat: props.setChat,\n          sendingUser: props.user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this);\n    }\n  }\n}\n\n_c = RightScreen;\nexport default RightScreen;\n/**\r\n * The header of the chat. It includes an image and the nickname of the user we currently chat with.\r\n * @param props includes the user we currently chat with.\r\n */\n\nfunction ChatHeader(props) {\n  if (props.chatWith === \"\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"topLine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"topLine\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: process.env.PUBLIC_URL + props.chatWith.image,\n        className: \"float-start top-profile-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: props.chatWith.nickname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n}\n/**\r\n * The body of the chat which will contain the messages.\r\n * @param props includes the current chat of the user and a setter method.\r\n */\n\n\n_c2 = ChatHeader;\n\nfunction ChatTextBox(props) {\n  const handleSendClick = event => {\n    //TODO delete it\n\n    /*let message = document.getElementById(\"textBox\").value;\r\n    if (message.trim() !== \"\") {\r\n        props.chat.messages.push({\r\n            content: message,\r\n            createdAt: new Date().toISOString(),\r\n            sender: props.sendingUser.username\r\n        })\r\n        document.getElementById(\"textBox\").value = \"\";\r\n        console.log(props.chat)\r\n    }*/\n    //Getting the message typed by the user\n    let message = document.getElementById(\"textBox\").value; //If the user didn't type a message we won't send an empty string, Else we add the message to the chat.\n\n    if (message.trim() !== \"\") {\n      let messageInfo = {\n        type: \"text\",\n        content: message,\n        createdAt: new Date().toISOString(),\n        sender: props.sendingUser.username\n      }; //Appending the message to the end of the messages array.\n\n      let messagesArr = [...props.chat.messages, messageInfo];\n      props.setChat({\n        users: props.chat.users,\n        messages: messagesArr\n      }); //Clearing the chat message box.\n\n      document.getElementById(\"textBox\").value = \"\";\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bottom-input-line\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"btn-lg btn-outline-secondary bottom-btn\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: \"16\",\n        height: \"16\",\n        fill: \"currentColor\",\n        className: \"bi bi-paperclip\",\n        viewBox: \"0 0 16 16\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M4.5 3a2.5 2.5 0 0 1 5 0v9a1.5 1.5 0 0 1-3 0V5a.5.5 0 0 1 1 0v7a.5.5 0 0 0 1 0V3a1.5 1.5 0 1 0-3 0v9a2.5 2.5 0 0 0 5 0V5a.5.5 0 0 1 1 0v7a3.5 3.5 0 1 1-7 0V3z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"textBox\",\n      className: \"form-control-lg message-box\",\n      rows: \"1\",\n      placeholder: \"Type a message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"btn-lg btn-outline-secondary float-end bottom-btn\",\n      onClick: handleSendClick,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: \"16\",\n        height: \"16\",\n        fill: \"currentColor\",\n        className: \"bi bi-send\",\n        viewBox: \"0 0 16 16\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576 6.636 10.07Zm6.787-8.201L1.591 6.602l4.339 2.76 7.494-7.493Z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n}\n\n_c3 = ChatTextBox;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"RightScreen\");\n$RefreshReg$(_c2, \"ChatHeader\");\n$RefreshReg$(_c3, \"ChatTextBox\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/chatScreen/RightScreen.js"],"names":["useState","users","Conversations","conversations","RightScreen","props","chat","user","username","messages","map","message","index","content","setChat","ChatHeader","chatWith","process","env","PUBLIC_URL","image","nickname","ChatTextBox","handleSendClick","event","document","getElementById","value","trim","messageInfo","type","createdAt","Date","toISOString","sender","sendingUser","messagesArr"],"mappings":";AAAA,OAAO,kBAAP;AACA,OAAO,mBAAP;AACA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AAEA;AACA;AACA;AACA;;;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB;AACJ;AACA;AAEI;AACA,MAAIA,KAAK,CAACC,IAAN,KAAe,EAAnB,EAAuB;AACnB,wBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACI,QAAC,UAAD;AAAY,QAAA,QAAQ,EAAE;AAAtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAND,CAOA;AAPA,OAQK;AACT;AACA;AAEQ,QAAID,KAAK,CAACE,IAAN,CAAWC,QAAX,KAAwBH,KAAK,CAACC,IAAN,CAAWL,KAAX,CAAiB,CAAjB,EAAoBO,QAAhD,EAA0D;AACtD,0BACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACI,QAAC,UAAD;AAAY,UAAA,QAAQ,EAAEH,KAAK,CAACC,IAAN,CAAWL,KAAX,CAAiB,CAAjB;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,oBACKI,KAAK,CAACC,IAAN,CAAWG,QAAX,CAAoBC,GAApB,CAAwB,CAACC,OAAD,EAAUC,KAAV,kBACrB;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,sBAAmCD,OAAO,CAACE;AAA3C,aAA2BD,KAA3B;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAOI,QAAC,WAAD;AAAa,UAAA,IAAI,EAAEP,KAAK,CAACC,IAAzB;AAA+B,UAAA,OAAO,EAAED,KAAK,CAACS,OAA9C;AACa,UAAA,WAAW,EAAET,KAAK,CAACE;AADhC;AAAA;AAAA;AAAA;AAAA,gBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAYH,KAbD,MAaO;AACH,0BACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACI,QAAC,UAAD;AAAY,UAAA,QAAQ,EAAEF,KAAK,CAACC,IAAN,CAAWL,KAAX,CAAiB,CAAjB;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,oBACKI,KAAK,CAACC,IAAN,CAAWG,QAAX,CAAoBC,GAApB,CAAwB,CAACC,OAAD,EAAUC,KAAV,kBACrB;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,sBAAmCD,OAAO,CAACE;AAA3C,aAA2BD,KAA3B;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAOI,QAAC,WAAD;AAAa,UAAA,IAAI,EAAEP,KAAK,CAACC,IAAzB;AAA+B,UAAA,OAAO,EAAED,KAAK,CAACS,OAA9C;AACa,UAAA,WAAW,EAAET,KAAK,CAACE;AADhC;AAAA;AAAA;AAAA;AAAA,gBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAYH;AACJ;AAEJ;;KA/CQH,W;AAiDT,eAAeA,WAAf;AAEA;AACA;AACA;AACA;;AACA,SAASW,UAAT,CAAoBV,KAApB,EAA2B;AACvB,MAAIA,KAAK,CAACW,QAAN,KAAmB,EAAvB,EAA2B;AACvB,wBAAQ;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAAR;AACH,GAFD,MAEO;AACH,wBACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AAAK,QAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAAyBd,KAAK,CAACW,QAAN,CAAeI,KAAlD;AACK,QAAA,SAAS,EAAC;AADf;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI;AAAA,kBAAKf,KAAK,CAACW,QAAN,CAAeK;AAApB;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;AACJ;AAED;AACA;AACA;AACA;;;MAjBSN,U;;AAkBT,SAASO,WAAT,CAAqBjB,KAArB,EAA4B;AAExB,QAAMkB,eAAe,GAAIC,KAAD,IAAW;AAC/B;;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEQ;AACA,QAAIb,OAAO,GAAGc,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,KAAjD,CAd+B,CAe/B;;AACA,QAAIhB,OAAO,CAACiB,IAAR,OAAmB,EAAvB,EAA2B;AACvB,UAAIC,WAAW,GAAG;AACdC,QAAAA,IAAI,EAAE,MADQ;AAEdjB,QAAAA,OAAO,EAAEF,OAFK;AAGdoB,QAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAHG;AAIdC,QAAAA,MAAM,EAAE7B,KAAK,CAAC8B,WAAN,CAAkB3B;AAJZ,OAAlB,CADuB,CAOvB;;AACA,UAAI4B,WAAW,GAAG,CAAC,GAAG/B,KAAK,CAACC,IAAN,CAAWG,QAAf,EAAyBoB,WAAzB,CAAlB;AACAxB,MAAAA,KAAK,CAACS,OAAN,CAAc;AAACb,QAAAA,KAAK,EAAEI,KAAK,CAACC,IAAN,CAAWL,KAAnB;AAA0BQ,QAAAA,QAAQ,EAAE2B;AAApC,OAAd,EATuB,CAUvB;;AACAX,MAAAA,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,KAAnC,GAA2C,EAA3C;AACH;AACJ,GA7BD;;AA+BA,sBACI;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,4BAGI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,yCAAhC;AAAA,6BACI;AAAK,QAAA,KAAK,EAAC,4BAAX;AAAwC,QAAA,KAAK,EAAC,IAA9C;AAAmD,QAAA,MAAM,EAAC,IAA1D;AAA+D,QAAA,IAAI,EAAC,cAApE;AACK,QAAA,SAAS,EAAC,iBADf;AACiC,QAAA,OAAO,EAAC,WADzC;AAAA,+BAEI;AACI,UAAA,CAAC,EAAC;AADN;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ,eAYI;AAAU,MAAA,EAAE,EAAC,SAAb;AAAuB,MAAA,SAAS,EAAC,6BAAjC;AAA+D,MAAA,IAAI,EAAC,GAApE;AACU,MAAA,WAAW,EAAC;AADtB;AAAA;AAAA;AAAA;AAAA,YAZJ,eAgBI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,mDAAhC;AACQ,MAAA,OAAO,EAAEJ,eADjB;AAAA,6BAEI;AAAK,QAAA,KAAK,EAAC,4BAAX;AAAwC,QAAA,KAAK,EAAC,IAA9C;AAAmD,QAAA,MAAM,EAAC,IAA1D;AAA+D,QAAA,IAAI,EAAC,cAApE;AACK,QAAA,SAAS,EAAC,YADf;AAC4B,QAAA,OAAO,EAAC,WADpC;AAAA,+BAEI;AACI,UAAA,CAAC,EAAC;AADN;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH;;MA7DQD,W","sourcesContent":["import './ChatScreen.css';\r\nimport \"./RightScreen.css\"\r\nimport {useState} from \"react\";\r\nimport users from \"../db/UsersDataBase\";\r\nimport Conversations from \"../db/Conversations\";\r\nimport conversations from \"../db/Conversations\";\r\n\r\n/**\r\n * The body of the chat\r\n * @param props inlude the information of the user currently logged-in and the current chosen conversation.\r\n */\r\nfunction RightScreen(props) {\r\n    /*\r\n        let [currentConversation, setCurrentConversation] = useState(props.chat);\r\n    */\r\n\r\n    //If no chat was chosen by the user, no name or image will or message box will be displayed.\r\n    if (props.chat === \"\") {\r\n        return (\r\n            <div className=\"col rightScreen\">\r\n                <ChatHeader chatWith={\"\"}></ChatHeader>\r\n            </div>\r\n        )\r\n    }\r\n    //Checking which of the chat participants is the signed-in user. The second participant is the user we chat with.\r\n    else {\r\n/*        console.log(conversations)\r\n        console.log(users)*/\r\n\r\n        if (props.user.username === props.chat.users[0].username) {\r\n            return (\r\n                <div className=\"col rightScreen\">\r\n                    <ChatHeader chatWith={props.chat.users[1]}></ChatHeader>\r\n                    <div className=\"chat-body\">\r\n                        {props.chat.messages.map((message, index) => (\r\n                            <div className=\"user\" key={index}>{message.content}</div>\r\n                        ))}\r\n                    </div>\r\n                    <ChatTextBox chat={props.chat} setChat={props.setChat}\r\n                                 sendingUser={props.user}></ChatTextBox>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"col rightScreen\">\r\n                    <ChatHeader chatWith={props.chat.users[0]}></ChatHeader>\r\n                    <div className=\"chat-body\">\r\n                        {props.chat.messages.map((message, index) => (\r\n                            <div className=\"user\" key={index}>{message.content}</div>\r\n                        ))}\r\n                    </div>\r\n                    <ChatTextBox chat={props.chat} setChat={props.setChat}\r\n                                 sendingUser={props.user}></ChatTextBox>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default RightScreen;\r\n\r\n/**\r\n * The header of the chat. It includes an image and the nickname of the user we currently chat with.\r\n * @param props includes the user we currently chat with.\r\n */\r\nfunction ChatHeader(props) {\r\n    if (props.chatWith === \"\") {\r\n        return (<div className=\"topLine\"></div>)\r\n    } else {\r\n        return (\r\n            <div className=\"topLine\">\r\n                <img src={process.env.PUBLIC_URL + props.chatWith.image}\r\n                     className=\"float-start top-profile-image\"></img>\r\n                <h5>{props.chatWith.nickname}</h5>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * The body of the chat which will contain the messages.\r\n * @param props includes the current chat of the user and a setter method.\r\n */\r\nfunction ChatTextBox(props) {\r\n\r\n    const handleSendClick = (event) => {\r\n        //TODO delete it\r\n        /*let message = document.getElementById(\"textBox\").value;\r\n        if (message.trim() !== \"\") {\r\n            props.chat.messages.push({\r\n                content: message,\r\n                createdAt: new Date().toISOString(),\r\n                sender: props.sendingUser.username\r\n            })\r\n            document.getElementById(\"textBox\").value = \"\";\r\n            console.log(props.chat)\r\n        }*/\r\n\r\n        //Getting the message typed by the user\r\n        let message = document.getElementById(\"textBox\").value;\r\n        //If the user didn't type a message we won't send an empty string, Else we add the message to the chat.\r\n        if (message.trim() !== \"\") {\r\n            let messageInfo = {\r\n                type: \"text\",\r\n                content: message,\r\n                createdAt: new Date().toISOString(),\r\n                sender: props.sendingUser.username\r\n            }\r\n            //Appending the message to the end of the messages array.\r\n            let messagesArr = [...props.chat.messages, messageInfo]\r\n            props.setChat({users: props.chat.users, messages: messagesArr})\r\n            //Clearing the chat message box.\r\n            document.getElementById(\"textBox\").value = \"\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"bottom-input-line\">\r\n\r\n            {/*audio/video/photo button*/}\r\n            <button type=\"button\" className=\"btn-lg btn-outline-secondary bottom-btn\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\"\r\n                     className=\"bi bi-paperclip\" viewBox=\"0 0 16 16\">\r\n                    <path\r\n                        d=\"M4.5 3a2.5 2.5 0 0 1 5 0v9a1.5 1.5 0 0 1-3 0V5a.5.5 0 0 1 1 0v7a.5.5 0 0 0 1 0V3a1.5 1.5 0 1 0-3 0v9a2.5 2.5 0 0 0 5 0V5a.5.5 0 0 1 1 0v7a3.5 3.5 0 1 1-7 0V3z\"/>\r\n                </svg>\r\n            </button>\r\n\r\n            {/*text box for writting messages*/}\r\n            <textarea id=\"textBox\" className=\"form-control-lg message-box\" rows=\"1\"\r\n                      placeholder=\"Type a message\"></textarea>\r\n\r\n            {/*send button*/}\r\n            <button type=\"button\" className=\"btn-lg btn-outline-secondary float-end bottom-btn\"\r\n                    onClick={handleSendClick}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\"\r\n                     className=\"bi bi-send\" viewBox=\"0 0 16 16\">\r\n                    <path\r\n                        d=\"M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576 6.636 10.07Zm6.787-8.201L1.591 6.602l4.339 2.76 7.494-7.493Z\"/>\r\n                </svg>\r\n            </button>\r\n\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}