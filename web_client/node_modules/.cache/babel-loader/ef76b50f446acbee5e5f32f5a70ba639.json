{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\chatScreen\\\\RightScreen.js\";\nimport './ChatScreen.css';\nimport \"./RightScreen.css\";\nimport ChatTextBox from \"./ChatTextBox\";\nimport ChatHeader from \"./ChatHeader\";\nimport Message from \"./Message\";\n/**\r\n * The body of the chat\r\n * @param props include the information of the user currently logged-in and the current chosen conversation.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RightScreen(props) {\n  //If no chat was chosen by the user, no name or image will or message box will be displayed.\n  if (props.chat === \"\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col rightScreen\",\n      children: /*#__PURE__*/_jsxDEV(ChatHeader, {\n        chatWith: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this);\n  } //Checking which of the chat participants is the signed-in user. The second participant is the user we chat with.\n  else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col rightScreen\",\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        chatWith: props.user.username === props.chat.users[0].username ? props.chat.users[1] : props.chat.users[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-body\",\n        id: \"chatBody\",\n        children: [props.chat.messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n          user: props.user,\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-body-bottom\",\n          id: \"lastMessage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ChatTextBox, {\n        chat: props.chat,\n        setChat: props.setChat,\n        sendingUser: props.user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_c = RightScreen;\nexport default RightScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"RightScreen\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/chatScreen/RightScreen.js"],"names":["ChatTextBox","ChatHeader","Message","RightScreen","props","chat","user","username","users","messages","map","message","index","setChat"],"mappings":";AAAA,OAAO,kBAAP;AACA,OAAO,mBAAP;AACA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA;AACA;AACA;AACA;;;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB;AACA,MAAIA,KAAK,CAACC,IAAN,KAAe,EAAnB,EAAuB;AACnB,wBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACI,QAAC,UAAD;AAAY,QAAA,QAAQ,EAAE;AAAtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAND,CAQA;AARA,OASK;AACD,wBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BACI,QAAC,UAAD;AAAY,QAAA,QAAQ,EAAED,KAAK,CAACE,IAAN,CAAWC,QAAX,KAAwBH,KAAK,CAACC,IAAN,CAAWG,KAAX,CAAiB,CAAjB,EAAoBD,QAA5C,GAClBH,KAAK,CAACC,IAAN,CAAWG,KAAX,CAAiB,CAAjB,CADkB,GACIJ,KAAK,CAACC,IAAN,CAAWG,KAAX,CAAiB,CAAjB;AAD1B;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,EAAE,EAAC,UAA9B;AAAA,mBACKJ,KAAK,CAACC,IAAN,CAAWI,QAAX,CAAoBC,GAApB,CAAwB,CAACC,OAAD,EAAUC,KAAV,kBACrB,QAAC,OAAD;AAAqB,UAAA,IAAI,EAAER,KAAK,CAACE,IAAjC;AAAuC,UAAA,OAAO,EAAEK;AAAhD,WAAcC,KAAd;AAAA;AAAA;AAAA;AAAA,gBADH,CADL,eAII;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAkC,UAAA,EAAE,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eASI,QAAC,WAAD;AAAa,QAAA,IAAI,EAAER,KAAK,CAACC,IAAzB;AAA+B,QAAA,OAAO,EAAED,KAAK,CAACS,OAA9C;AACa,QAAA,WAAW,EAAET,KAAK,CAACE;AADhC;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;AACJ;;KA3BQH,W;AA6BT,eAAeA,WAAf","sourcesContent":["import './ChatScreen.css';\r\nimport \"./RightScreen.css\"\r\nimport ChatTextBox from \"./ChatTextBox\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport Message from \"./Message\";\r\n\r\n/**\r\n * The body of the chat\r\n * @param props include the information of the user currently logged-in and the current chosen conversation.\r\n */\r\nfunction RightScreen(props) {\r\n    //If no chat was chosen by the user, no name or image will or message box will be displayed.\r\n    if (props.chat === \"\") {\r\n        return (\r\n            <div className=\"col rightScreen\">\r\n                <ChatHeader chatWith={\"\"}></ChatHeader>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //Checking which of the chat participants is the signed-in user. The second participant is the user we chat with.\r\n    else {\r\n        return (\r\n            <div className=\"col rightScreen\">\r\n                <ChatHeader chatWith={props.user.username === props.chat.users[0].username ?\r\n                    props.chat.users[1] : props.chat.users[0]}></ChatHeader>\r\n                <div className=\"chat-body\" id=\"chatBody\">\r\n                    {props.chat.messages.map((message, index) => (\r\n                        <Message key={index} user={props.user} message={message}></Message>\r\n                    ))}\r\n                    <div className=\"chat-body-bottom\" id=\"lastMessage\"></div>\r\n                </div>\r\n                <ChatTextBox chat={props.chat} setChat={props.setChat}\r\n                             sendingUser={props.user}></ChatTextBox>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RightScreen;\r\n\r\n"]},"metadata":{},"sourceType":"module"}