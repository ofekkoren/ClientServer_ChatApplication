{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ex2\\\\clientSide\\\\src\\\\chatScreen\\\\ChatScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport './ChatScreen.css';\nimport { useState, useRef } from \"react\";\nimport LeftScreen from './leftScreen/LeftScreen';\nimport RightScreen from \"./rightScreen/RightScreen\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { user } from '../logIn/LogIn';\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatScreen() {\n  _s();\n\n  var [currentConversation, setCurrentConversation] = useState(\"\");\n  var conversationDBRef = useRef(\"\"); //Reference to the current conversation\n\n  var [currentListOfChats, setCurrentListOfChats] = useState(user.conversations);\n  var listOfChatsRef = useRef(user.conversations); //Reference to the current lost of chats\n\n  var [connection, setConnection] = useState(null);\n  useEffect(() => {\n    //Creating a signaIR connection\n    const newConnection = new HubConnectionBuilder().withUrl('http://localhost:5170/hubs/chatHub').withAutomaticReconnect().build();\n    setConnection(newConnection);\n  }, []);\n  useEffect(() => {\n    if (listOfChatsRef.current !== [] && currentConversation !== \"\") {\n      /*\r\n       * If a new message was sent to the current user in the chat he is currently watching we will update the\r\n       * current conversation.\r\n       */\n      if (currentConversation.contact.username === listOfChatsRef.current[0].contact.username) {\n        var copyLastConversation = JSON.parse(JSON.stringify(listOfChatsRef.current[0]));\n        conversationDBRef.current = copyLastConversation;\n        setCurrentConversation(copyLastConversation);\n      }\n    }\n  }, [currentListOfChats]);\n  useEffect(() => {\n    if (connection) {\n      //Defining methods that will be used when a signaIR signal is sent\n      connection.start().then(result => {\n        //Adding new contact when someone else adds the current user as contact\n        connection.on('NewContactAdded', params => {\n          if (user.id === params.to) {\n            listOfChatsRef.current = params.conversations.value;\n            setCurrentListOfChats(params.conversations.value);\n          }\n        }); //Adding new message when a contact sent a new message to the current user\n\n        connection.on('ReceiveMessage', params => {\n          if (user.id === params.to) {\n            //Finding the chat that the message should be added to\n            for (var i = 0; i < listOfChatsRef.current.length; i++) {\n              var chat = listOfChatsRef.current[i];\n\n              if (chat.contact.username === params.from) {\n                chat.messages.push({\n                  id: params.id,\n                  content: params.content,\n                  created: params.created,\n                  sent: params.sent\n                }); //Putting the conversations at the top of the conversations list\n\n                listOfChatsRef.current.splice(i, 1);\n                listOfChatsRef.current.unshift(chat);\n              }\n            } //Updating the chats list\n\n\n            let chatsArr = JSON.parse(JSON.stringify(listOfChatsRef.current));\n            setCurrentListOfChats(chatsArr);\n          }\n        });\n      });\n    }\n  }, [connection]);\n  useEffect(() => {\n    //Applying the function only if a chat was chosen by the user.\n    if (currentConversation !== \"\") {\n      let bottom = document.getElementById(\"lastMessage\"); //If a new message was sent in the current chat we add this message to the corresponding array in our DB.\n\n      if (currentConversation.messages.length !== conversationDBRef.current.messages.length) {\n        conversationDBRef.current.messages.push(currentConversation.messages[currentConversation.messages.length - 1]); //Scrolling down to the last message if the user sent a new message.\n\n        if (currentConversation.messages[currentConversation.messages.length - 1].sent === true) {\n          bottom.scrollIntoView({\n            block: \"end\"\n          });\n        } // If the current conversation is in the array, add it to the front of the array.\n\n\n        var conversations = \"\";\n\n        async function fetchData() {\n          var response = await fetch('http://localhost:5170/api/Users/MoveConversationToTopList', {\n            method: \"POST\",\n            credentials: 'include',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              username: user.id,\n              id: currentConversation.contact.username\n            })\n          }); // If the current conversation pushed to the top of the user's list of conversations, get the list.\n\n          if (response.ok) var conversations = await response.json();\n\n          if (conversations !== \"\") {\n            setCurrentListOfChats(conversations);\n            listOfChatsRef.current = conversations;\n          }\n        }\n\n        fetchData();\n      } //If we changed the chat conversation we scroll down to the last message.\n      else {\n        bottom.scrollIntoView({\n          block: \"end\"\n        });\n      }\n    }\n  }, [currentConversation]); //If there is no user connected the chat screen won't be displayed.\n\n  if (user === \"\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sign-up-form\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-center\",\n        role: \"alert\",\n        children: [\"You have to log-in in order to see the chat screen.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 33\n        }, this), \"You can click \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"text\",\n          children: \"here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 35\n        }, this), \" to log-in.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 87\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-chat-screen justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner-chat-cube\",\n        children: [/*#__PURE__*/_jsxDEV(LeftScreen, {\n          currentConversation: currentConversation,\n          user: user,\n          setChat: setCurrentConversation,\n          listRef: listOfChatsRef,\n          connection: connection,\n          refer: conversationDBRef,\n          currentListOfChats: currentListOfChats,\n          setCurrentListOfChats: setCurrentListOfChats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RightScreen, {\n          chat: currentConversation,\n          setChat: setCurrentConversation,\n          user: user,\n          connection: connection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ChatScreen, \"ZKzgIldGl4vEo5/DqvDa6dXO05Q=\");\n\n_c = ChatScreen;\nexport default ChatScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ex2/clientSide/src/chatScreen/ChatScreen.js"],"names":["React","useEffect","useState","useRef","LeftScreen","RightScreen","Link","useLocation","user","HubConnectionBuilder","ChatScreen","currentConversation","setCurrentConversation","conversationDBRef","currentListOfChats","setCurrentListOfChats","conversations","listOfChatsRef","connection","setConnection","newConnection","withUrl","withAutomaticReconnect","build","current","contact","username","copyLastConversation","JSON","parse","stringify","start","then","result","on","params","id","to","value","i","length","chat","from","messages","push","content","created","sent","splice","unshift","chatsArr","bottom","document","getElementById","scrollIntoView","block","fetchData","response","fetch","method","credentials","headers","body","ok","json"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\r\nimport './ChatScreen.css';\r\nimport {useState, useRef} from \"react\";\r\nimport LeftScreen from './leftScreen/LeftScreen';\r\nimport RightScreen from \"./rightScreen/RightScreen\";\r\nimport {Link, useLocation} from \"react-router-dom\";\r\nimport {user} from '../logIn/LogIn';\r\nimport {HubConnectionBuilder} from '@microsoft/signalr';\r\n\r\n\r\nfunction ChatScreen() {\r\n    var [currentConversation, setCurrentConversation] = useState(\"\");\r\n    var conversationDBRef = useRef(\"\"); //Reference to the current conversation\r\n    var [currentListOfChats, setCurrentListOfChats] = useState(user.conversations);\r\n    var listOfChatsRef = useRef(user.conversations) //Reference to the current lost of chats\r\n    var [connection, setConnection] = useState(null);\r\n\r\n    useEffect(() => {\r\n        //Creating a signaIR connection\r\n        const newConnection = new HubConnectionBuilder().withUrl('http://localhost:5170/hubs/chatHub').withAutomaticReconnect().build();\r\n        setConnection(newConnection)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (listOfChatsRef.current !== [] && currentConversation !== \"\") {\r\n\r\n            /*\r\n             * If a new message was sent to the current user in the chat he is currently watching we will update the\r\n             * current conversation.\r\n             */\r\n            if (currentConversation.contact.username === listOfChatsRef.current[0].contact.username) {\r\n                var copyLastConversation = JSON.parse(JSON.stringify(listOfChatsRef.current[0]))\r\n                conversationDBRef.current = copyLastConversation\r\n                setCurrentConversation(copyLastConversation)\r\n            }\r\n        }\r\n    }, [currentListOfChats])\r\n\r\n    useEffect(() => {\r\n        if (connection) {\r\n            //Defining methods that will be used when a signaIR signal is sent\r\n            connection.start().then((result) => {\r\n                //Adding new contact when someone else adds the current user as contact\r\n                connection.on('NewContactAdded', (params) => {\r\n                    if (user.id === params.to) {\r\n                        listOfChatsRef.current = params.conversations.value\r\n                        setCurrentListOfChats(params.conversations.value)\r\n                    }\r\n                })\r\n\r\n                //Adding new message when a contact sent a new message to the current user\r\n                connection.on('ReceiveMessage', (params) => {\r\n                    if (user.id === params.to) {\r\n                        //Finding the chat that the message should be added to\r\n                        for (var i = 0; i < listOfChatsRef.current.length; i++) {\r\n                            var chat = listOfChatsRef.current[i];\r\n                            if (chat.contact.username === params.from) {\r\n                                chat.messages.push({\r\n                                    id: params.id,\r\n                                    content: params.content,\r\n                                    created: params.created,\r\n                                    sent: params.sent\r\n                                })\r\n                                //Putting the conversations at the top of the conversations list\r\n                                listOfChatsRef.current.splice(i, 1);\r\n                                listOfChatsRef.current.unshift(chat);\r\n                            }\r\n                        }\r\n                        //Updating the chats list\r\n                        let chatsArr = JSON.parse(JSON.stringify(listOfChatsRef.current));\r\n                        setCurrentListOfChats(chatsArr)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }, [connection])\r\n\r\n    useEffect(() => {\r\n        //Applying the function only if a chat was chosen by the user.\r\n        if (currentConversation !== \"\") {\r\n            let bottom = document.getElementById(\"lastMessage\");\r\n            //If a new message was sent in the current chat we add this message to the corresponding array in our DB.\r\n            if (currentConversation.messages.length !== conversationDBRef.current.messages.length) {\r\n                conversationDBRef.current.messages.push(currentConversation.messages[currentConversation.messages.length - 1])\r\n                //Scrolling down to the last message if the user sent a new message.\r\n                if (currentConversation.messages[currentConversation.messages.length - 1].sent === true) {\r\n                    bottom.scrollIntoView({block: \"end\"});\r\n                }\r\n                // If the current conversation is in the array, add it to the front of the array.\r\n                var conversations = \"\";\r\n\r\n                async function fetchData() {\r\n                    var response = await fetch('http://localhost:5170/api/Users/MoveConversationToTopList',\r\n                        {\r\n                            method: \"POST\",\r\n                            credentials: 'include',\r\n                            headers: {'Content-Type': 'application/json'},\r\n                            body: JSON.stringify({\r\n                                username: user.id,\r\n                                id: currentConversation.contact.username\r\n                            })\r\n                        })\r\n                    // If the current conversation pushed to the top of the user's list of conversations, get the list.\r\n                    if (response.ok)\r\n                        var conversations = await response.json();\r\n                    if (conversations !== \"\") {\r\n                        setCurrentListOfChats(conversations);\r\n                        listOfChatsRef.current = conversations\r\n\r\n                    }\r\n                }\r\n                fetchData();\r\n            }\r\n            //If we changed the chat conversation we scroll down to the last message.\r\n            else {\r\n                bottom.scrollIntoView({block: \"end\"});\r\n            }\r\n        }\r\n    }, [currentConversation])\r\n\r\n\r\n    //If there is no user connected the chat screen won't be displayed.\r\n    if (user === \"\") {\r\n        return (\r\n            <div className=\"sign-up-form\">\r\n                <h4 className=\"text-center\" role=\"alert\">You have to log-in in order to see the chat\r\n                    screen.<br/><br/>\r\n                    You can click <Link to='/' className=\"text\">here</Link> to log-in.<br/>\r\n                </h4>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"container-chat-screen justify-content-center\">\r\n                <div className=\"inner-chat-cube\">\r\n                    <LeftScreen currentConversation={currentConversation} user={user} setChat={setCurrentConversation}\r\n                                listRef={listOfChatsRef} connection={connection} refer={conversationDBRef}\r\n                                currentListOfChats={currentListOfChats} setCurrentListOfChats={setCurrentListOfChats}/>\r\n                    <RightScreen chat={currentConversation} setChat={setCurrentConversation} user={user}\r\n                                 connection={connection}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatScreen;"]},"metadata":{},"sourceType":"module"}