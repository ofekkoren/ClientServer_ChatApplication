{"ast":null,"code":"import { user } from \"../logIn/LogIn\";\n/**\r\n * Converts an image input of a user to a base64 string which represents the image.\r\n * @param file the file that was given as input by the user.\r\n * @return a promise to convert the image.\r\n */\n\nexport function convertToBase64(file, onLoadCallback) {\n  return new Promise(function (resolve, reject) {\n    let reader = new FileReader();\n\n    reader.onload = function () {\n      resolve(reader.result);\n    };\n\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n  });\n}\n/**\r\n * @return a formatted \"day.month.year, hour:minutes\" date string.\r\n */\n\nexport function getFormattedDateString(message) {\n  if (message != \"\") {\n    let messageDate = new Date(message.created);\n    let day = messageDate.getDate();\n    let month = messageDate.getMonth() + 1;\n    let year = messageDate.getFullYear();\n    let hour = messageDate.getHours();\n    if (hour < 10) hour = \"0\" + hour;\n    let minutes = messageDate.getMinutes();\n    if (minutes < 10) minutes = \"0\" + minutes;\n    return day + '.' + month + '.' + year + \", \" + hour + ':' + minutes;\n  }\n}\n/**\r\n * The function returns the conversations of the current log-in user, according\r\n * to the username (his id).\r\n * @param logInUsername is the username of the logged-in user.\r\n */\n\nexport async function getUser(logInUsername) {\n  var userData;\n  const response = await fetch('http://localhost:5170/api/Users?username=' + logInUsername, {\n    method: \"POST\",\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username: logInUsername\n    })\n  });\n  const user = await response.json();\n  return user;\n}","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ex2/clientSide/src/chatScreen/Utils.js"],"names":["user","convertToBase64","file","onLoadCallback","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","getFormattedDateString","message","messageDate","Date","created","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","getUser","logInUsername","userData","response","fetch","method","credentials","headers","body","JSON","stringify","username","json"],"mappings":"AAAA,SAASA,IAAT,QAAqB,gBAArB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,cAA/B,EAA+C;AAClD,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,YAAY;AACxBJ,MAAAA,OAAO,CAACE,MAAM,CAACG,MAAR,CAAP;AACH,KAFD;;AAGAH,IAAAA,MAAM,CAACI,OAAP,GAAiBL,MAAjB;AACAC,IAAAA,MAAM,CAACK,aAAP,CAAqBV,IAArB;AACH,GAPM,CAAP;AAQH;AAED;AACA;AACA;;AACA,OAAO,SAASW,sBAAT,CAAgCC,OAAhC,EAAyC;AAC5C,MAAIA,OAAO,IAAI,EAAf,EAAmB;AACf,QAAIC,WAAW,GAAG,IAAIC,IAAJ,CAASF,OAAO,CAACG,OAAjB,CAAlB;AACA,QAAIC,GAAG,GAAGH,WAAW,CAACI,OAAZ,EAAV;AACA,QAAIC,KAAK,GAAGL,WAAW,CAACM,QAAZ,KAAyB,CAArC;AACA,QAAIC,IAAI,GAAGP,WAAW,CAACQ,WAAZ,EAAX;AACA,QAAIC,IAAI,GAAGT,WAAW,CAACU,QAAZ,EAAX;AACA,QAAID,IAAI,GAAG,EAAX,EACIA,IAAI,GAAG,MAAMA,IAAb;AACJ,QAAIE,OAAO,GAAGX,WAAW,CAACY,UAAZ,EAAd;AACA,QAAID,OAAO,GAAG,EAAd,EACIA,OAAO,GAAG,MAAMA,OAAhB;AACJ,WAAOR,GAAG,GAAG,GAAN,GAAYE,KAAZ,GAAoB,GAApB,GAA0BE,IAA1B,GAAiC,IAAjC,GAAwCE,IAAxC,GAA+C,GAA/C,GAAqDE,OAA5D;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeE,OAAf,CAAuBC,aAAvB,EAAsC;AACzC,MAAIC,QAAJ;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8CH,aAA/C,EACxB;AACII,IAAAA,MAAM,EAAE,MADZ;AAEIC,IAAAA,WAAW,EAAE,SAFjB;AAGIC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB,KAHb;AAIIC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,MAAAA,QAAQ,EAAEV;AADO,KAAf;AAJV,GADwB,CAA5B;AASA,QAAM7B,IAAI,GAAG,MAAM+B,QAAQ,CAACS,IAAT,EAAnB;AACA,SAAOxC,IAAP;AACH","sourcesContent":["import { user } from \"../logIn/LogIn\";\r\n\r\n/**\r\n * Converts an image input of a user to a base64 string which represents the image.\r\n * @param file the file that was given as input by the user.\r\n * @return a promise to convert the image.\r\n */\r\nexport function convertToBase64(file, onLoadCallback) {\r\n    return new Promise(function (resolve, reject) {\r\n        let reader = new FileReader();\r\n        reader.onload = function () {\r\n            resolve(reader.result);\r\n        };\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(file);\r\n    });\r\n}\r\n\r\n/**\r\n * @return a formatted \"day.month.year, hour:minutes\" date string.\r\n */\r\nexport function getFormattedDateString(message) {\r\n    if (message != \"\") {\r\n        let messageDate = new Date(message.created);\r\n        let day = messageDate.getDate();\r\n        let month = messageDate.getMonth() + 1;\r\n        let year = messageDate.getFullYear();\r\n        let hour = messageDate.getHours();\r\n        if (hour < 10)\r\n            hour = \"0\" + hour;\r\n        let minutes = messageDate.getMinutes();\r\n        if (minutes < 10)\r\n            minutes = \"0\" + minutes;\r\n        return day + '.' + month + '.' + year + \", \" + hour + ':' + minutes;\r\n    }\r\n}\r\n\r\n/**\r\n * The function returns the conversations of the current log-in user, according\r\n * to the username (his id).\r\n * @param logInUsername is the username of the logged-in user.\r\n */\r\nexport async function getUser(logInUsername) {\r\n    var userData;\r\n    const response = await fetch('http://localhost:5170/api/Users?username=' + logInUsername,\r\n        {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                username: logInUsername\r\n            })\r\n        })\r\n    const user = await response.json();\r\n    return user;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}