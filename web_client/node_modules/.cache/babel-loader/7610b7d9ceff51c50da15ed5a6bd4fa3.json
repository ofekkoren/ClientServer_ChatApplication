{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\chatScreen\\\\AddNewChat.js\";\nimport React from 'react';\nimport conversations from '../db/Conversations';\nimport users from '../db/UsersDataBase';\nimport LeftScreen from './LeftScreen';\nimport LeftChatItem from './leftChatItem/LeftChatItem';\nimport './AddNewChat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddNewChat(props) {\n  var isRegisteredUser = false; // If the user entered his contact's identifier username, do nothing. \n\n  if (props.logInUsername == props.newContact) {\n    return;\n  }\n\n  for (var i = 0; i < Object.keys(props.conversationsList).length; i++) {\n    // If the user already have a conversation with this contact, do nothing.\n    if (props.conversationsList[i].usernameInChat == props.newContact) {\n      return;\n    }\n  }\n\n  var user;\n\n  for (var i = 0; i < Object.keys(users).length; i++) {\n    // If the user already have a conversation with this contact, do nothing.\n    if (props.logInUsername == users[i].username) {\n      user = users[i];\n    }\n  }\n\n  var newConversation;\n\n  for (var i = 0; i < Object.keys(users).length; i++) {\n    // If the user already have a conversation with this contact, do nothing.\n    if (props.newContact == users[i].username) {\n      isRegisteredUser = true; //add its username, nickname, image\n      // newConversation = {\n      //     users: [{ username: user.username, nickname: user.nickname, image: user.image },\n      //     { username: users[i].username, nickname: users[i].nickname, image: users[i].image }],\n      //     messages: [{ type: \"\", content: \"\", createdAt: \"\" }]\n      // }\n    }\n  } //If the user is not registered, do nothing.\n\n\n  if (!isRegisteredUser) {\n    return;\n  } else {\n    var usernameInChat = \"\";\n    var lastMessage = \"\";\n    var time = \"\";\n    var image;\n    var type = \"\";\n    conversations.unshift(newConversation); // console.log(conversationsList);\n    // Adding new conversation as a LeftChatItem to relevantInfo map.\n\n    lastMessage = newConversation.messages[Object.keys(newConversation.messages).length - 1].content;\n    type = newConversation.messages[Object.keys(newConversation.messages).length - 1].type;\n    time = newConversation.messages[Object.keys(newConversation.messages).length - 1].createdAt;\n    image = newConversation.users[1].image;\n    var newChat = {\n      usernameInChat: props.newContact,\n      type: type,\n      lastMessage: lastMessage,\n      time: time,\n      image: image\n    }; // props.relevantInfo.unshift({ usernameInChat: props.newContact, type: type, lastMessage: lastMessage, time: time, image: image });\n    // props.conversationsList = props.relevantInfo.map((conversation, key) => {\n    //     return <LeftChatItem {...conversation} key={key} />\n    // });\n\n    return newChat;\n    let chatsArr = [...props.relevantInfo, newChat]; // var conversation = { usernameInChat: newContact, type: type, lastMessage: lastMessage, time: time, image: image }\n    // <LeftChatItem usernameInChat={newContact} type={type} lastMessage={lastMessage} time={time} image={image} />\n  }\n\n  return (\n    /*#__PURE__*/\n    // {conversationsList}\n    // console.log(\"hellllee\")\n    _jsxDEV(\"div\", {\n      className: \"col-4 newtab\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_c = AddNewChat;\nexport default AddNewChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNewChat\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/chatScreen/AddNewChat.js"],"names":["React","conversations","users","LeftScreen","LeftChatItem","AddNewChat","props","isRegisteredUser","logInUsername","newContact","i","Object","keys","conversationsList","length","usernameInChat","user","username","newConversation","lastMessage","time","image","type","unshift","messages","content","createdAt","newChat","chatsArr","relevantInfo"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport conversations from '../db/Conversations';\r\nimport users from '../db/UsersDataBase';\r\nimport LeftScreen from './LeftScreen';\r\nimport LeftChatItem from './leftChatItem/LeftChatItem';\r\nimport './AddNewChat.css';\r\n\r\nfunction AddNewChat(props) {\r\n\r\n    var isRegisteredUser = false;\r\n\r\n    // If the user entered his contact's identifier username, do nothing. \r\n    if (props.logInUsername == props.newContact) {\r\n        return;\r\n    }\r\n    for (var i = 0; i < Object.keys(props.conversationsList).length; i++) {\r\n        // If the user already have a conversation with this contact, do nothing.\r\n        if (props.conversationsList[i].usernameInChat == props.newContact) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    var user;\r\n    for (var i = 0; i < Object.keys(users).length; i++) {\r\n        // If the user already have a conversation with this contact, do nothing.\r\n        if (props.logInUsername == users[i].username) {\r\n            user = users[i];\r\n        }\r\n    }\r\n\r\n\r\n    var newConversation;\r\n    for (var i = 0; i < Object.keys(users).length; i++) {\r\n        // If the user already have a conversation with this contact, do nothing.\r\n        if (props.newContact == users[i].username) {\r\n            isRegisteredUser = true;\r\n            //add its username, nickname, image\r\n            // newConversation = {\r\n            //     users: [{ username: user.username, nickname: user.nickname, image: user.image },\r\n            //     { username: users[i].username, nickname: users[i].nickname, image: users[i].image }],\r\n            //     messages: [{ type: \"\", content: \"\", createdAt: \"\" }]\r\n            // }\r\n        }\r\n    }\r\n    //If the user is not registered, do nothing.\r\n    if (!isRegisteredUser) {\r\n        return;\r\n    } else {\r\n        var usernameInChat = \"\";\r\n        var lastMessage = \"\";\r\n        var time = \"\";\r\n        var image;\r\n        var type = \"\";\r\n        conversations.unshift(newConversation);\r\n        // console.log(conversationsList);\r\n\r\n        // Adding new conversation as a LeftChatItem to relevantInfo map.\r\n        lastMessage = newConversation.messages[Object.keys(newConversation.messages).length - 1].content;\r\n        type = newConversation.messages[Object.keys(newConversation.messages).length - 1].type;\r\n        time = newConversation.messages[Object.keys(newConversation.messages).length - 1].createdAt;\r\n        image = newConversation.users[1].image;\r\n\r\n        var newChat = { usernameInChat: props.newContact, type: type, lastMessage: lastMessage, time: time, image: image };\r\n        // props.relevantInfo.unshift({ usernameInChat: props.newContact, type: type, lastMessage: lastMessage, time: time, image: image });\r\n        // props.conversationsList = props.relevantInfo.map((conversation, key) => {\r\n        //     return <LeftChatItem {...conversation} key={key} />\r\n        // });\r\n\r\n        return newChat;\r\n        let chatsArr = [...props.relevantInfo, newChat]\r\n\r\n        // var conversation = { usernameInChat: newContact, type: type, lastMessage: lastMessage, time: time, image: image }\r\n        // <LeftChatItem usernameInChat={newContact} type={type} lastMessage={lastMessage} time={time} image={image} />\r\n\r\n    }\r\n    return (\r\n        // {conversationsList}\r\n        // console.log(\"hellllee\")\r\n        <div className=\"col-4 newtab\">\r\n            <div>hello</div>\r\n            {/* <div>\r\n        //         {conversationsList}\r\n        //     </div> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddNewChat;"]},"metadata":{},"sourceType":"module"}