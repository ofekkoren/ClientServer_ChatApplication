{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\chatScreen\\\\ChatScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport './ChatScreen.css';\nimport { useState, useRef } from \"react\";\nimport LeftScreen from './LeftScreen';\nimport RightScreen from \"./RightScreen\";\nimport users from \"../db/UsersDataBase\";\nimport isUserLoggedIn from '..';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatScreen(user) {\n  _s();\n\n  if (isUserLoggedIn === 0) {} else {\n    let [currentConversation, setCurrentConversation] = useState(\"\");\n    let conversationDBRef = useRef(\"\"); //Reference to the original location of the conversation in the DB.\n\n    useEffect(() => {\n      //Applying the function only if a chat was chosen by the user.\n      if (currentConversation !== \"\") {\n        //If a new message was sent in the current chat we add this message to the corresponding array in our DB.\n        if (currentConversation.messages.length !== conversationDBRef.current.messages.length) {\n          conversationDBRef.current.messages.push(currentConversation.messages[currentConversation.messages.length - 1]);\n        } //Scrolling down to the last message when sending a new message or selecting an other chat.\n\n\n        let bottom = document.getElementById(\"lastMessage\");\n        bottom.scrollIntoView({\n          block: \"end\"\n        });\n      }\n    }, [currentConversation]);\n    user = users[0]; // TODO Used for debug,will be deleted in the future\n\n    console.log(user.username);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-chat-screen justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner-chat-cube\",\n        children: [/*#__PURE__*/_jsxDEV(LeftScreen, {\n          user: user,\n          setChat: setCurrentConversation,\n          refer: conversationDBRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RightScreen, {\n          chat: currentConversation,\n          setChat: setCurrentConversation,\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ChatScreen, \"1BD+yneWEp5AOVcrSFEjv+ACGsg=\");\n\n_c = ChatScreen;\nexport default ChatScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/chatScreen/ChatScreen.js"],"names":["React","useEffect","useState","useRef","LeftScreen","RightScreen","users","isUserLoggedIn","ChatScreen","user","currentConversation","setCurrentConversation","conversationDBRef","messages","length","current","push","bottom","document","getElementById","scrollIntoView","block","console","log","username"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kBAAP;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,cAAP,MAA2B,IAA3B;;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAAA;;AACtB,MAAIF,cAAc,KAAK,CAAvB,EAA0B,CAEzB,CAFD,MAGK;AACD,QAAI,CAACG,mBAAD,EAAsBC,sBAAtB,IAAgDT,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAIU,iBAAiB,GAAGT,MAAM,CAAC,EAAD,CAA9B,CAFC,CAEmC;;AAEpCF,IAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAIS,mBAAmB,KAAK,EAA5B,EAAgC;AAC5B;AACA,YAAIA,mBAAmB,CAACG,QAApB,CAA6BC,MAA7B,KAAwCF,iBAAiB,CAACG,OAAlB,CAA0BF,QAA1B,CAAmCC,MAA/E,EAAuF;AACnFF,UAAAA,iBAAiB,CAACG,OAAlB,CAA0BF,QAA1B,CAAmCG,IAAnC,CAAwCN,mBAAmB,CAACG,QAApB,CAA6BH,mBAAmB,CAACG,QAApB,CAA6BC,MAA7B,GAAsC,CAAnE,CAAxC;AACH,SAJ2B,CAK5B;;;AACA,YAAIG,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAb;AACAF,QAAAA,MAAM,CAACG,cAAP,CAAsB;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAtB;AACH;AACJ,KAXQ,EAWN,CAACX,mBAAD,CAXM,CAAT;AAaAD,IAAAA,IAAI,GAAGH,KAAK,CAAC,CAAD,CAAZ,CAjBC,CAiBgB;;AACjBgB,IAAAA,OAAO,CAACC,GAAR,CAAYd,IAAI,CAACe,QAAjB;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,8CAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCAEI,QAAC,UAAD;AAAY,UAAA,IAAI,EAAEf,IAAlB;AAAwB,UAAA,OAAO,EAAEE,sBAAjC;AAAyD,UAAA,KAAK,EAAEC;AAAhE;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,WAAD;AAAa,UAAA,IAAI,EAAEF,mBAAnB;AAAwC,UAAA,OAAO,EAAEC,sBAAjD;AAAyE,UAAA,IAAI,EAAEF;AAA/E;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;AACJ;;GAjCQD,U;;KAAAA,U;AAmCT,eAAeA,UAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport './ChatScreen.css';\r\nimport { useState, useRef } from \"react\";\r\nimport LeftScreen from './LeftScreen';\r\nimport RightScreen from \"./RightScreen\";\r\nimport users from \"../db/UsersDataBase\";\r\nimport isUserLoggedIn from '..';\r\n\r\nfunction ChatScreen(user) {\r\n    if (isUserLoggedIn === 0) {\r\n        \r\n    }\r\n    else {\r\n        let [currentConversation, setCurrentConversation] = useState(\"\");\r\n        let conversationDBRef = useRef(\"\"); //Reference to the original location of the conversation in the DB.\r\n\r\n        useEffect(() => {\r\n            //Applying the function only if a chat was chosen by the user.\r\n            if (currentConversation !== \"\") {\r\n                //If a new message was sent in the current chat we add this message to the corresponding array in our DB.\r\n                if (currentConversation.messages.length !== conversationDBRef.current.messages.length) {\r\n                    conversationDBRef.current.messages.push(currentConversation.messages[currentConversation.messages.length - 1])\r\n                }\r\n                //Scrolling down to the last message when sending a new message or selecting an other chat.\r\n                let bottom = document.getElementById(\"lastMessage\");\r\n                bottom.scrollIntoView({ block: \"end\" });\r\n            }\r\n        }, [currentConversation])\r\n\r\n        user = users[0]; // TODO Used for debug,will be deleted in the future\r\n        console.log(user.username);\r\n        return (\r\n            <div className=\"container-chat-screen justify-content-center\">\r\n                <div className=\"inner-chat-cube\">\r\n                    {/* <LeftScreen logInUsername=\"Ofek Koren\"/> */}\r\n                    <LeftScreen user={user} setChat={setCurrentConversation} refer={conversationDBRef} />\r\n                    <RightScreen chat={currentConversation} setChat={setCurrentConversation} user={user} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatScreen;"]},"metadata":{},"sourceType":"module"}