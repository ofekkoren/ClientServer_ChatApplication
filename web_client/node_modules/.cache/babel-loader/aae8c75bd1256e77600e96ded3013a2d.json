{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ex2\\\\clientSide\\\\src\\\\chatScreen\\\\leftScreen\\\\ChooseNewChat.js\";\nimport AddNewChat from './AddNewChat';\nimport { useState } from \"react\";\nimport { user } from \"../../logIn/LogIn\";\n/**\r\n * The function gives the option to add a new chat to the user's chats array.\r\n * @param props include the username of the user currently logged-in,\r\n * the array of conversations the user is having and a setter to this array.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChooseNewChat(props) {\n  /**\r\n   * The function addNewContact creates a new conversation that the logged-in\r\n   * user wants to have and sets the array of conversations adding this new conversation.\r\n  */\n  async function addNewContact() {\n    // Keeps the new contact's username that the user has typed.\n    var newContactUsername = document.getElementById(\"contactName\").value;\n    var newContactNickname = document.getElementById(\"contactNickname\").value;\n    var newContactServer = document.getElementById(\"contactServer\").value; // Keeps new conversation between the log-in user to the contact the user has chose,\n    // or null if there is no such user.\n\n    var responsee = await AddNewChat({\n      logInUsername: props.logInUsername,\n      conversationsList: props.conversationsList,\n      newContact: newContactUsername,\n      relevantInfo: props.relevantInfo,\n      currentListOfChats: props.currentListOfChats,\n      user: props.user,\n      newContactNickname: newContactNickname,\n      newContactServer: newContactServer\n    }); // If there is no such user, return and don't create anything.\n\n    if (responsee === \"false\") {\n      return;\n    }\n\n    let chatsArr = [...props.currentListOfChats]; // Asking for the contact to add us as a contact.\n\n    try {\n      var response = await fetch('http://' + newContactServer + '/api/Invitations', {\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          from: props.logInUsername,\n          to: newContactUsername,\n          fromServer: \"localhost:5170\"\n        })\n      });\n    } catch (err) {\n      console.log(\"errorrrrrr\", err);\n      var invalidUser = \"invalid user!\";\n      document.getElementById(\"validation\").innerHTML = invalidUser;\n      return;\n    } // If the user is not registered, announce it is invalid username.\n\n\n    if (!response || !(response.status === 201)) {\n      var invalidUser = \"invalid user!\";\n      document.getElementById(\"validation\").innerHTML = invalidUser;\n      return;\n    } // Adding the new contact as our contact in the db.\n\n\n    var response = await fetch('http://localhost:5170/api/contacts', {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: newContactUsername,\n        name: newContactNickname,\n        server: newContactServer\n      })\n    });\n\n    if (response.status !== 201) {\n      return;\n    }\n\n    var invalidUser = \"user added successfully!\";\n    document.getElementById(\"validation\").innerHTML = invalidUser; // getting the list of conversations of the current user.\n\n    var response = await fetch('http://localhost:5170/api/Users/GetAllConversationsOfUser', {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: props.logInUsername\n      })\n    });\n\n    if (!response.ok) {\n      return;\n    }\n\n    var conversations = await response.json();\n    props.listRef.current = conversations; // Setting the array of conversations to present the new chat on the scree.\n\n    props.setCurrentListOfChats(conversations);\n  }\n  /**\r\n  * The function deletes the input text that the user has written and the messsage\r\n  * he has received.\r\n  */\n\n\n  function deleteInput() {\n    document.getElementById(\"contactName\").value = \"\";\n    document.getElementById(\"contactNickname\").value = \"\";\n    document.getElementById(\"contactServer\").value = \"\";\n    document.getElementById(\"validation\").innerHTML = \"\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-4 leftScreen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal fade\",\n      id: \"add-new-contact\",\n      tabIndex: \"-1\",\n      \"aria-labelledby\": \"exampleModalLabel\",\n      \"aria-hidden\": \"true\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"modal-title\",\n              id: \"exampleModalLabel\",\n              children: \"Add new contact\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn-close\",\n              \"data-bs-dismiss\": \"modal\",\n              \"aria-label\": \"Close\",\n              onClick: deleteInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-floating\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"form-control newContact\",\n                placeholder: \"Leave a comment here\",\n                id: \"contactName\",\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"contactName\",\n                children: \"Contact's username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-floating\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"form-control newContact\",\n                placeholder: \"Leave a comment here\",\n                id: \"contactNickname\",\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"contactNickname\",\n                children: \"Contact's nickname\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-floating\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"form-control newContact\",\n                placeholder: \"Leave a comment here\",\n                id: \"contactServer\",\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"contactServer\",\n                children: \"Contact's server\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"validation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-secondary\",\n              \"data-bs-dismiss\": \"modal\",\n              onClick: deleteInput,\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-primary\",\n              onClick: addNewContact,\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n\n_c = ChooseNewChat;\nexport default ChooseNewChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChooseNewChat\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ex2/clientSide/src/chatScreen/leftScreen/ChooseNewChat.js"],"names":["AddNewChat","useState","user","ChooseNewChat","props","addNewContact","newContactUsername","document","getElementById","value","newContactNickname","newContactServer","responsee","logInUsername","conversationsList","newContact","relevantInfo","currentListOfChats","chatsArr","response","fetch","method","credentials","headers","body","JSON","stringify","from","to","fromServer","err","console","log","invalidUser","innerHTML","status","id","name","server","ok","conversations","json","listRef","current","setCurrentListOfChats","deleteInput"],"mappings":"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","sourcesContent":["\r\nimport AddNewChat from './AddNewChat';\r\nimport { useState } from \"react\";\r\nimport {user} from \"../../logIn/LogIn\";\r\n\r\n/**\r\n * The function gives the option to add a new chat to the user's chats array.\r\n * @param props include the username of the user currently logged-in,\r\n * the array of conversations the user is having and a setter to this array.\r\n */\r\nfunction ChooseNewChat(props) {\r\n    \r\n    /**\r\n     * The function addNewContact creates a new conversation that the logged-in\r\n     * user wants to have and sets the array of conversations adding this new conversation.\r\n    */\r\n    async function addNewContact() {\r\n        // Keeps the new contact's username that the user has typed.\r\n        var newContactUsername = document.getElementById(\"contactName\").value;\r\n        var newContactNickname = document.getElementById(\"contactNickname\").value;\r\n        var newContactServer = document.getElementById(\"contactServer\").value;\r\n\r\n        // Keeps new conversation between the log-in user to the contact the user has chose,\r\n        // or null if there is no such user.\r\n        var responsee = await AddNewChat({\r\n            logInUsername: props.logInUsername,\r\n            conversationsList: props.conversationsList,\r\n            newContact: newContactUsername, relevantInfo: props.relevantInfo, currentListOfChats: props.currentListOfChats,\r\n            user: props.user, newContactNickname: newContactNickname, newContactServer: newContactServer\r\n        });\r\n        // If there is no such user, return and don't create anything.\r\n        if (responsee === \"false\") {\r\n            return;\r\n        }\r\n        let chatsArr = [...props.currentListOfChats];\r\n\r\n        // Asking for the contact to add us as a contact.\r\n        try{\r\n        var response = await fetch('http://'+newContactServer+'/api/Invitations',\r\n        {\r\n          method: \"POST\",\r\n          credentials: 'include',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({\r\n            from: props.logInUsername,\r\n            to: newContactUsername,\r\n            fromServer: \"localhost:5170\"\r\n          })\r\n        })\r\n    }\r\n    catch(err) {\r\n        console.log(\"errorrrrrr\",err)\r\n        var invalidUser = \"invalid user!\"\r\n        document.getElementById(\"validation\").innerHTML = invalidUser;\r\n        return;\r\n    }\r\n        \r\n        // If the user is not registered, announce it is invalid username.\r\n        if(!response || !(response.status === 201)) {\r\n            var invalidUser = \"invalid user!\"\r\n            document.getElementById(\"validation\").innerHTML = invalidUser;\r\n            return;\r\n        }\r\n\r\n        // Adding the new contact as our contact in the db.\r\n        var response = await fetch('http://localhost:5170/api/contacts',\r\n        {\r\n          method: \"POST\",\r\n          credentials: 'include',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({\r\n            id: newContactUsername,\r\n            name: newContactNickname,\r\n            server: newContactServer\r\n          })\r\n        })\r\n        if(response.status !== 201) {\r\n            return;\r\n        } \r\n        var invalidUser = \"user added successfully!\"\r\n        document.getElementById(\"validation\").innerHTML = invalidUser;\r\n\r\n        // getting the list of conversations of the current user.\r\n        var response = await fetch('http://localhost:5170/api/Users/GetAllConversationsOfUser',\r\n        {\r\n          method: \"POST\",\r\n          credentials: 'include',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({\r\n            id: props.logInUsername,\r\n          })\r\n        })\r\n        if(!response.ok) {\r\n            return;\r\n        }\r\n        var conversations = await response.json();\r\n        props.listRef.current=conversations\r\n        // Setting the array of conversations to present the new chat on the scree.\r\n        props.setCurrentListOfChats(conversations);\r\n    }\r\n\r\n    /**\r\n    * The function deletes the input text that the user has written and the messsage\r\n    * he has received.\r\n    */\r\n    function deleteInput() {\r\n        document.getElementById(\"contactName\").value = \"\";\r\n        document.getElementById(\"contactNickname\").value = \"\";\r\n        document.getElementById(\"contactServer\").value = \"\";\r\n        document.getElementById(\"validation\").innerHTML = \"\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-4 leftScreen\">\r\n            <div className=\"modal fade\" id=\"add-new-contact\" tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">Add new contact</h5>\r\n\r\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={deleteInput}></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <div className=\"form-floating\">\r\n                                <input type=\"text\" className=\"form-control newContact\" placeholder=\"Leave a comment here\" id=\"contactName\" required></input>\r\n                                <label htmlFor=\"contactName\">Contact's username</label>\r\n                            </div>\r\n                            <br></br>\r\n                            <div className=\"form-floating\">\r\n                                <input type=\"text\" className=\"form-control newContact\" placeholder=\"Leave a comment here\" id=\"contactNickname\" required></input>\r\n                                <label htmlFor=\"contactNickname\">Contact's nickname</label>\r\n                            </div>\r\n                            <br></br>\r\n                            <div className=\"form-floating\">\r\n                                <input type=\"text\" className=\"form-control newContact\" placeholder=\"Leave a comment here\" id=\"contactServer\" required></input>\r\n                                <label htmlFor=\"contactServer\">Contact's server</label>\r\n                            </div>\r\n                            <div id=\"validation\"></div>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\" onClick={deleteInput}>Close</button>\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={addNewContact}>Add</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ChooseNewChat;"]},"metadata":{},"sourceType":"module"}