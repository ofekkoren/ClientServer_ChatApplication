{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\"; // Not exported from 'index', this type is internal.\n\n/** @private */\n\nexport class LongPollingTransport {\n  constructor(httpClient, accessTokenFactory, logger, options) {\n    this._httpClient = httpClient;\n    this._accessTokenFactory = accessTokenFactory;\n    this._logger = logger;\n    this._pollAbort = new AbortController();\n    this._options = options;\n    this._running = false;\n    this.onreceive = null;\n    this.onclose = null;\n  } // This is an internal type, not exported from 'index' so this is really just internal.\n\n\n  get pollAborted() {\n    return this._pollAbort.aborted;\n  }\n\n  async connect(url, transferFormat) {\n    Arg.isRequired(url, \"url\");\n    Arg.isRequired(transferFormat, \"transferFormat\");\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n    this._url = url;\n\n    this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\"); // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n\n\n    if (transferFormat === TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\") {\n      throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n    }\n\n    const [name, value] = getUserAgentHeader();\n    const headers = {\n      [name]: value,\n      ...this._options.headers\n    };\n    const pollOptions = {\n      abortSignal: this._pollAbort.signal,\n      headers,\n      timeout: 100000,\n      withCredentials: this._options.withCredentials\n    };\n\n    if (transferFormat === TransferFormat.Binary) {\n      pollOptions.responseType = \"arraybuffer\";\n    }\n\n    const token = await this._getAccessToken();\n\n    this._updateHeaderToken(pollOptions, token); // Make initial long polling request\n    // Server uses first long polling request to finish initializing connection and it returns without data\n\n\n    const pollUrl = `${url}&_=${Date.now()}`;\n\n    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n\n    const response = await this._httpClient.get(pollUrl, pollOptions);\n\n    if (response.statusCode !== 200) {\n      this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`); // Mark running as false so that the poll immediately ends and runs the close logic\n\n\n      this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n      this._running = false;\n    } else {\n      this._running = true;\n    }\n\n    this._receiving = this._poll(this._url, pollOptions);\n  }\n\n  async _getAccessToken() {\n    if (this._accessTokenFactory) {\n      return await this._accessTokenFactory();\n    }\n\n    return null;\n  }\n\n  _updateHeaderToken(request, token) {\n    if (!request.headers) {\n      request.headers = {};\n    }\n\n    if (token) {\n      request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\n      return;\n    }\n\n    if (request.headers[HeaderNames.Authorization]) {\n      delete request.headers[HeaderNames.Authorization];\n    }\n  }\n\n  async _poll(url, pollOptions) {\n    try {\n      while (this._running) {\n        // We have to get the access token on each poll, in case it changes\n        const token = await this._getAccessToken();\n\n        this._updateHeaderToken(pollOptions, token);\n\n        try {\n          const pollUrl = `${url}&_=${Date.now()}`;\n\n          this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n\n          const response = await this._httpClient.get(pollUrl, pollOptions);\n\n          if (response.statusCode === 204) {\n            this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n\n            this._running = false;\n          } else if (response.statusCode !== 200) {\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`); // Unexpected status code\n\n\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n            this._running = false;\n          } else {\n            // Process the response\n            if (response.content) {\n              this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\n\n              if (this.onreceive) {\n                this.onreceive(response.content);\n              }\n            } else {\n              // This is another way timeout manifest.\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n            }\n          }\n        } catch (e) {\n          if (!this._running) {\n            // Log but disregard errors that occur after stopping\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\n          } else {\n            if (e instanceof TimeoutError) {\n              // Ignore timeouts and reissue the poll.\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n            } else {\n              // Close the connection with the error as the result.\n              this._closeError = e;\n              this._running = false;\n            }\n          }\n        }\n      }\n    } finally {\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\"); // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n      // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n\n\n      if (!this.pollAborted) {\n        this._raiseOnClose();\n      }\n    }\n  }\n\n  async send(data) {\n    if (!this._running) {\n      return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n    }\n\n    return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\n  }\n\n  async stop() {\n    this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\"); // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n\n\n    this._running = false;\n\n    this._pollAbort.abort();\n\n    try {\n      await this._receiving; // Send DELETE to clean up long polling on the server\n\n      this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\n\n      const headers = {};\n      const [name, value] = getUserAgentHeader();\n      headers[name] = value;\n      const deleteOptions = {\n        headers: { ...headers,\n          ...this._options.headers\n        },\n        timeout: this._options.timeout,\n        withCredentials: this._options.withCredentials\n      };\n      const token = await this._getAccessToken();\n\n      this._updateHeaderToken(deleteOptions, token);\n\n      await this._httpClient.delete(this._url, deleteOptions);\n\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\n    } finally {\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\"); // Raise close event here instead of in polling\n      // It needs to happen after the DELETE request is sent\n\n\n      this._raiseOnClose();\n    }\n  }\n\n  _raiseOnClose() {\n    if (this.onclose) {\n      let logMessage = \"(LongPolling transport) Firing onclose event.\";\n\n      if (this._closeError) {\n        logMessage += \" Error: \" + this._closeError;\n      }\n\n      this._logger.log(LogLevel.Trace, logMessage);\n\n      this.onclose(this._closeError);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["AbortController","HttpError","TimeoutError","HeaderNames","LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","sendMessage","LongPollingTransport","constructor","httpClient","accessTokenFactory","logger","options","_httpClient","_accessTokenFactory","_logger","_pollAbort","_options","_running","onreceive","onclose","pollAborted","aborted","connect","url","transferFormat","isRequired","isIn","_url","log","Trace","Binary","XMLHttpRequest","responseType","Error","name","value","headers","pollOptions","abortSignal","signal","timeout","withCredentials","token","_getAccessToken","_updateHeaderToken","pollUrl","Date","now","response","get","statusCode","_closeError","statusText","_receiving","_poll","request","Authorization","Information","content","logMessageContent","e","message","_raiseOnClose","send","data","Promise","reject","stop","abort","deleteOptions","delete","logMessage"],"sources":["C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\node_modules\\@microsoft\\signalr\\src\\LongPollingTransport.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private readonly _pollAbort: AbortController;\r\n\r\n    private _url?: string;\r\n    private _running: boolean;\r\n    private _receiving?: Promise<void>;\r\n    private _closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted(): boolean {\r\n        return this._pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n\r\n        this._running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._url = url;\r\n\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this._getAccessToken();\r\n        this._updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        } else {\r\n            this._running = true;\r\n        }\r\n\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n\r\n    private async _getAccessToken(): Promise<string | null> {\r\n        if (this._accessTokenFactory) {\r\n            return await this._accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        if (request.headers[HeaderNames.Authorization]) {\r\n            delete request.headers[HeaderNames.Authorization];\r\n        }\r\n    }\r\n\r\n    private async _poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this._running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this._getAccessToken();\r\n                this._updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this._running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent!)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url!, this._accessTokenFactory, data, this._options);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n\r\n        try {\r\n            await this._receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n\r\n            const headers: {[k: string]: string} = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            const token = await this._getAccessToken();\r\n            this._updateHeaderToken(deleteOptions, token);\r\n            await this._httpClient.delete(this._url!, deleteOptions);\r\n\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}