{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { Subject } from \"./Subject\";\nimport { Arg, getErrorString, Platform } from \"./Utils\";\nconst DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\nconst DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;\n/** Describes the current state of the {@link HubConnection} to the server. */\n\nexport var HubConnectionState;\n\n(function (HubConnectionState) {\n  /** The hub connection is disconnected. */\n  HubConnectionState[\"Disconnected\"] = \"Disconnected\";\n  /** The hub connection is connecting. */\n\n  HubConnectionState[\"Connecting\"] = \"Connecting\";\n  /** The hub connection is connected. */\n\n  HubConnectionState[\"Connected\"] = \"Connected\";\n  /** The hub connection is disconnecting. */\n\n  HubConnectionState[\"Disconnecting\"] = \"Disconnecting\";\n  /** The hub connection is reconnecting. */\n\n  HubConnectionState[\"Reconnecting\"] = \"Reconnecting\";\n})(HubConnectionState || (HubConnectionState = {}));\n/** Represents a connection to a SignalR Hub. */\n\n\nexport class HubConnection {\n  constructor(connection, logger, protocol, reconnectPolicy) {\n    this._nextKeepAlive = 0;\n\n    this._freezeEventListener = () => {\n      this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\n    };\n\n    Arg.isRequired(connection, \"connection\");\n    Arg.isRequired(logger, \"logger\");\n    Arg.isRequired(protocol, \"protocol\");\n    this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\n    this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\n    this._logger = logger;\n    this._protocol = protocol;\n    this.connection = connection;\n    this._reconnectPolicy = reconnectPolicy;\n    this._handshakeProtocol = new HandshakeProtocol();\n\n    this.connection.onreceive = data => this._processIncomingData(data);\n\n    this.connection.onclose = error => this._connectionClosed(error);\n\n    this._callbacks = {};\n    this._methods = {};\n    this._closedCallbacks = [];\n    this._reconnectingCallbacks = [];\n    this._reconnectedCallbacks = [];\n    this._invocationId = 0;\n    this._receivedHandshakeResponse = false;\n    this._connectionState = HubConnectionState.Disconnected;\n    this._connectionStarted = false;\n    this._cachedPingMessage = this._protocol.writeMessage({\n      type: MessageType.Ping\n    });\n  }\n  /** @internal */\n  // Using a public static factory method means we can have a private constructor and an _internal_\n  // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\n  // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\n  // public parameter-less constructor.\n\n\n  static create(connection, logger, protocol, reconnectPolicy) {\n    return new HubConnection(connection, logger, protocol, reconnectPolicy);\n  }\n  /** Indicates the state of the {@link HubConnection} to the server. */\n\n\n  get state() {\n    return this._connectionState;\n  }\n  /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n   *  in the disconnected state or if the negotiation step was skipped.\r\n   */\n\n\n  get connectionId() {\n    return this.connection ? this.connection.connectionId || null : null;\n  }\n  /** Indicates the url of the {@link HubConnection} to the server. */\n\n\n  get baseUrl() {\n    return this.connection.baseUrl || \"\";\n  }\n  /**\r\n   * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n   * Reconnecting states.\r\n   * @param {string} url The url to connect to.\r\n   */\n\n\n  set baseUrl(url) {\n    if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\n      throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\n    }\n\n    if (!url) {\n      throw new Error(\"The HubConnection url must be a valid url.\");\n    }\n\n    this.connection.baseUrl = url;\n  }\n  /** Starts the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n   */\n\n\n  start() {\n    this._startPromise = this._startWithStateTransitions();\n    return this._startPromise;\n  }\n\n  async _startWithStateTransitions() {\n    if (this._connectionState !== HubConnectionState.Disconnected) {\n      return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\n    }\n\n    this._connectionState = HubConnectionState.Connecting;\n\n    this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\n\n    try {\n      await this._startInternal();\n\n      if (Platform.isBrowser) {\n        // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\n        window.document.addEventListener(\"freeze\", this._freezeEventListener);\n      }\n\n      this._connectionState = HubConnectionState.Connected;\n      this._connectionStarted = true;\n\n      this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\n    } catch (e) {\n      this._connectionState = HubConnectionState.Disconnected;\n\n      this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\n\n      return Promise.reject(e);\n    }\n  }\n\n  async _startInternal() {\n    this._stopDuringStartError = undefined;\n    this._receivedHandshakeResponse = false; // Set up the promise before any connection is (re)started otherwise it could race with received messages\n\n    const handshakePromise = new Promise((resolve, reject) => {\n      this._handshakeResolver = resolve;\n      this._handshakeRejecter = reject;\n    });\n    await this.connection.start(this._protocol.transferFormat);\n\n    try {\n      const handshakeRequest = {\n        protocol: this._protocol.name,\n        version: this._protocol.version\n      };\n\n      this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\n\n      await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\n\n      this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`); // defensively cleanup timeout in case we receive a message from the server before we finish start\n\n\n      this._cleanupTimeout();\n\n      this._resetTimeoutPeriod();\n\n      this._resetKeepAliveInterval();\n\n      await handshakePromise; // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\n      // being rejected on close, because this continuation can run after both the handshake completed successfully\n      // and the connection was closed.\n\n      if (this._stopDuringStartError) {\n        // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\n        // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\n        // will cause the calling continuation to get scheduled to run later.\n        // eslint-disable-next-line @typescript-eslint/no-throw-literal\n        throw this._stopDuringStartError;\n      }\n    } catch (e) {\n      this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\n\n      this._cleanupTimeout();\n\n      this._cleanupPingTimer(); // HttpConnection.stop() should not complete until after the onclose callback is invoked.\n      // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\n\n\n      await this.connection.stop(e);\n      throw e;\n    }\n  }\n  /** Stops the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n   */\n\n\n  async stop() {\n    // Capture the start promise before the connection might be restarted in an onclose callback.\n    const startPromise = this._startPromise;\n    this._stopPromise = this._stopInternal();\n    await this._stopPromise;\n\n    try {\n      // Awaiting undefined continues immediately\n      await startPromise;\n    } catch (e) {// This exception is returned to the user as a rejected Promise from the start method.\n    }\n  }\n\n  _stopInternal(error) {\n    if (this._connectionState === HubConnectionState.Disconnected) {\n      this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\n\n      return Promise.resolve();\n    }\n\n    if (this._connectionState === HubConnectionState.Disconnecting) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\n\n      return this._stopPromise;\n    }\n\n    this._connectionState = HubConnectionState.Disconnecting;\n\n    this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\n\n    if (this._reconnectDelayHandle) {\n      // We're in a reconnect delay which means the underlying connection is currently already stopped.\n      // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\n      // fire the onclose callbacks.\n      this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\n\n      clearTimeout(this._reconnectDelayHandle);\n      this._reconnectDelayHandle = undefined;\n\n      this._completeClose();\n\n      return Promise.resolve();\n    }\n\n    this._cleanupTimeout();\n\n    this._cleanupPingTimer();\n\n    this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\"); // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\n    // or the onclose callback is invoked. The onclose callback will transition the HubConnection\n    // to the disconnected state if need be before HttpConnection.stop() completes.\n\n    return this.connection.stop(error);\n  }\n  /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n   *\r\n   * @typeparam T The type of the items returned by the server.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n   */\n\n\n  stream(methodName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    const [streams, streamIds] = this._replaceStreamingParams(args);\n\n    const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds); // eslint-disable-next-line prefer-const\n\n\n    let promiseQueue;\n    const subject = new Subject();\n\n    subject.cancelCallback = () => {\n      const cancelInvocation = this._createCancelInvocation(invocationDescriptor.invocationId);\n\n      delete this._callbacks[invocationDescriptor.invocationId];\n      return promiseQueue.then(() => {\n        return this._sendWithProtocol(cancelInvocation);\n      });\n    };\n\n    this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\n      if (error) {\n        subject.error(error);\n        return;\n      } else if (invocationEvent) {\n        // invocationEvent will not be null when an error is not passed to the callback\n        if (invocationEvent.type === MessageType.Completion) {\n          if (invocationEvent.error) {\n            subject.error(new Error(invocationEvent.error));\n          } else {\n            subject.complete();\n          }\n        } else {\n          subject.next(invocationEvent.item);\n        }\n      }\n    };\n\n    promiseQueue = this._sendWithProtocol(invocationDescriptor).catch(e => {\n      subject.error(e);\n      delete this._callbacks[invocationDescriptor.invocationId];\n    });\n\n    this._launchStreams(streams, promiseQueue);\n\n    return subject;\n  }\n\n  _sendMessage(message) {\n    this._resetKeepAliveInterval();\n\n    return this.connection.send(message);\n  }\n  /**\r\n   * Sends a js object to the server.\r\n   * @param message The js object to serialize and send.\r\n   */\n\n\n  _sendWithProtocol(message) {\n    return this._sendMessage(this._protocol.writeMessage(message));\n  }\n  /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n   *\r\n   * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n   * be processing the invocation.\r\n   *\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n   */\n\n\n  send(methodName) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    const [streams, streamIds] = this._replaceStreamingParams(args);\n\n    const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\n\n    this._launchStreams(streams, sendPromise);\n\n    return sendPromise;\n  }\n  /** Invokes a hub method on the server using the specified name and arguments.\r\n   *\r\n   * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n   * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n   * resolving the Promise.\r\n   *\r\n   * @typeparam T The expected return type.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n   */\n\n\n  invoke(methodName) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    const [streams, streamIds] = this._replaceStreamingParams(args);\n\n    const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\n\n    const p = new Promise((resolve, reject) => {\n      // invocationId will always have a value for a non-blocking invocation\n      this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\n        if (error) {\n          reject(error);\n          return;\n        } else if (invocationEvent) {\n          // invocationEvent will not be null when an error is not passed to the callback\n          if (invocationEvent.type === MessageType.Completion) {\n            if (invocationEvent.error) {\n              reject(new Error(invocationEvent.error));\n            } else {\n              resolve(invocationEvent.result);\n            }\n          } else {\n            reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\n          }\n        }\n      };\n\n      const promiseQueue = this._sendWithProtocol(invocationDescriptor).catch(e => {\n        reject(e); // invocationId will always have a value for a non-blocking invocation\n\n        delete this._callbacks[invocationDescriptor.invocationId];\n      });\n\n      this._launchStreams(streams, promiseQueue);\n    });\n    return p;\n  }\n  /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n   *\r\n   * @param {string} methodName The name of the hub method to define.\r\n   * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n   */\n\n\n  on(methodName, newMethod) {\n    if (!methodName || !newMethod) {\n      return;\n    }\n\n    methodName = methodName.toLowerCase();\n\n    if (!this._methods[methodName]) {\n      this._methods[methodName] = [];\n    } // Preventing adding the same handler multiple times.\n\n\n    if (this._methods[methodName].indexOf(newMethod) !== -1) {\n      return;\n    }\n\n    this._methods[methodName].push(newMethod);\n  }\n\n  off(methodName, method) {\n    if (!methodName) {\n      return;\n    }\n\n    methodName = methodName.toLowerCase();\n    const handlers = this._methods[methodName];\n\n    if (!handlers) {\n      return;\n    }\n\n    if (method) {\n      const removeIdx = handlers.indexOf(method);\n\n      if (removeIdx !== -1) {\n        handlers.splice(removeIdx, 1);\n\n        if (handlers.length === 0) {\n          delete this._methods[methodName];\n        }\n      }\n    } else {\n      delete this._methods[methodName];\n    }\n  }\n  /** Registers a handler that will be invoked when the connection is closed.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n   */\n\n\n  onclose(callback) {\n    if (callback) {\n      this._closedCallbacks.push(callback);\n    }\n  }\n  /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n   */\n\n\n  onreconnecting(callback) {\n    if (callback) {\n      this._reconnectingCallbacks.push(callback);\n    }\n  }\n  /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n   */\n\n\n  onreconnected(callback) {\n    if (callback) {\n      this._reconnectedCallbacks.push(callback);\n    }\n  }\n\n  _processIncomingData(data) {\n    this._cleanupTimeout();\n\n    if (!this._receivedHandshakeResponse) {\n      data = this._processHandshakeResponse(data);\n      this._receivedHandshakeResponse = true;\n    } // Data may have all been read when processing handshake response\n\n\n    if (data) {\n      // Parse the messages\n      const messages = this._protocol.parseMessages(data, this._logger);\n\n      for (const message of messages) {\n        switch (message.type) {\n          case MessageType.Invocation:\n            this._invokeClientMethod(message);\n\n            break;\n\n          case MessageType.StreamItem:\n          case MessageType.Completion:\n            {\n              const callback = this._callbacks[message.invocationId];\n\n              if (callback) {\n                if (message.type === MessageType.Completion) {\n                  delete this._callbacks[message.invocationId];\n                }\n\n                try {\n                  callback(message);\n                } catch (e) {\n                  this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\n                }\n              }\n\n              break;\n            }\n\n          case MessageType.Ping:\n            // Don't care about pings\n            break;\n\n          case MessageType.Close:\n            {\n              this._logger.log(LogLevel.Information, \"Close message received from server.\");\n\n              const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\n\n              if (message.allowReconnect === true) {\n                // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\n                // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this.connection.stop(error);\n              } else {\n                // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\n                this._stopPromise = this._stopInternal(error);\n              }\n\n              break;\n            }\n\n          default:\n            this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\n\n            break;\n        }\n      }\n    }\n\n    this._resetTimeoutPeriod();\n  }\n\n  _processHandshakeResponse(data) {\n    let responseMessage;\n    let remainingData;\n\n    try {\n      [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\n    } catch (e) {\n      const message = \"Error parsing handshake response: \" + e;\n\n      this._logger.log(LogLevel.Error, message);\n\n      const error = new Error(message);\n\n      this._handshakeRejecter(error);\n\n      throw error;\n    }\n\n    if (responseMessage.error) {\n      const message = \"Server returned handshake error: \" + responseMessage.error;\n\n      this._logger.log(LogLevel.Error, message);\n\n      const error = new Error(message);\n\n      this._handshakeRejecter(error);\n\n      throw error;\n    } else {\n      this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\n    }\n\n    this._handshakeResolver();\n\n    return remainingData;\n  }\n\n  _resetKeepAliveInterval() {\n    if (this.connection.features.inherentKeepAlive) {\n      return;\n    } // Set the time we want the next keep alive to be sent\n    // Timer will be setup on next message receive\n\n\n    this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\n\n    this._cleanupPingTimer();\n  }\n\n  _resetTimeoutPeriod() {\n    if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\n      // Set the timeout timer\n      this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds); // Set keepAlive timer if there isn't one\n\n      if (this._pingServerHandle === undefined) {\n        let nextPing = this._nextKeepAlive - new Date().getTime();\n\n        if (nextPing < 0) {\n          nextPing = 0;\n        } // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\n\n\n        this._pingServerHandle = setTimeout(async () => {\n          if (this._connectionState === HubConnectionState.Connected) {\n            try {\n              await this._sendMessage(this._cachedPingMessage);\n            } catch {\n              // We don't care about the error. It should be seen elsewhere in the client.\n              // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\n              this._cleanupPingTimer();\n            }\n          }\n        }, nextPing);\n      }\n    }\n  } // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n  serverTimeout() {\n    // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\n    // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\n  }\n\n  _invokeClientMethod(invocationMessage) {\n    const methods = this._methods[invocationMessage.target.toLowerCase()];\n\n    if (methods) {\n      try {\n        methods.forEach(m => m.apply(this, invocationMessage.arguments));\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\n      }\n\n      if (invocationMessage.invocationId) {\n        // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\n        const message = \"Server requested a response, which is not supported in this version of the client.\";\n\n        this._logger.log(LogLevel.Error, message); // We don't want to wait on the stop itself.\n\n\n        this._stopPromise = this._stopInternal(new Error(message));\n      }\n    } else {\n      this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\n    }\n  }\n\n  _connectionClosed(error) {\n    this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`); // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\n\n\n    this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\"); // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\n    // If it has already completed, this should just noop.\n\n    if (this._handshakeResolver) {\n      this._handshakeResolver();\n    }\n\n    this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\n\n    this._cleanupTimeout();\n\n    this._cleanupPingTimer();\n\n    if (this._connectionState === HubConnectionState.Disconnecting) {\n      this._completeClose(error);\n    } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._reconnect(error);\n    } else if (this._connectionState === HubConnectionState.Connected) {\n      this._completeClose(error);\n    } // If none of the above if conditions were true were called the HubConnection must be in either:\n    // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\n    // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\n    //    and potentially continue the reconnect() loop.\n    // 3. The Disconnected state in which case we're already done.\n\n  }\n\n  _completeClose(error) {\n    if (this._connectionStarted) {\n      this._connectionState = HubConnectionState.Disconnected;\n      this._connectionStarted = false;\n\n      if (Platform.isBrowser) {\n        window.document.removeEventListener(\"freeze\", this._freezeEventListener);\n      }\n\n      try {\n        this._closedCallbacks.forEach(c => c.apply(this, [error]));\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\n      }\n    }\n  }\n\n  async _reconnect(error) {\n    const reconnectStartTime = Date.now();\n    let previousReconnectAttempts = 0;\n    let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\n\n    let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\n\n    if (nextRetryDelay === null) {\n      this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\n\n      this._completeClose(error);\n\n      return;\n    }\n\n    this._connectionState = HubConnectionState.Reconnecting;\n\n    if (error) {\n      this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\n    } else {\n      this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\n    }\n\n    if (this._reconnectingCallbacks.length !== 0) {\n      try {\n        this._reconnectingCallbacks.forEach(c => c.apply(this, [error]));\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\n      } // Exit early if an onreconnecting callback called connection.stop().\n\n\n      if (this._connectionState !== HubConnectionState.Reconnecting) {\n        this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\n\n        return;\n      }\n    }\n\n    while (nextRetryDelay !== null) {\n      this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\n\n      await new Promise(resolve => {\n        this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);\n      });\n      this._reconnectDelayHandle = undefined;\n\n      if (this._connectionState !== HubConnectionState.Reconnecting) {\n        this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\n\n        return;\n      }\n\n      try {\n        await this._startInternal();\n        this._connectionState = HubConnectionState.Connected;\n\n        this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\n\n        if (this._reconnectedCallbacks.length !== 0) {\n          try {\n            this._reconnectedCallbacks.forEach(c => c.apply(this, [this.connection.connectionId]));\n          } catch (e) {\n            this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\n          }\n        }\n\n        return;\n      } catch (e) {\n        this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\n\n        if (this._connectionState !== HubConnectionState.Reconnecting) {\n          this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`); // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\n\n\n          if (this._connectionState === HubConnectionState.Disconnecting) {\n            this._completeClose();\n          }\n\n          return;\n        }\n\n        retryError = e instanceof Error ? e : new Error(e.toString());\n        nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\n      }\n    }\n\n    this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\n\n    this._completeClose();\n  }\n\n  _getNextRetryDelay(previousRetryCount, elapsedMilliseconds, retryReason) {\n    try {\n      return this._reconnectPolicy.nextRetryDelayInMilliseconds({\n        elapsedMilliseconds,\n        previousRetryCount,\n        retryReason\n      });\n    } catch (e) {\n      this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\n\n      return null;\n    }\n  }\n\n  _cancelCallbacksWithError(error) {\n    const callbacks = this._callbacks;\n    this._callbacks = {};\n    Object.keys(callbacks).forEach(key => {\n      const callback = callbacks[key];\n\n      try {\n        callback(null, error);\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\n      }\n    });\n  }\n\n  _cleanupPingTimer() {\n    if (this._pingServerHandle) {\n      clearTimeout(this._pingServerHandle);\n      this._pingServerHandle = undefined;\n    }\n  }\n\n  _cleanupTimeout() {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle);\n    }\n  }\n\n  _createInvocation(methodName, args, nonblocking, streamIds) {\n    if (nonblocking) {\n      if (streamIds.length !== 0) {\n        return {\n          arguments: args,\n          streamIds,\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      } else {\n        return {\n          arguments: args,\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      }\n    } else {\n      const invocationId = this._invocationId;\n      this._invocationId++;\n\n      if (streamIds.length !== 0) {\n        return {\n          arguments: args,\n          invocationId: invocationId.toString(),\n          streamIds,\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      } else {\n        return {\n          arguments: args,\n          invocationId: invocationId.toString(),\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      }\n    }\n  }\n\n  _launchStreams(streams, promiseQueue) {\n    if (streams.length === 0) {\n      return;\n    } // Synchronize stream data so they arrive in-order on the server\n\n\n    if (!promiseQueue) {\n      promiseQueue = Promise.resolve();\n    } // We want to iterate over the keys, since the keys are the stream ids\n    // eslint-disable-next-line guard-for-in\n\n\n    for (const streamId in streams) {\n      streams[streamId].subscribe({\n        complete: () => {\n          promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\n        },\n        error: err => {\n          let message;\n\n          if (err instanceof Error) {\n            message = err.message;\n          } else if (err && err.toString) {\n            message = err.toString();\n          } else {\n            message = \"Unknown error\";\n          }\n\n          promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\n        },\n        next: item => {\n          promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\n        }\n      });\n    }\n  }\n\n  _replaceStreamingParams(args) {\n    const streams = [];\n    const streamIds = [];\n\n    for (let i = 0; i < args.length; i++) {\n      const argument = args[i];\n\n      if (this._isObservable(argument)) {\n        const streamId = this._invocationId;\n        this._invocationId++; // Store the stream for later use\n\n        streams[streamId] = argument;\n        streamIds.push(streamId.toString()); // remove stream from args\n\n        args.splice(i, 1);\n      }\n    }\n\n    return [streams, streamIds];\n  }\n\n  _isObservable(arg) {\n    // This allows other stream implementations to just work (like rxjs)\n    return arg && arg.subscribe && typeof arg.subscribe === \"function\";\n  }\n\n  _createStreamInvocation(methodName, args, streamIds) {\n    const invocationId = this._invocationId;\n    this._invocationId++;\n\n    if (streamIds.length !== 0) {\n      return {\n        arguments: args,\n        invocationId: invocationId.toString(),\n        streamIds,\n        target: methodName,\n        type: MessageType.StreamInvocation\n      };\n    } else {\n      return {\n        arguments: args,\n        invocationId: invocationId.toString(),\n        target: methodName,\n        type: MessageType.StreamInvocation\n      };\n    }\n  }\n\n  _createCancelInvocation(id) {\n    return {\n      invocationId: id,\n      type: MessageType.CancelInvocation\n    };\n  }\n\n  _createStreamItemMessage(id, item) {\n    return {\n      invocationId: id,\n      item,\n      type: MessageType.StreamItem\n    };\n  }\n\n  _createCompletionMessage(id, error, result) {\n    if (error) {\n      return {\n        error,\n        invocationId: id,\n        type: MessageType.Completion\n      };\n    }\n\n    return {\n      invocationId: id,\n      result,\n      type: MessageType.Completion\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["HandshakeProtocol","MessageType","LogLevel","Subject","Arg","getErrorString","Platform","DEFAULT_TIMEOUT_IN_MS","DEFAULT_PING_INTERVAL_IN_MS","HubConnectionState","HubConnection","constructor","connection","logger","protocol","reconnectPolicy","_logger","log","Warning","isRequired","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","_protocol","_reconnectPolicy","_handshakeProtocol","onreceive","data","_processIncomingData","onclose","error","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","_connectionState","Disconnected","_connectionStarted","_cachedPingMessage","writeMessage","type","Ping","create","state","connectionId","baseUrl","url","Reconnecting","Error","start","_startPromise","_startWithStateTransitions","Promise","reject","Connecting","Debug","_startInternal","isBrowser","window","document","addEventListener","_freezeEventListener","Connected","e","_stopDuringStartError","undefined","handshakePromise","resolve","_handshakeResolver","_handshakeRejecter","transferFormat","handshakeRequest","name","version","_sendMessage","writeHandshakeRequest","Information","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_cleanupPingTimer","stop","startPromise","_stopPromise","_stopInternal","Disconnecting","_reconnectDelayHandle","clearTimeout","_completeClose","stream","methodName","args","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","subject","cancelCallback","cancelInvocation","_createCancelInvocation","invocationId","then","_sendWithProtocol","invocationEvent","Completion","complete","next","item","catch","_launchStreams","message","send","sendPromise","_createInvocation","invoke","p","result","on","newMethod","toLowerCase","indexOf","push","off","method","handlers","removeIdx","splice","length","callback","onreconnecting","onreconnected","_processHandshakeResponse","messages","parseMessages","Invocation","_invokeClientMethod","StreamItem","Close","allowReconnect","responseMessage","remainingData","parseHandshakeResponse","features","inherentKeepAlive","_nextKeepAlive","Date","getTime","_timeoutHandle","setTimeout","serverTimeout","_pingServerHandle","nextPing","invocationMessage","methods","target","forEach","m","apply","arguments","_cancelCallbacksWithError","_reconnect","removeEventListener","c","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","toString","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","callbacks","Object","keys","key","nonblocking","streamId","subscribe","_createCompletionMessage","err","_createStreamItemMessage","i","argument","_isObservable","arg","StreamInvocation","id","CancelInvocation"],"sources":["C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\node_modules\\@microsoft\\signalr\\src\\HubConnection.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly _cachedPingMessage: string | ArrayBuffer;\r\n    // Needs to not start with _ for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private readonly connection: IConnection;\r\n    private readonly _logger: ILogger;\r\n    private readonly _reconnectPolicy?: IRetryPolicy;\r\n    private _protocol: IHubProtocol;\r\n    private _handshakeProtocol: HandshakeProtocol;\r\n    private _callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private _methods: { [name: string]: ((...args: any[]) => void)[] };\r\n    private _invocationId: number;\r\n\r\n    private _closedCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectingCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectedCallbacks: ((connectionId?: string) => void)[];\r\n\r\n    private _receivedHandshakeResponse: boolean;\r\n    private _handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private _handshakeRejecter!: (reason?: any) => void;\r\n    private _stopDuringStartError?: Error;\r\n\r\n    private _connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private _startPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _nextKeepAlive: number = 0;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private _reconnectDelayHandle?: any;\r\n    private _timeoutHandle?: any;\r\n    private _pingServerHandle?: any;\r\n\r\n    private _freezeEventListener = () =>\r\n    {\r\n        this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n    };\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     * The ping will happen at most as often as the server pings.\r\n     * If the server pings every 5 seconds, a value lower than 5 will ping every 5 seconds.\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this._processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this._connectionClosed(error);\r\n\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n\r\n    private async _startWithStateTransitions(): Promise<void> {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this._startInternal();\r\n\r\n            if (Platform.isBrowser) {\r\n                // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                window.document.addEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this._protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this._protocol.name,\r\n                version: this._protocol.version,\r\n            };\r\n\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private _stopInternal(error?: Error): Promise<void> {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise!;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue: Promise<void>;\r\n\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this._launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private _sendMessage(message: any) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private _sendWithProtocol(message: any) {\r\n        return this._sendMessage(this._protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n\r\n        this._launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this._callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void): void {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this._methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void): void {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private _processIncomingData(data: any) {\r\n        this._cleanupTimeout();\r\n\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            } catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._resetTimeoutPeriod();\r\n    }\r\n\r\n    private _processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n\r\n        this._cleanupPingTimer();\r\n    }\r\n\r\n    private _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined)\r\n            {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        } catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private _invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this._methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this._logger.log(LogLevel.Error, message);\r\n\r\n                // We don't want to wait on the stop itself.\r\n                this._stopPromise = this._stopInternal(new Error(message));\r\n            }\r\n        } else {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private _connectionClosed(error?: Error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private _completeClose(error?: Error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n\r\n            if (Platform.isBrowser) {\r\n                window.document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this._startInternal();\r\n\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this._completeClose();\r\n    }\r\n\r\n    private _getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this._reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                try {\r\n                    callback(null, error);\r\n                } catch (e) {\r\n                    this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n                }\r\n            });\r\n    }\r\n\r\n    private _cleanupPingTimer(): void {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n\r\n    private _cleanupTimeout(): void {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private _createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _launchStreams(streams: IStreamResult<any>[], promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private _replaceStreamingParams(args: any[]): [IStreamResult<any>[], string[]] {\r\n        const streams: IStreamResult<any>[] = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private _isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private _createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private _createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private _createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private _createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}