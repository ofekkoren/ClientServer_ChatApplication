{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { LogLevel } from \"./ILogger\";\nimport { NullLogger } from \"./Loggers\"; // Version token that will be replaced by the prepack command\n\n/** The version of the SignalR client. */\n\nexport const VERSION = \"6.0.5\";\n/** @private */\n\nexport class Arg {\n  static isRequired(val, name) {\n    if (val === null || val === undefined) {\n      throw new Error(`The '${name}' argument is required.`);\n    }\n  }\n\n  static isNotEmpty(val, name) {\n    if (!val || val.match(/^\\s*$/)) {\n      throw new Error(`The '${name}' argument should not be empty.`);\n    }\n  }\n\n  static isIn(val, values, name) {\n    // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\n    if (!(val in values)) {\n      throw new Error(`Unknown ${name} value: ${val}.`);\n    }\n  }\n\n}\n/** @private */\n\nexport class Platform {\n  // react-native has a window but no document so we should check both\n  static get isBrowser() {\n    return typeof window === \"object\" && typeof window.document === \"object\";\n  } // WebWorkers don't have a window object so the isBrowser check would fail\n\n\n  static get isWebWorker() {\n    return typeof self === \"object\" && \"importScripts\" in self;\n  } // react-native has a window but no document\n\n\n  static get isReactNative() {\n    return typeof window === \"object\" && typeof window.document === \"undefined\";\n  } // Node apps shouldn't have a window object, but WebWorkers don't either\n  // so we need to check for both WebWorker and window\n\n\n  static get isNode() {\n    return !this.isBrowser && !this.isWebWorker && !this.isReactNative;\n  }\n\n}\n/** @private */\n\nexport function getDataDetail(data, includeContent) {\n  let detail = \"\";\n\n  if (isArrayBuffer(data)) {\n    detail = `Binary data of length ${data.byteLength}`;\n\n    if (includeContent) {\n      detail += `. Content: '${formatArrayBuffer(data)}'`;\n    }\n  } else if (typeof data === \"string\") {\n    detail = `String data of length ${data.length}`;\n\n    if (includeContent) {\n      detail += `. Content: '${data}'`;\n    }\n  }\n\n  return detail;\n}\n/** @private */\n\nexport function formatArrayBuffer(data) {\n  const view = new Uint8Array(data); // Uint8Array.map only supports returning another Uint8Array?\n\n  let str = \"\";\n  view.forEach(num => {\n    const pad = num < 16 ? \"0\" : \"\";\n    str += `0x${pad}${num.toString(16)} `;\n  }); // Trim of trailing space.\n\n  return str.substr(0, str.length - 1);\n} // Also in signalr-protocol-msgpack/Utils.ts\n\n/** @private */\n\nexport function isArrayBuffer(val) {\n  return val && typeof ArrayBuffer !== \"undefined\" && (val instanceof ArrayBuffer || // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\n  val.constructor && val.constructor.name === \"ArrayBuffer\");\n}\n/** @private */\n\nexport async function sendMessage(logger, transportName, httpClient, url, accessTokenFactory, content, options) {\n  let headers = {};\n\n  if (accessTokenFactory) {\n    const token = await accessTokenFactory();\n\n    if (token) {\n      headers = {\n        [\"Authorization\"]: `Bearer ${token}`\n      };\n    }\n  }\n\n  const [name, value] = getUserAgentHeader();\n  headers[name] = value;\n  logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent)}.`);\n  const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\n  const response = await httpClient.post(url, {\n    content,\n    headers: { ...headers,\n      ...options.headers\n    },\n    responseType,\n    timeout: options.timeout,\n    withCredentials: options.withCredentials\n  });\n  logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\n}\n/** @private */\n\nexport function createLogger(logger) {\n  if (logger === undefined) {\n    return new ConsoleLogger(LogLevel.Information);\n  }\n\n  if (logger === null) {\n    return NullLogger.instance;\n  }\n\n  if (logger.log !== undefined) {\n    return logger;\n  }\n\n  return new ConsoleLogger(logger);\n}\n/** @private */\n\nexport class SubjectSubscription {\n  constructor(subject, observer) {\n    this._subject = subject;\n    this._observer = observer;\n  }\n\n  dispose() {\n    const index = this._subject.observers.indexOf(this._observer);\n\n    if (index > -1) {\n      this._subject.observers.splice(index, 1);\n    }\n\n    if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\n      this._subject.cancelCallback().catch(_ => {});\n    }\n  }\n\n}\n/** @private */\n\nexport class ConsoleLogger {\n  constructor(minimumLogLevel) {\n    this._minLevel = minimumLogLevel;\n    this.out = console;\n  }\n\n  log(logLevel, message) {\n    if (logLevel >= this._minLevel) {\n      const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\n\n      switch (logLevel) {\n        case LogLevel.Critical:\n        case LogLevel.Error:\n          this.out.error(msg);\n          break;\n\n        case LogLevel.Warning:\n          this.out.warn(msg);\n          break;\n\n        case LogLevel.Information:\n          this.out.info(msg);\n          break;\n\n        default:\n          // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\n          this.out.log(msg);\n          break;\n      }\n    }\n  }\n\n}\n/** @private */\n\nexport function getUserAgentHeader() {\n  let userAgentHeaderName = \"X-SignalR-User-Agent\";\n\n  if (Platform.isNode) {\n    userAgentHeaderName = \"User-Agent\";\n  }\n\n  return [userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion())];\n}\n/** @private */\n\nexport function constructUserAgent(version, os, runtime, runtimeVersion) {\n  // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\n  let userAgent = \"Microsoft SignalR/\";\n  const majorAndMinor = version.split(\".\");\n  userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\n  userAgent += ` (${version}; `;\n\n  if (os && os !== \"\") {\n    userAgent += `${os}; `;\n  } else {\n    userAgent += \"Unknown OS; \";\n  }\n\n  userAgent += `${runtime}`;\n\n  if (runtimeVersion) {\n    userAgent += `; ${runtimeVersion}`;\n  } else {\n    userAgent += \"; Unknown Runtime Version\";\n  }\n\n  userAgent += \")\";\n  return userAgent;\n} // eslint-disable-next-line spaced-comment\n\n/*#__PURE__*/\n\nfunction getOsName() {\n  if (Platform.isNode) {\n    switch (process.platform) {\n      case \"win32\":\n        return \"Windows NT\";\n\n      case \"darwin\":\n        return \"macOS\";\n\n      case \"linux\":\n        return \"Linux\";\n\n      default:\n        return process.platform;\n    }\n  } else {\n    return \"\";\n  }\n} // eslint-disable-next-line spaced-comment\n\n/*#__PURE__*/\n\n\nfunction getRuntimeVersion() {\n  if (Platform.isNode) {\n    return process.versions.node;\n  }\n\n  return undefined;\n}\n\nfunction getRuntime() {\n  if (Platform.isNode) {\n    return \"NodeJS\";\n  } else {\n    return \"Browser\";\n  }\n}\n/** @private */\n\n\nexport function getErrorString(e) {\n  if (e.stack) {\n    return e.stack;\n  } else if (e.message) {\n    return e.message;\n  }\n\n  return `${e}`;\n}\n/** @private */\n\nexport function getGlobalThis() {\n  // globalThis is semi-new and not available in Node until v12\n  if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n\n  throw new Error(\"could not find global\");\n}","map":{"version":3,"mappings":"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","names":["LogLevel","NullLogger","VERSION","Arg","isRequired","val","name","undefined","Error","isNotEmpty","match","isIn","values","Platform","isBrowser","window","document","isWebWorker","self","isReactNative","isNode","getDataDetail","data","includeContent","detail","isArrayBuffer","byteLength","formatArrayBuffer","length","view","Uint8Array","str","forEach","num","pad","toString","substr","ArrayBuffer","constructor","sendMessage","logger","transportName","httpClient","url","accessTokenFactory","content","options","headers","token","value","getUserAgentHeader","log","Trace","logMessageContent","responseType","response","post","timeout","withCredentials","statusCode","createLogger","ConsoleLogger","Information","instance","SubjectSubscription","subject","observer","_subject","_observer","dispose","index","observers","indexOf","splice","cancelCallback","catch","_","minimumLogLevel","_minLevel","out","console","logLevel","message","msg","Date","toISOString","Critical","error","Warning","warn","info","userAgentHeaderName","constructUserAgent","getOsName","getRuntime","getRuntimeVersion","version","os","runtime","runtimeVersion","userAgent","majorAndMinor","split","process","platform","versions","node","getErrorString","e","stack","getGlobalThis","globalThis","global"],"sources":["C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\node_modules\\@microsoft\\signalr\\src\\Utils.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\n\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    public static isNotEmpty(val: string, name: string): void {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n    // react-native has a window but no document so we should check both\r\n    public static get isBrowser(): boolean {\r\n        return typeof window === \"object\" && typeof window.document === \"object\";\r\n    }\r\n\r\n    // WebWorkers don't have a window object so the isBrowser check would fail\r\n    public static get isWebWorker(): boolean {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    // react-native has a window but no document\r\n    static get isReactNative(): boolean {\r\n        return typeof window === \"object\" && typeof window.document === \"undefined\";\r\n    }\r\n\r\n    // Node apps shouldn't have a window object, but WebWorkers don't either\r\n    // so we need to check for both WebWorker and window\r\n    public static get isNode(): boolean {\r\n        return !this.isBrowser && !this.isWebWorker && !this.isReactNative;\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: (() => string | Promise<string>) | undefined,\r\n                                  content: string | ArrayBuffer, options: IHttpConnectionOptions): Promise<void> {\r\n    let headers: {[k: string]: string} = {};\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent!)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers},\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel): ILogger {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log !== undefined) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private _subject: Subject<T>;\r\n    private _observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly _minLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public out: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getUserAgentHeader(): [string, string] {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [ userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion()) ];\r\n}\r\n\r\n/** @private */\r\nexport function constructUserAgent(version: string, os: string, runtime: string, runtimeVersion: string | undefined): string {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent: string = \"Microsoft SignalR/\";\r\n\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    } else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n\r\n    userAgent += `${runtime}`;\r\n\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    } else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName(): string {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion(): string | undefined {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction getRuntime(): string {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    } else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getErrorString(e: any): string {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    } else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n\r\n/** @private */\r\nexport function getGlobalThis(): unknown {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}"]},"metadata":{},"sourceType":"module"}