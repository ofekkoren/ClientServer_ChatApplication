{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\chatScreen\\\\ChatScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport './ChatScreen.css';\nimport { useState, useRef } from \"react\";\nimport LeftScreen from './LeftScreen';\nimport RightScreen from \"./RightScreen\";\nimport users from \"../db/UsersDataBase\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { user } from '../logIn/LogIn';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatScreen() {\n  _s();\n\n  // location.state.name\n  const location = useLocation(); // console.log(location.state.user);\n\n  let [currentConversation, setCurrentConversation] = useState(\"\");\n  let conversationDBRef = useRef(\"\"); //Reference to the original location of the conversation in the DB.\n\n  let [currentListOfChats, setCurrentListOfChats] = useState(user.chats);\n  /**\r\n   * Scrolls to the bottom element after a timeout of 600 ms.\r\n   * @param bottom an element that the page will scroll to.\r\n   */\n\n  const scrollWithDelay = bottom => {\n    setTimeout(() => {\n      bottom.scrollIntoView({\n        block: \"end\"\n      });\n    }, 600);\n  };\n\n  useEffect(() => {\n    //Applying the function only if a chat was chosen by the user.\n    if (currentConversation !== \"\") {\n      let bottom = document.getElementById(\"lastMessage\"); //If a new message was sent in the current chat we add this message to the corresponding array in our DB.\n\n      if (currentConversation.messages.length !== conversationDBRef.current.messages.length) {\n        conversationDBRef.current.messages.push(currentConversation.messages[currentConversation.messages.length - 1]); //Scrolling down to the last message if the user sent a new message.\n\n        if (currentConversation.messages[currentConversation.messages.length - 1].sender === user.username) {\n          bottom.scrollIntoView({\n            block: \"end\"\n          }); //If the last message sent was a video, a timeout is set to let the video players to open up.\n\n          if (currentConversation.messages[currentConversation.messages.length - 1].type === \"video\") scrollWithDelay(bottom);\n        }\n      } //If we changed the chat conversation a timeout is set to let the video players to open up.\n      else {\n        bottom.scrollIntoView({\n          block: \"end\"\n        });\n        scrollWithDelay(bottom);\n      } // Finding the index of the current conversation in the array of conversations the user is having.\n\n\n      var index = -1;\n\n      for (var i = 0; i < Object.keys(currentListOfChats).length; i++) {\n        if (currentListOfChats[i].users === currentConversation.users) {\n          index = i;\n        }\n      } // If the current conversaion is in the array, add it to the front of the array.\n\n\n      if (index !== -1) {\n        // var chatsArr = [...currentListOfChats];\n        // var chatsArr = currentListOfChats.slice();\n        let chatsArr = [...currentListOfChats]; // console.log(chatsArr)\n\n        chatsArr.splice(index, 1);\n        chatsArr.unshift(currentConversation); // var chatsArr = [...currentListOfChats, currentConversation];\n        // chatsArr.splice(index, 1);\n        // chatsArr.unshift(currentConversation);\n        // console.log(chatsArr);\n\n        user.chats = chatsArr; // console.log(chatsArr);\n\n        setCurrentListOfChats(chatsArr); // console.log(currentListOfChats);\n      } // console.log(currentConversationIndex);\n      // console.log(currentListOfChats);\n      // currentListOfChats.unshift(props.currentConversation);\n      // let chatsArr = [...currentListOfChats, currentConversation];\n      // setConversations(chatsArr);\n\n    }\n  }, [currentConversation]); // props.username = users[0]; // TODO Used for debug,will be deleted in the future\n  //If there is no user connected the chat screen won't be displayed.\n\n  if (user === \"\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sign-up-form\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-center\",\n        role: \"alert\",\n        children: [\"You have to log-in in order to see the chat screen.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 105\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 111\n        }, this), \"You can click \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"text\",\n          children: \"here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 31\n        }, this), \" to log-in.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 83\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-chat-screen justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner-chat-cube\",\n        children: [/*#__PURE__*/_jsxDEV(LeftScreen, {\n          currentConversation: currentConversation,\n          user: user,\n          setChat: setCurrentConversation,\n          refer: conversationDBRef,\n          currentListOfChats: currentListOfChats,\n          setCurrentListOfChats: setCurrentListOfChats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(RightScreen, {\n          chat: currentConversation,\n          setChat: setCurrentConversation,\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(ChatScreen, \"KapyZu4D+yPo8LQCsiS0jshmHfs=\", false, function () {\n  return [useLocation];\n});\n\n_c = ChatScreen;\nexport default ChatScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/chatScreen/ChatScreen.js"],"names":["React","useEffect","useState","useRef","LeftScreen","RightScreen","users","Link","useLocation","user","ChatScreen","location","currentConversation","setCurrentConversation","conversationDBRef","currentListOfChats","setCurrentListOfChats","chats","scrollWithDelay","bottom","setTimeout","scrollIntoView","block","document","getElementById","messages","length","current","push","sender","username","type","index","i","Object","keys","chatsArr","splice","unshift"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport './ChatScreen.css';\r\nimport { useState, useRef } from \"react\";\r\nimport LeftScreen from './LeftScreen';\r\nimport RightScreen from \"./RightScreen\";\r\nimport users from \"../db/UsersDataBase\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { user } from '../logIn/LogIn';\r\n\r\nfunction ChatScreen() {\r\n    // location.state.name\r\n    const location = useLocation();\r\n    // console.log(location.state.user);\r\n\r\n    let [currentConversation, setCurrentConversation] = useState(\"\");\r\n    let conversationDBRef = useRef(\"\"); //Reference to the original location of the conversation in the DB.\r\n    let [currentListOfChats, setCurrentListOfChats] = useState(user.chats);\r\n\r\n\r\n    /**\r\n     * Scrolls to the bottom element after a timeout of 600 ms.\r\n     * @param bottom an element that the page will scroll to.\r\n     */\r\n    const scrollWithDelay = (bottom) => {\r\n        setTimeout(() => {\r\n            bottom.scrollIntoView({ block: \"end\" });\r\n        }, 600);\r\n    }\r\n\r\n    useEffect(() => {\r\n        //Applying the function only if a chat was chosen by the user.\r\n        if (currentConversation !== \"\") {\r\n            let bottom = document.getElementById(\"lastMessage\");\r\n            //If a new message was sent in the current chat we add this message to the corresponding array in our DB.\r\n            if (currentConversation.messages.length !== conversationDBRef.current.messages.length) {\r\n                conversationDBRef.current.messages.push(currentConversation.messages[currentConversation.messages.length - 1])\r\n                //Scrolling down to the last message if the user sent a new message.\r\n                if (currentConversation.messages[currentConversation.messages.length - 1].sender === user.username) {\r\n                    bottom.scrollIntoView({ block: \"end\" });\r\n                    //If the last message sent was a video, a timeout is set to let the video players to open up.\r\n                    if (currentConversation.messages[currentConversation.messages.length - 1].type === \"video\")\r\n                        scrollWithDelay(bottom)\r\n                }\r\n            }\r\n            //If we changed the chat conversation a timeout is set to let the video players to open up.\r\n            else {\r\n                bottom.scrollIntoView({ block: \"end\" });\r\n                scrollWithDelay(bottom)\r\n            }\r\n\r\n            // Finding the index of the current conversation in the array of conversations the user is having.\r\n\r\n            var index = -1;\r\n            for (var i = 0; i < Object.keys(currentListOfChats).length; i++) {\r\n                if (currentListOfChats[i].users === currentConversation.users) {\r\n                    index = i;\r\n                }\r\n            }\r\n\r\n            // If the current conversaion is in the array, add it to the front of the array.\r\n            if (index !== -1) {\r\n                // var chatsArr = [...currentListOfChats];\r\n                // var chatsArr = currentListOfChats.slice();\r\n                let chatsArr = [...currentListOfChats];\r\n                // console.log(chatsArr)\r\n                chatsArr.splice(index, 1);\r\n                chatsArr.unshift(currentConversation);\r\n                // var chatsArr = [...currentListOfChats, currentConversation];\r\n                // chatsArr.splice(index, 1);\r\n                // chatsArr.unshift(currentConversation);\r\n\r\n                // console.log(chatsArr);\r\n                user.chats = chatsArr;\r\n                // console.log(chatsArr);\r\n                setCurrentListOfChats(chatsArr);\r\n                // console.log(currentListOfChats);\r\n            }\r\n            // console.log(currentConversationIndex);\r\n            // console.log(currentListOfChats);\r\n            // currentListOfChats.unshift(props.currentConversation);\r\n            // let chatsArr = [...currentListOfChats, currentConversation];\r\n            // setConversations(chatsArr);\r\n        }\r\n    }, [currentConversation])\r\n\r\n\r\n// props.username = users[0]; // TODO Used for debug,will be deleted in the future\r\n\r\n//If there is no user connected the chat screen won't be displayed.\r\nif (user === \"\") {\r\n    return (\r\n        <div className=\"sign-up-form\">\r\n            <h4 className=\"text-center\" role=\"alert\">You have to log-in in order to see the chat screen.<br /><br />\r\n                You can click <Link to='/' className=\"text\">here</Link> to log-in.<br />\r\n            </h4>\r\n        </div>\r\n    )\r\n\r\n} else {\r\n    return (\r\n        <div className=\"container-chat-screen justify-content-center\">\r\n            <div className=\"inner-chat-cube\">\r\n                {/* <LeftScreen logInUsername=\"Ofek Koren\"/> */}\r\n                <LeftScreen currentConversation={currentConversation} user={user} setChat={setCurrentConversation} refer={conversationDBRef} currentListOfChats={currentListOfChats} setCurrentListOfChats={setCurrentListOfChats} />\r\n                {/* <LeftScreen currentConversation={currentConversation} user={user} setChat={setCurrentConversation} refer={conversationDBRef} updateListOfConversations={updateListOfConversations} /> */}\r\n                <RightScreen chat={currentConversation} setChat={setCurrentConversation} user={user} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default ChatScreen;"]},"metadata":{},"sourceType":"module"}