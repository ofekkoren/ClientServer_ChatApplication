{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\chatScreen\\\\LeftScreen.js\",\n    _s = $RefreshSig$();\n\nimport './ChatScreen.css';\nimport './LeftScreen.css';\nimport './leftChatItem/LeftChatItem.css';\nimport users from '../db/UsersDataBase';\nimport LeftChatItem from './leftChatItem/LeftChatItem';\nimport conversations from '../db/Conversations';\nimport { useState, useRef } from \"react\";\nimport ChooseNewChat from './ChooseNewChat';\nimport AddNewChat from './AddNewChat';\nimport { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LeftScreen(props) {\n  _s();\n\n  // function LeftScreen(props,{ logInUsername }) {\n  //put list of chats for debug.\n  let [currentListOfChats, setcurrentListOfChats] = useState(users[0].chats); // console.log(users[0].chats)\n  // let newChatDBRef = useRef(\"\");\n\n  var logInUserImage;\n  /*\r\n   * The function returns the conversations of the current log-in user, according\r\n   * to the username (his id). \r\n  */\n\n  function getUsersChats(logInUsername) {\n    for (var i = 0; i < Object.keys(users).length; i++) {\n      if (users[i].username.localeCompare(logInUsername) === 0) {\n        // numOfConversations = Object.keys(users[i].chats).length;\n        return users[i];\n      }\n    }\n  } // Chats holds all the conversations of the current log-in user.\n\n\n  var chats = getUsersChats(props.logInUsername).chats; // Keeping the current log-in user's profile image.\n\n  logInUserImage = getUsersChats(props.logInUsername).image;\n  var relevantInfo = [];\n  var usernameInChat = \"\";\n  var lastMessage = \"\";\n  var time = \"\";\n  var image;\n  var type = \"\";\n  /*\r\n   * For each conversation the current log-in user is having, we create the information\r\n   * needed to be presented on the left side bar, including the contact's name, his profile picture,\r\n   * the last message has been sent in the conversation and the time it was delivered.\r\n  */\n\n  for (var i = 0; i < Object.keys(chats).length; i++) {\n    // If the username in the conversation information is our log-in username, the other username is the\n    // contact's username.\n    if (chats[i].users[0].username.localeCompare(props.logInUsername) == 0) {\n      usernameInChat = chats[i].users[1].username;\n    } else {\n      usernameInChat = chats[i].users[0].username;\n    }\n\n    lastMessage = chats[i].messages[chats[i].messages.length - 1].content;\n    type = chats[i].messages[chats[i].messages.length - 1].type;\n    time = chats[i].messages[chats[i].messages.length - 1].createdAt;\n    image = getUsersChats(usernameInChat).image;\n    relevantInfo.push({\n      usernameInChat: usernameInChat,\n      type: type,\n      lastMessage: lastMessage,\n      time: time,\n      image: image\n    });\n  }\n\n  function showChat(chat) {\n    props.refer.current = chat;\n    props.setChat(chat);\n  }\n\n  var conversationsList;\n  conversationsList = currentListOfChats.map((conversation, index) => {\n    return /*#__PURE__*/_createElement(LeftChatItem, { ...relevantInfo[index],\n      key: index,\n      onClick: () => showChat(chats[index]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 16\n      }\n    });\n  });\n  return (\n    /*#__PURE__*/\n    ///\n    _jsxDEV(\"div\", {\n      className: \"col-4 leftScreen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topLine\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bi bi-person-plus-fill add-conversation ms-3\",\n          \"data-bs-toggle\": \"modal\",\n          \"data-bs-target\": \"#add-new-contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logInUserImage,\n          className: \"float-start top-left-profile-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"top-left-username\",\n          children: props.logInUsername\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center-col\",\n          id: \"present-left-chat-items\",\n          children: conversationsList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ChooseNewChat, {\n        logInUsername: props.logInUsername,\n        conversationsList: conversationsList,\n        currentListOfChats: currentListOfChats,\n        setcurrentListOfChats: setcurrentListOfChats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(LeftScreen, \"sZNXe0Pwtnr2r1Z+9U+hTDNU/HE=\");\n\n_c = LeftScreen;\nexport default LeftScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeftScreen\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/chatScreen/LeftScreen.js"],"names":["users","LeftChatItem","conversations","useState","useRef","ChooseNewChat","AddNewChat","LeftScreen","props","currentListOfChats","setcurrentListOfChats","chats","logInUserImage","getUsersChats","logInUsername","i","Object","keys","length","username","localeCompare","image","relevantInfo","usernameInChat","lastMessage","time","type","messages","content","createdAt","push","showChat","chat","refer","current","setChat","conversationsList","map","conversation","index"],"mappings":"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","sourcesContent":["import './ChatScreen.css';\r\nimport './LeftScreen.css';\r\nimport './leftChatItem/LeftChatItem.css';\r\nimport users from '../db/UsersDataBase';\r\nimport LeftChatItem from './leftChatItem/LeftChatItem';\r\nimport conversations from '../db/Conversations';\r\nimport { useState, useRef } from \"react\";\r\nimport ChooseNewChat from './ChooseNewChat';\r\nimport AddNewChat from './AddNewChat';\r\n\r\n\r\nfunction LeftScreen(props) {\r\n    // function LeftScreen(props,{ logInUsername }) {\r\n\r\n    //put list of chats for debug.\r\n    let [currentListOfChats, setcurrentListOfChats] = useState(users[0].chats);\r\n    // console.log(users[0].chats)\r\n    // let newChatDBRef = useRef(\"\");\r\n\r\n    var logInUserImage;\r\n\r\n    /*\r\n     * The function returns the conversations of the current log-in user, according\r\n     * to the username (his id). \r\n    */\r\n    function getUsersChats(logInUsername) {\r\n        for (var i = 0; i < Object.keys(users).length; i++) {\r\n            if (users[i].username.localeCompare(logInUsername) === 0) {\r\n                // numOfConversations = Object.keys(users[i].chats).length;\r\n                return users[i];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // Chats holds all the conversations of the current log-in user.\r\n    var chats = getUsersChats(props.logInUsername).chats;\r\n    // Keeping the current log-in user's profile image.\r\n    logInUserImage = getUsersChats(props.logInUsername).image;\r\n\r\n\r\n    var relevantInfo = [];\r\n    var usernameInChat = \"\";\r\n    var lastMessage = \"\";\r\n    var time = \"\";\r\n    var image;\r\n    var type = \"\";\r\n\r\n\r\n    /*\r\n     * For each conversation the current log-in user is having, we create the information\r\n     * needed to be presented on the left side bar, including the contact's name, his profile picture,\r\n     * the last message has been sent in the conversation and the time it was delivered.\r\n    */\r\n    for (var i = 0; i < Object.keys(chats).length; i++) {\r\n        // If the username in the conversation information is our log-in username, the other username is the\r\n        // contact's username.\r\n        if (chats[i].users[0].username.localeCompare(props.logInUsername) == 0) {\r\n            usernameInChat = chats[i].users[1].username;\r\n        } else {\r\n            usernameInChat = chats[i].users[0].username;\r\n        }\r\n        lastMessage = chats[i].messages[chats[i].messages.length - 1].content;\r\n        type = chats[i].messages[chats[i].messages.length - 1].type;\r\n        time = chats[i].messages[chats[i].messages.length - 1].createdAt;\r\n        image = getUsersChats(usernameInChat).image;\r\n        relevantInfo.push({ usernameInChat: usernameInChat, type: type, lastMessage: lastMessage, time: time, image: image });\r\n    }\r\n\r\n    function showChat(chat) {\r\n        props.refer.current = chat;\r\n        props.setChat(chat);\r\n    }\r\n\r\n    var conversationsList;\r\n    conversationsList = currentListOfChats.map((conversation, index) => {\r\n        return <LeftChatItem {...relevantInfo[index]} key={index} onClick={()=>showChat(chats[index])}/>\r\n    });\r\n\r\n\r\n    return (\r\n        ///\r\n        <div className=\"col-4 leftScreen\">\r\n            <div className=\"topLine\">\r\n                <button className=\"bi bi-person-plus-fill add-conversation ms-3\" data-bs-toggle=\"modal\" data-bs-target=\"#add-new-contact\"></button>\r\n                <img src={logInUserImage} className=\"float-start top-left-profile-image\"></img>\r\n                {/* <img src={logInUserImage} className=\"top-profile-image\"></img> */}\r\n\r\n                    <h5 className='top-left-username'>{props.logInUsername}</h5>\r\n                </div>\r\n\r\n                {/* <div className=\"topLine\">\r\n                <img src={process.env.PUBLIC_URL + props.chatWith.image}\r\n                     className=\" top-profile-image\"></img>\r\n                <h5>{props.chatWith.nickname}</h5>\r\n            </div> */}\r\n\r\n\r\n                <div className=\"container\">\r\n                    <div className=\"center-col\" id=\"present-left-chat-items\">\r\n                        {conversationsList}\r\n                    </div>\r\n                </div>\r\n\r\n                <ChooseNewChat logInUsername={props.logInUsername} conversationsList={conversationsList} currentListOfChats={currentListOfChats} setcurrentListOfChats={setcurrentListOfChats} />\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default LeftScreen;"]},"metadata":{},"sourceType":"module"}