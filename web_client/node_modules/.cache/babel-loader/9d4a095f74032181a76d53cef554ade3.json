{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nimport { isArrayBuffer } from \"./Utils\";\n/** @private */\n\nexport class HandshakeProtocol {\n  // Handshake request is always JSON\n  writeHandshakeRequest(handshakeRequest) {\n    return TextMessageFormat.write(JSON.stringify(handshakeRequest));\n  }\n\n  parseHandshakeResponse(data) {\n    let messageData;\n    let remainingData;\n\n    if (isArrayBuffer(data)) {\n      // Format is binary but still need to read JSON text from handshake response\n      const binaryData = new Uint8Array(data);\n      const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\n\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      } // content before separator is handshake response\n      // optional content after is additional messages\n\n\n      const responseLength = separatorIndex + 1;\n      messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\n      remainingData = binaryData.byteLength > responseLength ? binaryData.slice(responseLength).buffer : null;\n    } else {\n      const textData = data;\n      const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\n\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      } // content before separator is handshake response\n      // optional content after is additional messages\n\n\n      const responseLength = separatorIndex + 1;\n      messageData = textData.substring(0, responseLength);\n      remainingData = textData.length > responseLength ? textData.substring(responseLength) : null;\n    } // At this point we should have just the single handshake message\n\n\n    const messages = TextMessageFormat.parse(messageData);\n    const response = JSON.parse(messages[0]);\n\n    if (response.type) {\n      throw new Error(\"Expected a handshake response from the server.\");\n    }\n\n    const responseMessage = response; // multiple messages could have arrived with handshake\n    // return additional data to be parsed as usual, or null if all parsed\n\n    return [remainingData, responseMessage];\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,iBAAT,QAAkC,qBAAlC;AACA,SAASC,aAAT,QAA8B,SAA9B;AAcA;;AACA,OAAM,MAAOC,iBAAP,CAAwB;AAC1B;AACOC,uBAAqB,CAACC,gBAAD,EAA0C;AAClE,WAAOJ,iBAAiB,CAACK,KAAlB,CAAwBC,IAAI,CAACC,SAAL,CAAeH,gBAAf,CAAxB,CAAP;AACH;;AAEMI,wBAAsB,CAACC,IAAD,EAAU;AACnC,QAAIC,WAAJ;AACA,QAAIC,aAAJ;;AAEA,QAAIV,aAAa,CAACQ,IAAD,CAAjB,EAAyB;AACrB;AACA,YAAMG,UAAU,GAAG,IAAIC,UAAJ,CAAeJ,IAAf,CAAnB;AACA,YAAMK,cAAc,GAAGF,UAAU,CAACG,OAAX,CAAmBf,iBAAiB,CAACgB,mBAArC,CAAvB;;AACA,UAAIF,cAAc,KAAK,CAAC,CAAxB,EAA2B;AACvB,cAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;AACH,OANoB,CAQrB;AACA;;;AACA,YAAMC,cAAc,GAAGJ,cAAc,GAAG,CAAxC;AACAJ,iBAAW,GAAGS,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2Bb,UAAU,CAACY,KAAX,CAAiB,CAAjB,EAAoBN,cAApB,CAA3B,CAAhC,CAAd;AACAP,mBAAa,GAAIC,UAAU,CAACc,UAAX,GAAwBR,cAAzB,GAA2CN,UAAU,CAACY,KAAX,CAAiBN,cAAjB,EAAiCS,MAA5E,GAAqF,IAArG;AACH,KAbD,MAaO;AACH,YAAMC,QAAQ,GAAWnB,IAAzB;AACA,YAAMK,cAAc,GAAGc,QAAQ,CAACb,OAAT,CAAiBf,iBAAiB,CAAC6B,eAAnC,CAAvB;;AACA,UAAIf,cAAc,KAAK,CAAC,CAAxB,EAA2B;AACvB,cAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;AACH,OALE,CAOH;AACA;;;AACA,YAAMC,cAAc,GAAGJ,cAAc,GAAG,CAAxC;AACAJ,iBAAW,GAAGkB,QAAQ,CAACE,SAAT,CAAmB,CAAnB,EAAsBZ,cAAtB,CAAd;AACAP,mBAAa,GAAIiB,QAAQ,CAACG,MAAT,GAAkBb,cAAnB,GAAqCU,QAAQ,CAACE,SAAT,CAAmBZ,cAAnB,CAArC,GAA0E,IAA1F;AACH,KA7BkC,CA+BnC;;;AACA,UAAMc,QAAQ,GAAGhC,iBAAiB,CAACiC,KAAlB,CAAwBvB,WAAxB,CAAjB;AACA,UAAMwB,QAAQ,GAAG5B,IAAI,CAAC2B,KAAL,CAAWD,QAAQ,CAAC,CAAD,CAAnB,CAAjB;;AACA,QAAIE,QAAQ,CAACC,IAAb,EAAmB;AACf,YAAM,IAAIlB,KAAJ,CAAU,gDAAV,CAAN;AACH;;AACD,UAAMmB,eAAe,GAA6BF,QAAlD,CArCmC,CAuCnC;AACA;;AACA,WAAO,CAACvB,aAAD,EAAgByB,eAAhB,CAAP;AACH;;AAhDyB","names":["TextMessageFormat","isArrayBuffer","HandshakeProtocol","writeHandshakeRequest","handshakeRequest","write","JSON","stringify","parseHandshakeResponse","data","messageData","remainingData","binaryData","Uint8Array","separatorIndex","indexOf","RecordSeparatorCode","Error","responseLength","String","fromCharCode","apply","Array","prototype","slice","call","byteLength","buffer","textData","RecordSeparator","substring","length","messages","parse","response","type","responseMessage"],"sources":["C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\node_modules\\@microsoft\\signalr\\src\\HandshakeProtocol.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage: HandshakeResponseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}