{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// 0, 2, 10, 30 second delays before reconnect attempts.\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\n/** @private */\n\nexport class DefaultReconnectPolicy {\n  constructor(retryDelays) {\n    this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\n  }\n\n  nextRetryDelayInMilliseconds(retryContext) {\n    return this._retryDelays[retryContext.previousRetryCount];\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAIA;AACA,MAAMA,oCAAoC,GAAG,CAAC,CAAD,EAAI,IAAJ,EAAU,KAAV,EAAiB,KAAjB,EAAwB,IAAxB,CAA7C;AAEA;;AACA,OAAM,MAAOC,sBAAP,CAA6B;AAG/BC,cAAYC,WAAZ,EAAkC;AAC9B,SAAKC,YAAL,GAAoBD,WAAW,KAAKE,SAAhB,GAA4B,CAAC,GAAGF,WAAJ,EAAiB,IAAjB,CAA5B,GAAqDH,oCAAzE;AACH;;AAEMM,8BAA4B,CAACC,YAAD,EAA2B;AAC1D,WAAO,KAAKH,YAAL,CAAkBG,YAAY,CAACC,kBAA/B,CAAP;AACH;;AAT8B","names":["DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","constructor","retryDelays","_retryDelays","undefined","nextRetryDelayInMilliseconds","retryContext","previousRetryCount"],"sources":["C:\\Users\\Eitan Koren\\oop2\\ex2\\clientSide\\node_modules\\@microsoft\\signalr\\src\\DefaultReconnectPolicy.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly _retryDelays: (number | null)[];\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}