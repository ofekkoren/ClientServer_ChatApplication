{"ast":null,"code":"import users from \"../db/UsersDataBase\";\n/**\r\n * Converts an image input of a user to a base64 string which represents the image.\r\n * @param file the file that was given as input by the user.\r\n * @return a promise to convert the image.\r\n */\n\nexport function convertToBase64(file, onLoadCallback) {\n  return new Promise(function (resolve, reject) {\n    let reader = new FileReader();\n\n    reader.onload = function () {\n      resolve(reader.result);\n    };\n\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n  });\n}\n/**\r\n * @return a formatted \"day.month.year, hour:minutes\" date string.\r\n */\n\nexport function getFormattedDateString(message) {\n  if (message != \"\") {\n    let messageDate = new Date(message.createdAt);\n    let day = messageDate.getDate();\n    let month = messageDate.getMonth() + 1;\n    let year = messageDate.getFullYear();\n    let hour = messageDate.getHours();\n    if (hour < 10) hour = \"0\" + hour;\n    let minutes = messageDate.getMinutes();\n    if (minutes < 10) minutes = \"0\" + minutes;\n    return day + '.' + month + '.' + year + \", \" + hour + ':' + minutes;\n  }\n}\n/**\r\n * The function returns the conversations of the current log-in user, according\r\n * to the username (his id).\r\n * @param logInUsername is the username of the logged-in user.\r\n */\n\nexport function getUser(logInUsername) {\n  for (var i = 0; i < Object.keys(users).length; i++) {\n    if (users[i].username.localeCompare(logInUsername) === 0) {\n      return users[i];\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/chatScreen/Utils.js"],"names":["users","convertToBase64","file","onLoadCallback","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","getFormattedDateString","message","messageDate","Date","createdAt","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","getUser","logInUsername","i","Object","keys","length","username","localeCompare"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,qBAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,cAA/B,EAA+C;AAClD,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,YAAY;AACxBJ,MAAAA,OAAO,CAACE,MAAM,CAACG,MAAR,CAAP;AACH,KAFD;;AAGAH,IAAAA,MAAM,CAACI,OAAP,GAAiBL,MAAjB;AACAC,IAAAA,MAAM,CAACK,aAAP,CAAqBV,IAArB;AACH,GAPM,CAAP;AAQH;AAED;AACA;AACA;;AACA,OAAO,SAASW,sBAAT,CAAgCC,OAAhC,EAAyC;AAC5C,MAAIA,OAAO,IAAI,EAAf,EAAmB;AACf,QAAIC,WAAW,GAAG,IAAIC,IAAJ,CAASF,OAAO,CAACG,SAAjB,CAAlB;AACA,QAAIC,GAAG,GAAGH,WAAW,CAACI,OAAZ,EAAV;AACA,QAAIC,KAAK,GAAGL,WAAW,CAACM,QAAZ,KAAyB,CAArC;AACA,QAAIC,IAAI,GAAGP,WAAW,CAACQ,WAAZ,EAAX;AACA,QAAIC,IAAI,GAAGT,WAAW,CAACU,QAAZ,EAAX;AACA,QAAID,IAAI,GAAG,EAAX,EACIA,IAAI,GAAG,MAAMA,IAAb;AACJ,QAAIE,OAAO,GAAGX,WAAW,CAACY,UAAZ,EAAd;AACA,QAAID,OAAO,GAAG,EAAd,EACIA,OAAO,GAAG,MAAMA,OAAhB;AACJ,WAAOR,GAAG,GAAG,GAAN,GAAYE,KAAZ,GAAoB,GAApB,GAA0BE,IAA1B,GAAiC,IAAjC,GAAwCE,IAAxC,GAA+C,GAA/C,GAAqDE,OAA5D;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,OAAT,CAAiBC,aAAjB,EAAgC;AACnC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAAM,CAACC,IAAP,CAAYhC,KAAZ,EAAmBiC,MAAvC,EAA+CH,CAAC,EAAhD,EAAoD;AAChD,QAAI9B,KAAK,CAAC8B,CAAD,CAAL,CAASI,QAAT,CAAkBC,aAAlB,CAAgCN,aAAhC,MAAmD,CAAvD,EAA0D;AACtD,aAAO7B,KAAK,CAAC8B,CAAD,CAAZ;AACH;AACJ;AACJ","sourcesContent":["import users from \"../db/UsersDataBase\";\r\n\r\n/**\r\n * Converts an image input of a user to a base64 string which represents the image.\r\n * @param file the file that was given as input by the user.\r\n * @return a promise to convert the image.\r\n */\r\nexport function convertToBase64(file, onLoadCallback) {\r\n    return new Promise(function (resolve, reject) {\r\n        let reader = new FileReader();\r\n        reader.onload = function () {\r\n            resolve(reader.result);\r\n        };\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(file);\r\n    });\r\n}\r\n\r\n/**\r\n * @return a formatted \"day.month.year, hour:minutes\" date string.\r\n */\r\nexport function getFormattedDateString(message) {\r\n    if (message != \"\") {\r\n        let messageDate = new Date(message.createdAt);\r\n        let day = messageDate.getDate();\r\n        let month = messageDate.getMonth() + 1;\r\n        let year = messageDate.getFullYear();\r\n        let hour = messageDate.getHours();\r\n        if (hour < 10)\r\n            hour = \"0\" + hour;\r\n        let minutes = messageDate.getMinutes();\r\n        if (minutes < 10)\r\n            minutes = \"0\" + minutes;\r\n        return day + '.' + month + '.' + year + \", \" + hour + ':' + minutes;\r\n    }\r\n}\r\n\r\n/**\r\n * The function returns the conversations of the current log-in user, according\r\n * to the username (his id).\r\n * @param logInUsername is the username of the logged-in user.\r\n */\r\nexport function getUser(logInUsername) {\r\n    for (var i = 0; i < Object.keys(users).length; i++) {\r\n        if (users[i].username.localeCompare(logInUsername) === 0) {\r\n            return users[i];\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}