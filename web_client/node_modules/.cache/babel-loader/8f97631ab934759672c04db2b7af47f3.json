{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan Koren\\\\oop2\\\\ap2\\\\src\\\\signIn\\\\SignIn.js\",\n    _s = $RefreshSig$();\n\nimport '../logIn/LogIn.css';\nimport users from '../db/UsersDataBase';\nimport { convertToBase64Image } from \"../chatScreen/Utils\";\nimport { Link } from \"react-router-dom\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SignIn() {\n  _s();\n\n  const navigate = useNavigate();\n  /**\r\n   * Setting an invalid class and invalid feedback for element.\r\n   * @param element the element that will have an invalid feedback.\r\n   * @param message the message of the feedback.\r\n   */\n\n  const setValid = (element, message) => {\n    const inputParent = element.parentElement;\n    element.classList.add('is-valid');\n    element.classList.remove('is-invalid');\n    const validationMessgage = inputParent.getElementsByClassName(\"validation-helper\")[0];\n    validationMessgage.classList.add('valid-feedback');\n    validationMessgage.classList.remove('invalid-feedback');\n    validationMessgage.innerText = message;\n  };\n  /**\r\n   * Setting an valid class and valid feedback for element.\r\n   * @param element the element that will have a valid feedback.\r\n   * @param message the message of the feedback.\r\n   */\n\n\n  const setInvalid = (element, message) => {\n    const inputParent = element.parentElement;\n    element.classList.add('is-invalid');\n    element.classList.remove('is-valid');\n    const validationMessgage = inputParent.getElementsByClassName(\"validation-helper\")[0];\n    validationMessgage.classList.add('invalid-feedback');\n    validationMessgage.classList.remove('valid-feedback');\n    validationMessgage.innerText = message;\n  };\n  /**\r\n   * Checking if the given username already exists in the users database.\r\n   * @param checkedUsername.\r\n   * @returns false- if the username already exists. true- if the username is free to use.\r\n   */\n\n\n  const checkUserername = checkedUsername => {\n    for (let user of users) {\n      if (user.username === checkedUsername) return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Checking if the given element represents a path to a png/jpg/jpeg file.\r\n   */\n\n\n  const checkImage = checkedImage => {\n    let imagePath = checkedImage.value;\n    let extensionIndex = imagePath.lastIndexOf(\".\") + 1;\n    let extension = imagePath.substring(extensionIndex, imagePath.length).toLowerCase();\n\n    if (extension == \"jpg\" || extension == \"jpeg\" || extension == \"png\") {\n      return true;\n    } else return false;\n  };\n  /**\r\n   * Checking if the data filled by the user in a form is valid.\r\n   * @returns true if all the data is valid. Else, false is returned.\r\n   */\n\n\n  const checkValid = () => {\n    //getting the elements.\n    const userName = document.getElementById('username');\n    const nickName = document.getElementById('nickname');\n    const picture = document.getElementById('picture');\n    const password = document.getElementById('Password');\n    const passwordRepeat = document.getElementById('validatePassword');\n    let isValid = true; //Checking the username. We want it to be unique and not an empty string.\n\n    if (userName.value.trim() === \"\") {\n      setInvalid(userName, 'Username is required');\n      isValid = false;\n    } else if (!checkUserername(userName.value.trim())) {\n      setInvalid(userName, 'Such username already exists');\n      isValid = false;\n    } else setValid(userName, \"This username is available\"); //Checking the nickname. We don't allow empty string as nickname.\n\n\n    if (nickName.value.trim() === \"\") {\n      setInvalid(nickName, 'Nickname is required');\n      isValid = false;\n    } else setValid(nickName, \"Nice Nickname!\"); //Checking the image uploaded by the user. It must be a jpg/png/jpeg file.\n\n\n    if (picture.value != \"\" && !checkImage(picture)) {\n      setInvalid(picture, 'Input type must be: png, jpg or jpeg. You can also choose too not uploat an image');\n      picture.value = \"\";\n      isValid = false;\n    } else setValid(picture, \"\");\n    /*\r\n     * Checking the password chosen by the user. It must be longer than 6 character and contain al least one letter\r\n     * and one number.\r\n     */\n\n\n    if (password.value.length < 6) {\n      setInvalid(password, 'Password must contain at least 6 characters');\n      isValid = false;\n    } else if (password.value.search(/\\d/) == -1) {\n      setInvalid(password, 'Password must contain at least one number');\n      isValid = false;\n    } else if (password.value.search(/[a-zA-Z]/) == -1) {\n      setInvalid(password, 'Password must contain at least one letter');\n      isValid = false;\n    } else setValid(password, \"Good password\");\n\n    if (passwordRepeat.value !== password.value) {\n      setInvalid(passwordRepeat, \"Password doesn't match\");\n      isValid = false;\n    } else setValid(passwordRepeat, \"\");\n\n    return isValid;\n  };\n  /**\r\n   * Handling the submission of the registration form.\r\n   * @param event the submit event.\r\n   */\n\n\n  const handleSubmit = event => {\n    const regForm = event.currentTarget;\n    event.preventDefault();\n    event.stopPropagation(); //If the information filled by the user is valid he will be added to the user database.\n\n    if (checkValid()) {\n      const newUserName = document.getElementById(\"username\").value.trim();\n      const newNickName = document.getElementById('nickname').value.trim();\n      const newPassword = document.getElementById('Password').value;\n      let newPicture = process.env.PUBLIC_URL + \"/images/userImages/default-image.jpg\";\n      users.push({\n        username: newUserName,\n        nickname: newNickName,\n        password: newPassword,\n        image: newPicture\n      }); //If the user chose to upload an image we will change it's image from the deafult user image.\n\n      if (document.getElementById('picture').value != \"\") {\n        var imagePromise = convertToBase64Image(document.getElementById('picture').files[0]);\n        imagePromise.then(function (result) {\n          newPicture = result;\n          users[users.length - 1].image = newPicture;\n        });\n      } //Indicating the user about the successful registration\n\n\n      let formContainer = document.getElementById(\"signContainer\");\n      let signInComplete = document.createElement('div');\n      signInComplete.innerHTML = \"<h4 class=\\\"text-center sign-in-form\\\" role=\\\"alert\\\">\\n\" + \"  You have successfully signed-up   :-)<br><br>  You can click <a href=\\\"#\\\" class=\\\"alert-link\\\">here</a>\" + \" to log-in with your new user <br>\" + \"</h4>\";\n      formContainer.append(signInComplete);\n      document.getElementById(\"signInForm\").remove();\n      navigate(\"/\");\n    }\n  };\n\n  /*#__PURE__*/\n  _jsxDEV(\"div\", {\n    className: \"col-sm-5\",\n    id: \"sd\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"col form-control form-control-lg\",\n      id: \"username\",\n      placeholder: \"Enter username\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"validation-helper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n\n  return (\n    /*#__PURE__*/\n    //The sign-up form.\n    _jsxDEV(\"div\", {\n      className: \"container\",\n      id: \"signContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"text-center sign-in-form needs-validation\",\n        noValidate: true,\n        id: \"signInForm\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group row justify-content-center center-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"username\",\n            className: \"col-sm-2 col-form-label col-form-label-lg\",\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"col form-control form-control-lg\",\n              id: \"username\",\n              placeholder: \"Enter username\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"validation-helper\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group row justify-content-center center-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"nickname\",\n            className: \"col-sm-2 col-form-label col-form-label-lg\",\n            children: \"Nickname\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control form-control-lg\",\n              id: \"nickname\",\n              placeholder: \"Enter nickname\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"validation-helper\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group row justify-content-center center-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"picture\",\n            className: \"col-sm-2 col-form-label col-form-label-lg\",\n            children: \"picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control file-input-sm\",\n            type: \"file\",\n            accept: \".jpg, .jpeg, .png\",\n            id: \"picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"validation-helper\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group row justify-content-center center-user \",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"Password\",\n            className: \"col-sm-2 col-form-label col-form-label-lg\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              className: \"form-control form-control-lg\",\n              id: \"Password\",\n              placeholder: \"Enter your password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"validation-helper\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group row justify-content-center center-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"validatePassword\",\n            className: \"col-sm-4 col-form-label col-form-label-lg\",\n            children: \"Repeat password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              className: \"form-control form-control-lg\",\n              id: \"validatePassword\",\n              placeholder: \"Repeat your password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"validation-helper\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-primary btn-lg\",\n            children: \"Sign-in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text\",\n          children: [\"already registered? sign in \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            className: \"text\",\n            children: \"here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(SignIn, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = SignIn;\nexport default SignIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["C:/Users/Eitan Koren/oop2/ap2/src/signIn/SignIn.js"],"names":["users","convertToBase64Image","Link","useNavigate","SignIn","navigate","setValid","element","message","inputParent","parentElement","classList","add","remove","validationMessgage","getElementsByClassName","innerText","setInvalid","checkUserername","checkedUsername","user","username","checkImage","checkedImage","imagePath","value","extensionIndex","lastIndexOf","extension","substring","length","toLowerCase","checkValid","userName","document","getElementById","nickName","picture","password","passwordRepeat","isValid","trim","search","handleSubmit","event","regForm","currentTarget","preventDefault","stopPropagation","newUserName","newNickName","newPassword","newPicture","process","env","PUBLIC_URL","push","nickname","image","imagePromise","files","then","result","formContainer","signInComplete","createElement","innerHTML","append"],"mappings":"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","sourcesContent":["import '../logIn/LogIn.css';\r\nimport users from '../db/UsersDataBase';\r\nimport {convertToBase64Image} from \"../chatScreen/Utils\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction SignIn() {\r\n    const navigate = useNavigate();\r\n\r\n    /**\r\n     * Setting an invalid class and invalid feedback for element.\r\n     * @param element the element that will have an invalid feedback.\r\n     * @param message the message of the feedback.\r\n     */\r\n    \r\n    const setValid = (element, message) => {\r\n        const inputParent = element.parentElement;\r\n        element.classList.add('is-valid');\r\n        element.classList.remove('is-invalid')\r\n        const validationMessgage = inputParent.getElementsByClassName(\"validation-helper\")[0];\r\n        validationMessgage.classList.add('valid-feedback');\r\n        validationMessgage.classList.remove('invalid-feedback')\r\n        validationMessgage.innerText = message;\r\n    };\r\n\r\n    /**\r\n     * Setting an valid class and valid feedback for element.\r\n     * @param element the element that will have a valid feedback.\r\n     * @param message the message of the feedback.\r\n     */\r\n    const setInvalid = (element, message) => {\r\n        const inputParent = element.parentElement;\r\n        element.classList.add('is-invalid');\r\n        element.classList.remove('is-valid')\r\n        const validationMessgage = inputParent.getElementsByClassName(\"validation-helper\")[0];\r\n        validationMessgage.classList.add('invalid-feedback');\r\n        validationMessgage.classList.remove('valid-feedback')\r\n        validationMessgage.innerText = message;\r\n\r\n    }\r\n\r\n    /**\r\n     * Checking if the given username already exists in the users database.\r\n     * @param checkedUsername.\r\n     * @returns false- if the username already exists. true- if the username is free to use.\r\n     */\r\n    const checkUserername = (checkedUsername) => {\r\n        for (let user of users) {\r\n            if (user.username === checkedUsername)\r\n                return false\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checking if the given element represents a path to a png/jpg/jpeg file.\r\n     */\r\n    const checkImage = (checkedImage) => {\r\n        let imagePath = checkedImage.value;\r\n        let extensionIndex = imagePath.lastIndexOf(\".\") + 1;\r\n        let extension = imagePath.substring(extensionIndex, imagePath.length).toLowerCase();\r\n        if (extension == \"jpg\" || extension == \"jpeg\" || extension == \"png\") {\r\n            return true\r\n        } else\r\n            return false;\r\n    }\r\n\r\n    /**\r\n     * Checking if the data filled by the user in a form is valid.\r\n     * @returns true if all the data is valid. Else, false is returned.\r\n     */\r\n    const checkValid = () => {\r\n        //getting the elements.\r\n        const userName = document.getElementById('username');\r\n        const nickName = document.getElementById('nickname');\r\n        const picture = document.getElementById('picture');\r\n        const password = document.getElementById('Password');\r\n        const passwordRepeat = document.getElementById('validatePassword');\r\n        let isValid = true;\r\n        //Checking the username. We want it to be unique and not an empty string.\r\n        if (userName.value.trim() === \"\") {\r\n            setInvalid(userName, 'Username is required');\r\n            isValid = false;\r\n        } else if (!checkUserername(userName.value.trim())) {\r\n            setInvalid(userName, 'Such username already exists');\r\n            isValid = false;\r\n        } else\r\n            setValid(userName, \"This username is available\");\r\n\r\n        //Checking the nickname. We don't allow empty string as nickname.\r\n        if (nickName.value.trim() === \"\") {\r\n            setInvalid(nickName, 'Nickname is required');\r\n            isValid = false;\r\n        } else\r\n            setValid(nickName, \"Nice Nickname!\")\r\n\r\n        //Checking the image uploaded by the user. It must be a jpg/png/jpeg file.\r\n        if (picture.value != \"\" && !checkImage(picture)) {\r\n            setInvalid(picture, 'Input type must be: png, jpg or jpeg. You can also choose too not uploat an image');\r\n            picture.value = \"\";\r\n            isValid = false;\r\n        } else\r\n            setValid(picture, \"\");\r\n\r\n        /*\r\n         * Checking the password chosen by the user. It must be longer than 6 character and contain al least one letter\r\n         * and one number.\r\n         */\r\n        if (password.value.length < 6) {\r\n            setInvalid(password, 'Password must contain at least 6 characters');\r\n            isValid = false;\r\n        } else if (password.value.search(/\\d/) == -1) {\r\n            setInvalid(password, 'Password must contain at least one number');\r\n            isValid = false;\r\n        } else if (password.value.search(/[a-zA-Z]/) == -1) {\r\n            setInvalid(password, 'Password must contain at least one letter');\r\n            isValid = false;\r\n        } else\r\n            setValid(password, \"Good password\");\r\n\r\n        if (passwordRepeat.value !== password.value) {\r\n            setInvalid(passwordRepeat, \"Password doesn't match\");\r\n            isValid = false;\r\n        } else\r\n            setValid(passwordRepeat, \"\");\r\n        return isValid\r\n    }\r\n\r\n    /**\r\n     * Handling the submission of the registration form.\r\n     * @param event the submit event.\r\n     */\r\n    const handleSubmit = (event) => {\r\n        const regForm = event.currentTarget;\r\n        event.preventDefault();\r\n        event.stopPropagation()\r\n        //If the information filled by the user is valid he will be added to the user database.\r\n        if (checkValid()) {\r\n            const newUserName = document.getElementById(\"username\").value.trim();\r\n            const newNickName = document.getElementById('nickname').value.trim();\r\n            const newPassword = document.getElementById('Password').value;\r\n            let newPicture = process.env.PUBLIC_URL + \"/images/userImages/default-image.jpg\";\r\n            users.push(\r\n                {\r\n                    username: newUserName,\r\n                    nickname: newNickName,\r\n                    password: newPassword,\r\n                    image: newPicture\r\n                })\r\n            //If the user chose to upload an image we will change it's image from the deafult user image.\r\n            if (document.getElementById('picture').value != \"\") {\r\n                var imagePromise = convertToBase64Image(document.getElementById('picture').files[0]);\r\n                imagePromise.then(function (result) {\r\n                    newPicture = result;\r\n                    users[users.length - 1].image = newPicture;\r\n                });\r\n            }\r\n            //Indicating the user about the successful registration\r\n            let formContainer = document.getElementById(\"signContainer\");\r\n            let signInComplete = document.createElement('div');\r\n\r\n            signInComplete.innerHTML = \"<h4 class=\\\"text-center sign-in-form\\\" role=\\\"alert\\\">\\n\" +\r\n                \"  You have successfully signed-up   :-)<br><br>  You can click <a href=\\\"#\\\" class=\\\"alert-link\\\">here</a>\" +\r\n                \" to log-in with your new user <br>\" +\r\n                \"</h4>\"\r\n\r\n            formContainer.append(signInComplete);\r\n            document.getElementById(\"signInForm\").remove();\r\n\r\n            navigate(\"/\")\r\n        }\r\n    }\r\n    <div className=\"col-sm-5\" id=\"sd\">\r\n        <input type=\"text\" className=\"col form-control form-control-lg\" id=\"username\"\r\n               placeholder=\"Enter username\" required></input>\r\n        <span className=\"validation-helper\"></span>\r\n    </div>\r\n    return (\r\n        //The sign-up form.\r\n        <div className=\"container\" id=\"signContainer\">\r\n            <form className=\"text-center sign-in-form needs-validation\" noValidate id=\"signInForm\"\r\n                  onSubmit={handleSubmit}>\r\n                <div className=\"form-group row justify-content-center center-user\">\r\n                    <label htmlFor=\"username\"\r\n                           className=\"col-sm-2 col-form-label col-form-label-lg\">Username</label>\r\n                    <div className=\"col-sm-5\">\r\n                        <input type=\"text\" className=\"col form-control form-control-lg\" id=\"username\"\r\n                               placeholder=\"Enter username\" required></input>\r\n                        <span className=\"validation-helper\"></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group row justify-content-center center-user\">\r\n                    <label htmlFor=\"nickname\"\r\n                           className=\"col-sm-2 col-form-label col-form-label-lg\">Nickname</label>\r\n                    <div className=\"col-sm-5\">\r\n                        <input type=\"text\" className=\"form-control form-control-lg\" id=\"nickname\"\r\n                               placeholder=\"Enter nickname\" required></input>\r\n                        <span className=\"validation-helper\"></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group row justify-content-center center-user\">\r\n                    <label htmlFor=\"picture\"\r\n                           className=\"col-sm-2 col-form-label col-form-label-lg\">picture</label>\r\n                    <input className=\"form-control file-input-sm\" type=\"file\" accept=\".jpg, .jpeg, .png\"\r\n                           id=\"picture\"></input>\r\n                    <span className=\"validation-helper\"></span>\r\n                </div>\r\n                <div className=\"form-group row justify-content-center center-user \">\r\n                    <label htmlFor=\"Password\" className=\"col-sm-2 col-form-label col-form-label-lg\">Password</label>\r\n                    <div className=\"col-sm-5\">\r\n                        <input type=\"password\" className=\"form-control form-control-lg\" id=\"Password\"\r\n                               placeholder=\"Enter your password\"></input>\r\n                        <span className=\"validation-helper\"></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group row justify-content-center center-user\">\r\n                    <label htmlFor=\"validatePassword\" className=\"col-sm-4 col-form-label col-form-label-lg\">Repeat\r\n                        password</label>\r\n                    <div className=\"col-sm-5\">\r\n                        <input type=\"password\" className=\"form-control form-control-lg\" id=\"validatePassword\"\r\n                               placeholder=\"Repeat your password\"></input>\r\n                        <span className=\"validation-helper\"></span>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"mb-3\">\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-lg\">Sign-in</button>\r\n                </div>\r\n\r\n                <div className=\"text\">\r\n                    already registered? sign in <Link to='/' className=\"text\">here</Link>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n        ;\r\n}\r\n\r\nexport default SignIn;\r\n"]},"metadata":{},"sourceType":"module"}